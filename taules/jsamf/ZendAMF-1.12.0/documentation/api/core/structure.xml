<?xml version="1.0"?>
<project version="0.15.1" title="Zend AMF API Documentation">
  <file path="Zend/Session/Validator/HttpUserAgent.php" hash="0f2fdf2ad40d4b8aec46b7adb7552525" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: HttpUserAgent.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Session/Validator/Abstract.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Session\Validator">
      <name>Zend_Session_Validator_HttpUserAgent</name>
      <extends>\Zend_Session_Validator_Abstract</extends>
      <full_name>\Zend_Session_Validator_HttpUserAgent</full_name>
      <docblock>
        <description>Zend_Session_Validator_HttpUserAgent</description>
        <long-description>
</long-description>
        <tag line="28" name="category" description="Zend"/>
        <tag line="28" name="package" description="Zend_Session"/>
        <tag line="28" name="subpackage" description="Validator"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="46" package="Default">
        <name>setup</name>
        <docblock>
          <description>Setup() - this method will get the current user agent and store it in the session
as 'valid data'</description>
          <long-description>
</long-description>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="58" package="Default">
        <name>validate</name>
        <docblock>
          <description>Validate() - this method will determine if the current user agent matches the
user agent we stored when we initialized this variable.</description>
          <long-description>
</long-description>
          <tag line="52" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Session/Validator/Interface.php" hash="486813bf64f636c80c4e353a2b000948" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <interface namespace="default" line="32" package="Zend\Session\Validator">
      <name>Zend_Session_Validator_Interface</name>
      <extends/>
      <full_name>\Zend_Session_Validator_Interface</full_name>
      <docblock>
        <description>Zend_Session_Validator_Interface</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Session"/>
        <tag line="23" name="subpackage" description="Validator"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>setup</name>
        <docblock>
          <description>Setup() - this method will store the environment variables
necessary to be able to validate against in future requests.</description>
          <long-description>
</long-description>
          <tag line="35" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="50" package="Default">
        <name>validate</name>
        <docblock>
          <description>Validate() - this method will be called at the beginning of
every session to determine if the current environment matches
that which was store in the setup() procedure.</description>
          <long-description>
</long-description>
          <tag line="43" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Zend/Session/Validator/Abstract.php" hash="6f7497bdd9bd504cb93a509967ad758f" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Abstract.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Session/Validator/Interface.php</name>
    </include>
    <class final="false" abstract="true" line="37" namespace="default" package="Zend\Session\Validator">
      <name>Zend_Session_Validator_Abstract</name>
      <extends/>
      <full_name>\Zend_Session_Validator_Abstract</full_name>
      <docblock>
        <description>Zend_Session_Validator_Abstract</description>
        <long-description>
</long-description>
        <tag line="28" name="category" description="Zend"/>
        <tag line="28" name="package" description="Zend_Session"/>
        <tag line="28" name="subpackage" description="Validator"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Session_Validator_Interface</implements>
      <method final="false" abstract="false" static="false" visibility="protected" line="48" package="Default">
        <name>setValidData</name>
        <docblock>
          <description>SetValidData() - This method should be used to store the environment variables that
will be needed in order to validate the session later in the validate() method.</description>
          <long-description>&lt;p&gt;These values are stored in the session in the __ZF namespace, in an array named VALID&lt;/p&gt;
</long-description>
          <tag line="40" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="62" package="Default">
        <name>getValidData</name>
        <docblock>
          <description>GetValidData() - This method should be used to retrieve the environment variables that
will be needed to 'validate' a session.</description>
          <long-description>
</long-description>
          <tag line="56" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Session/Exception.php" hash="5940a4c23dba8c389b66400d9e943d99" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <parse_markers>
      <notice line="56">Argument $errfile is missing from the function Docblock</notice>
      <notice line="56">Argument $errline is missing from the function Docblock</notice>
      <notice line="56">Argument $errcontext is missing from the function Docblock</notice>
      <notice line="69">Argument $errfile is missing from the function Docblock</notice>
      <notice line="69">Argument $errline is missing from the function Docblock</notice>
      <notice line="69">Argument $errcontext is missing from the function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Session">
      <name>Zend_Session_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Session_Exception</full_name>
      <docblock>
        <description>Zend_Session_Exception</description>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Session"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="46" package="Default">
        <name>$sessionStartError</name>
        <default>null</default>
        <docblock>
          <description>sessionStartError</description>
          <long-description>
</long-description>
          <tag line="40" name="see" description="\http://framework.zend.com/issues/browse/ZF-1325" refers="\http://framework.zend.com/issues/browse/ZF-1325"/>
          <tag line="40" name="var" description="PHP Error Message" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="56" package="Default">
        <name>handleSessionStartError</name>
        <docblock>
          <description>handleSessionStartError() - interface for set_error_handler()</description>
          <long-description>
</long-description>
          <tag line="48" name="see" description="\http://framework.zend.com/issues/browse/ZF-1325" refers="\http://framework.zend.com/issues/browse/ZF-1325"/>
          <tag line="48" name="param" description="" type="int" variable="$errno">
            <type by_reference="false">int</type>
          </tag>
          <tag line="48" name="param" description="" type="string" variable="$errstr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$errno</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$errstr</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$errfile</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$errline</name>
          <default/>
          <type/>
        </argument>
        <argument line="56">
          <name>$errcontext</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="69" package="Default">
        <name>handleSilentWriteClose</name>
        <docblock>
          <description>handleSilentWriteClose() - interface for set_error_handler()</description>
          <long-description>
</long-description>
          <tag line="61" name="see" description="\http://framework.zend.com/issues/browse/ZF-1325" refers="\http://framework.zend.com/issues/browse/ZF-1325"/>
          <tag line="61" name="param" description="" type="int" variable="$errno">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="param" description="" type="string" variable="$errstr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$errno</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$errstr</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$errfile</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$errline</name>
          <default/>
          <type/>
        </argument>
        <argument line="69">
          <name>$errcontext</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Session/Namespace.php" hash="ad4e04b795f324ee541f3e20f14f92d0" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Namespace.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Session.php</name>
    </include>
    <include type="Require Once" line="33">
      <name>Zend/Session/Abstract.php</name>
    </include>
    <class final="false" abstract="false" line="44" namespace="default" package="Zend\Session">
      <name>Zend_Session_Namespace</name>
      <extends>\Zend_Session_Abstract</extends>
      <full_name>\Zend_Session_Namespace</full_name>
      <docblock>
        <description>Zend_Session_Namespace</description>
        <long-description>
</long-description>
        <tag line="36" name="category" description="Zend"/>
        <tag line="36" name="package" description="Zend_Session"/>
        <tag line="36" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="36" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\IteratorAggregate</implements>
      <constant namespace="default" line="50" package="Default">
        <name>SINGLE_INSTANCE</name>
        <value>true</value>
        <docblock>
          <description>used as option to constructor to prevent additional instances to the same namespace</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$_namespace</name>
        <default>"Default"</default>
        <docblock>
          <description>Namespace - which namespace this instance of zend-session is saving-to/getting-from</description>
          <long-description>
</long-description>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="64" package="Default">
        <name>$_namespaceLocks</name>
        <default>array()</default>
        <docblock>
          <description>Namespace locking mechanism</description>
          <long-description>
</long-description>
          <tag line="59" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="71" package="Default">
        <name>$_singleInstances</name>
        <default>array()</default>
        <docblock>
          <description>Single instance namespace array to ensure data security.</description>
          <long-description>
</long-description>
          <tag line="66" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="79" package="Default">
        <name>resetSingleInstance</name>
        <docblock>
          <description>resetSingleInstance()</description>
          <long-description>
</long-description>
          <tag line="73" name="param" description="" type="string" variable="$namespaceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$namespaceName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="102" package="Default">
        <name>__construct</name>
        <docblock>
          <description>__construct() - Returns an instance object bound to a particular, isolated section
of the session, identified by $namespace name (defaulting to 'Default').</description>
          <long-description>&lt;p&gt;The optional argument $singleInstance will prevent construction of additional
instance objects acting as accessors to this $namespace.&lt;/p&gt;
</long-description>
          <tag line="92" name="param" description="- programmatic name of the requested namespace" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="param" description="- prevent creation of additional accessor instance objects for this namespace" type="bool" variable="$singleInstance">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$namespace</name>
          <default>'Default'</default>
          <type/>
        </argument>
        <argument line="102">
          <name>$singleInstance</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="210" package="Default">
        <name>getIterator</name>
        <docblock>
          <description>getIterator() - return an iteratable object for use in foreach and the like,
this completes the IteratorAggregate interface</description>
          <long-description>
</long-description>
          <tag line="204" name="return" description="- iteratable container of the namespace contents" type="\ArrayObject">
            <type by_reference="false">\ArrayObject</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="221" package="Default">
        <name>lock</name>
        <docblock>
          <description>lock() - mark a session/namespace as readonly</description>
          <long-description>
</long-description>
          <tag line="216" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>unlock</name>
        <docblock>
          <description>unlock() - unmark a session/namespace to enable read &amp; write</description>
          <long-description>
</long-description>
          <tag line="227" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="243" package="Default">
        <name>unlockAll</name>
        <docblock>
          <description>unlockAll() - unmark all session/namespaces to enable read &amp; write</description>
          <long-description>
</long-description>
          <tag line="238" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="254" package="Default">
        <name>isLocked</name>
        <docblock>
          <description>isLocked() - return lock status, true if, and only if, read-only</description>
          <long-description>
</long-description>
          <tag line="249" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="265" package="Default">
        <name>unsetAll</name>
        <docblock>
          <description>unsetAll() - unset all variables in this namespace</description>
          <long-description>
</long-description>
          <tag line="260" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="277" package="Default">
        <name>__get</name>
        <docblock>
          <description>__get() - method to get a variable in this object's current namespace</description>
          <long-description>
</long-description>
          <tag line="271" name="param" description="- programmatic name of a key, in a &lt;key,value&gt; pair in the current namespace" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="271" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="299" package="Default">
        <name>__set</name>
        <docblock>
          <description>__set() - method to set a variable/value in this object's namespace</description>
          <long-description>
</long-description>
          <tag line="291" name="param" description="- programmatic name of a key, in a &lt;key,value&gt; pair in the current namespace" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="- value in the &lt;key,value&gt; pair to assign to the $name key" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="291" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="291" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="299">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="299">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="342" package="Default">
        <name>apply</name>
        <docblock>
          <description>apply() - enables applying user-selected function, such as array_merge() to the namespace
Parameters following the $callback argument are passed to the callback function.</description>
          <long-description>&lt;p&gt;Caveat: ignores members expiring now.&lt;/p&gt;

&lt;p&gt;Example:
  $namespace-&gt;apply('array_merge', array('tree' =&gt; 'apple', 'fruit' =&gt; 'peach'), array('flower' =&gt; 'rose'));
  $namespace-&gt;apply('count');&lt;/p&gt;
</long-description>
          <tag line="331" name="param" description="- callback function" type="string|array" variable="$callback">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="342">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="361" package="Default">
        <name>applySet</name>
        <docblock>
          <description>applySet() - enables applying user-selected function, and sets entire namespace to the result
Result of $callback must be an array.</description>
          <long-description>&lt;p&gt;Parameters following the $callback argument are passed to the callback function.
Caveat: ignores members expiring now.&lt;/p&gt;

&lt;p&gt;Example:
  $namespace-&gt;applySet('array_merge', array('tree' =&gt; 'apple', 'fruit' =&gt; 'peach'), array('flower' =&gt; 'rose'));&lt;/p&gt;
</long-description>
          <tag line="350" name="param" description="- callback function" type="string|array" variable="$callback">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="361">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="384" package="Default">
        <name>__isset</name>
        <docblock>
          <description>__isset() - determine if a variable in this object's namespace is set</description>
          <long-description>
</long-description>
          <tag line="378" name="param" description="- programmatic name of a key, in a &lt;key,value&gt; pair in the current namespace" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="378" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="384">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="404" package="Default">
        <name>__unset</name>
        <docblock>
          <description>__unset() - unset a variable in this object's namespace.</description>
          <long-description>
</long-description>
          <tag line="398" name="param" description="- programmatic name of a key, in a &lt;key,value&gt; pair in the current namespace" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="398" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="404">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="427" package="Default">
        <name>setExpirationSeconds</name>
        <docblock>
          <description>setExpirationSeconds() - expire the namespace, or specific variables after a specified
number of seconds</description>
          <long-description>
</long-description>
          <tag line="418" name="param" description="- expires in this many seconds" type="int" variable="$seconds">
            <type by_reference="false">int</type>
          </tag>
          <tag line="418" name="param" description="- OPTIONAL list of variables to expire (defaults to all)" type="mixed" variable="$variables">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="418" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="418" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="427">
          <name>$seconds</name>
          <default/>
          <type/>
        </argument>
        <argument line="427">
          <name>$variables</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="475" package="Default">
        <name>setExpirationHops</name>
        <docblock>
          <description>setExpirationHops() - expire the namespace, or specific variables after a specified
number of page hops</description>
          <long-description>
</long-description>
          <tag line="465" name="param" description="- how many &quot;hops&quot; (number of subsequent requests) before expiring" type="int" variable="$hops">
            <type by_reference="false">int</type>
          </tag>
          <tag line="465" name="param" description="- OPTIONAL list of variables to expire (defaults to all)" type="mixed" variable="$variables">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="465" name="param" description="- OPTIONAL if set, only count a hop/request if this namespace is used" type="boolean" variable="$hopCountOnUsageOnly">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="465" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="465" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="475">
          <name>$hops</name>
          <default/>
          <type/>
        </argument>
        <argument line="475">
          <name>$variables</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="475">
          <name>$hopCountOnUsageOnly</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="525" package="Default">
        <name>getNamespace</name>
        <docblock>
          <description>Returns the namespace name</description>
          <long-description>
</long-description>
          <tag line="520" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Session/SaveHandler/Exception.php" hash="cad20626dbdafd80239abf4fd743fe4d" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="3" name="category" description="Zend"/>
      <tag line="3" name="package" description="Zend_Session"/>
      <tag line="3" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="3" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="3" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Session/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="36" namespace="default" package="Zend\Session">
      <name>Zend_Session_SaveHandler_Exception</name>
      <extends>\Zend_Session_Exception</extends>
      <full_name>\Zend_Session_SaveHandler_Exception</full_name>
      <docblock>
        <description>Zend_Session_SaveHandler_Exception</description>
        <long-description>
</long-description>
        <tag line="28" name="category" description="Zend"/>
        <tag line="28" name="package" description="Zend_Session"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Session/SaveHandler/DbTable.php" hash="181a9d92a919a3a4f844593e6662e138" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-webat this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="3" name="category" description="Zend"/>
      <tag line="3" name="package" description="Zend_Session"/>
      <tag line="3" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="3" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="3" name="version" description="$Id: DbTable.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <error line="56">No DocBlock was found for Constant PRIMARY_ASSIGNMENT</error>
      <error line="57">No DocBlock was found for Constant PRIMARY_ASSIGNMENT_SESSION_SAVE_PATH</error>
      <error line="58">No DocBlock was found for Constant PRIMARY_ASSIGNMENT_SESSION_NAME</error>
      <error line="59">No DocBlock was found for Constant PRIMARY_ASSIGNMENT_SESSION_ID</error>
      <error line="61">No DocBlock was found for Constant MODIFIED_COLUMN</error>
      <error line="62">No DocBlock was found for Constant LIFETIME_COLUMN</error>
      <error line="63">No DocBlock was found for Constant DATA_COLUMN</error>
      <error line="65">No DocBlock was found for Constant LIFETIME</error>
      <error line="66">No DocBlock was found for Constant OVERRIDE_LIFETIME</error>
      <error line="68">No DocBlock was found for Constant PRIMARY_TYPE_NUM</error>
      <error line="69">No DocBlock was found for Constant PRIMARY_TYPE_PRIMARYNUM</error>
      <error line="70">No DocBlock was found for Constant PRIMARY_TYPE_ASSOC</error>
      <error line="71">No DocBlock was found for Constant PRIMARY_TYPE_WHERECLAUSE</error>
    </parse_markers>
    <include type="Require Once" line="26">
      <name>Zend/Session.php</name>
    </include>
    <include type="Require Once" line="31">
      <name>Zend/Db/Table/Abstract.php</name>
    </include>
    <include type="Require Once" line="36">
      <name>Zend/Db/Table/Row/Abstract.php</name>
    </include>
    <include type="Require Once" line="41">
      <name>Zend/Config.php</name>
    </include>
    <class final="false" abstract="false" line="52" namespace="default" package="Zend\Session\SaveHandler">
      <name>Zend_Session_SaveHandler_DbTable</name>
      <extends>\Zend_Db_Table_Abstract</extends>
      <full_name>\Zend_Session_SaveHandler_DbTable</full_name>
      <docblock>
        <description>Zend_Session_SaveHandler_DbTable</description>
        <long-description>
</long-description>
        <tag line="43" name="category" description="Zend"/>
        <tag line="43" name="package" description="Zend_Session"/>
        <tag line="43" name="subpackage" description="SaveHandler"/>
        <tag line="43" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="43" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Session_SaveHandler_Interface</implements>
      <constant namespace="default" line="56" package="Default">
        <name>PRIMARY_ASSIGNMENT</name>
        <value>'primaryAssignment'</value>
      </constant>
      <constant namespace="default" line="57" package="Default">
        <name>PRIMARY_ASSIGNMENT_SESSION_SAVE_PATH</name>
        <value>'sessionSavePath'</value>
      </constant>
      <constant namespace="default" line="58" package="Default">
        <name>PRIMARY_ASSIGNMENT_SESSION_NAME</name>
        <value>'sessionName'</value>
      </constant>
      <constant namespace="default" line="59" package="Default">
        <name>PRIMARY_ASSIGNMENT_SESSION_ID</name>
        <value>'sessionId'</value>
      </constant>
      <constant namespace="default" line="61" package="Default">
        <name>MODIFIED_COLUMN</name>
        <value>'modifiedColumn'</value>
      </constant>
      <constant namespace="default" line="62" package="Default">
        <name>LIFETIME_COLUMN</name>
        <value>'lifetimeColumn'</value>
      </constant>
      <constant namespace="default" line="63" package="Default">
        <name>DATA_COLUMN</name>
        <value>'dataColumn'</value>
      </constant>
      <constant namespace="default" line="65" package="Default">
        <name>LIFETIME</name>
        <value>'lifetime'</value>
      </constant>
      <constant namespace="default" line="66" package="Default">
        <name>OVERRIDE_LIFETIME</name>
        <value>'overrideLifetime'</value>
      </constant>
      <constant namespace="default" line="68" package="Default">
        <name>PRIMARY_TYPE_NUM</name>
        <value>'PRIMARY_TYPE_NUM'</value>
      </constant>
      <constant namespace="default" line="69" package="Default">
        <name>PRIMARY_TYPE_PRIMARYNUM</name>
        <value>'PRIMARY_TYPE_PRIMARYNUM'</value>
      </constant>
      <constant namespace="default" line="70" package="Default">
        <name>PRIMARY_TYPE_ASSOC</name>
        <value>'PRIMARY_TYPE_ASSOC'</value>
      </constant>
      <constant namespace="default" line="71" package="Default">
        <name>PRIMARY_TYPE_WHERECLAUSE</name>
        <value>'PRIMARY_TYPE_WHERECLAUSE'</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="78" package="Default">
        <name>$_primaryAssignment</name>
        <default>null</default>
        <docblock>
          <description>Session table primary key value assignment</description>
          <long-description>
</long-description>
          <tag line="73" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="85" package="Default">
        <name>$_modifiedColumn</name>
        <default>null</default>
        <docblock>
          <description>Session table last modification time column</description>
          <long-description>
</long-description>
          <tag line="80" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="92" package="Default">
        <name>$_lifetimeColumn</name>
        <default>null</default>
        <docblock>
          <description>Session table lifetime column</description>
          <long-description>
</long-description>
          <tag line="87" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="99" package="Default">
        <name>$_dataColumn</name>
        <default>null</default>
        <docblock>
          <description>Session table data column</description>
          <long-description>
</long-description>
          <tag line="94" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="106" package="Default">
        <name>$_lifetime</name>
        <default>false</default>
        <docblock>
          <description>Session lifetime</description>
          <long-description>
</long-description>
          <tag line="101" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="113" package="Default">
        <name>$_overrideLifetime</name>
        <default>false</default>
        <docblock>
          <description>Whether or not the lifetime of an existing session should be overridden</description>
          <long-description>
</long-description>
          <tag line="108" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="120" package="Default">
        <name>$_sessionSavePath</name>
        <default/>
        <docblock>
          <description>Session save path</description>
          <long-description>
</long-description>
          <tag line="115" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="127" package="Default">
        <name>$_sessionName</name>
        <default/>
        <docblock>
          <description>Session name</description>
          <long-description>
</long-description>
          <tag line="122" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="163" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;$config is an instance of Zend_Config or an array of key/value pairs containing configuration options for
Zend_Session_SaveHandler_DbTable and Zend_Db_Table_Abstract. These are the configuration options for
Zend_Session_SaveHandler_DbTable:&lt;/p&gt;

&lt;p&gt;primaryAssignment =&gt; (string|array) Session table primary key value assignment
     (optional; default: 1 =&gt; sessionId) You have to assign a value to each primary key of your session table.
     The value of this configuration option is either a string if you have only one primary key or an array if
     you have multiple primary keys. The array consists of numeric keys starting at 1 and string values. There
     are some values which will be replaced by session information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sessionId       =&amp;gt; The id of the current session
 sessionName     =&amp;gt; The name of the current session
 sessionSavePath =&amp;gt; The save path of the current session

 NOTE: One of your assignments MUST contain 'sessionId' as value!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;modifiedColumn    =&gt; (string) Session table last modification time column&lt;/p&gt;

&lt;p&gt;lifetimeColumn    =&gt; (string) Session table lifetime column&lt;/p&gt;

&lt;p&gt;dataColumn        =&gt; (string) Session table data column&lt;/p&gt;

&lt;p&gt;lifetime          =&gt; (integer) Session lifetime (optional; default: ini_get('session.gc_maxlifetime'))&lt;/p&gt;

&lt;p&gt;overrideLifetime  =&gt; (boolean) Whether or not the lifetime of an existing session should be overridden
     (optional; default: false)&lt;/p&gt;
</long-description>
          <tag line="129" name="param" description="User-provided configuration" type="\Zend_Config|array" variable="$config">
            <type by_reference="false">\Zend_Config</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="129" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="129" name="throws" description="" type="\Zend_Session_SaveHandler_Exception">
            <type by_reference="false">\Zend_Session_SaveHandler_Exception</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$config</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215" package="Default">
        <name>__destruct</name>
        <docblock>
          <description>Destructor</description>
          <long-description>
</long-description>
          <tag line="210" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="229" package="Default">
        <name>setLifetime</name>
        <docblock>
          <description>Set session lifetime and optional whether or not the lifetime of an existing session should be overridden</description>
          <long-description>&lt;p&gt;$lifetime === false resets lifetime to session.gc_maxlifetime&lt;/p&gt;
</long-description>
          <tag line="220" name="param" description="" type="int" variable="$lifetime">
            <type by_reference="false">int</type>
          </tag>
          <tag line="220" name="param" description="(optional)" type="boolean" variable="$overrideLifetime">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="220" name="return" description="" type="\Zend_Session_SaveHandler_DbTable">
            <type by_reference="false">\Zend_Session_SaveHandler_DbTable</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$lifetime</name>
          <default/>
          <type/>
        </argument>
        <argument line="229">
          <name>$overrideLifetime</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="255" package="Default">
        <name>getLifetime</name>
        <docblock>
          <description>Retrieve session lifetime</description>
          <long-description>
</long-description>
          <tag line="250" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="266" package="Default">
        <name>setOverrideLifetime</name>
        <docblock>
          <description>Set whether or not the lifetime of an existing session should be overridden</description>
          <long-description>
</long-description>
          <tag line="260" name="param" description="" type="boolean" variable="$overrideLifetime">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="260" name="return" description="" type="\Zend_Session_SaveHandler_DbTable">
            <type by_reference="false">\Zend_Session_SaveHandler_DbTable</type>
          </tag>
        </docblock>
        <argument line="266">
          <name>$overrideLifetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="278" package="Default">
        <name>getOverrideLifetime</name>
        <docblock>
          <description>Retrieve whether or not the lifetime of an existing session should be overridden</description>
          <long-description>
</long-description>
          <tag line="273" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="290" package="Default">
        <name>open</name>
        <docblock>
          <description>Open Session</description>
          <long-description>
</long-description>
          <tag line="283" name="param" description="" type="string" variable="$save_path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="283" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="283" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$save_path</name>
          <default/>
          <type/>
        </argument>
        <argument line="290">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="303" package="Default">
        <name>close</name>
        <docblock>
          <description>Close session</description>
          <long-description>
</long-description>
          <tag line="298" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="314" package="Default">
        <name>read</name>
        <docblock>
          <description>Read session data</description>
          <long-description>
</long-description>
          <tag line="308" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="308" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="338" package="Default">
        <name>write</name>
        <docblock>
          <description>Write session data</description>
          <long-description>
</long-description>
          <tag line="331" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="331" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="331" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="338">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="338">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="370" package="Default">
        <name>destroy</name>
        <docblock>
          <description>Destroy session</description>
          <long-description>
</long-description>
          <tag line="364" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="364" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="370">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="387" package="Default">
        <name>gc</name>
        <docblock>
          <description>Garbage Collection</description>
          <long-description>
</long-description>
          <tag line="381" name="param" description="" type="int" variable="$maxlifetime">
            <type by_reference="false">int</type>
          </tag>
          <tag line="381" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="387">
          <name>$maxlifetime</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="401" package="Default">
        <name>_setup</name>
        <docblock>
          <description>Calls other protected methods for individual setup tasks and requirement checks</description>
          <long-description>
</long-description>
          <tag line="396" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="417" package="Default">
        <name>_setupTableName</name>
        <docblock>
          <description>Initialize table and schema names</description>
          <long-description>
</long-description>
          <tag line="411" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="411" name="throws" description="" type="\Zend_Session_SaveHandler_Exception">
            <type by_reference="false">\Zend_Session_SaveHandler_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="439" package="Default">
        <name>_setupPrimaryAssignment</name>
        <docblock>
          <description>Initialize session table primary key value assignment</description>
          <long-description>
</long-description>
          <tag line="433" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="433" name="throws" description="" type="\Zend_Session_SaveHandler_Exception">
            <type by_reference="false">\Zend_Session_SaveHandler_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="478" package="Default">
        <name>_checkRequiredColumns</name>
        <docblock>
          <description>Check for required session table columns</description>
          <long-description>
</long-description>
          <tag line="472" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="472" name="throws" description="" type="\Zend_Session_SaveHandler_Exception">
            <type by_reference="false">\Zend_Session_SaveHandler_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="517" package="Default">
        <name>_getPrimary</name>
        <docblock>
          <description>Retrieve session table primary key values</description>
          <long-description>
</long-description>
          <tag line="510" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="510" name="param" description="(optional; default: self::PRIMARY_TYPE_NUM)" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="510" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="517">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="517">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="570" package="Default">
        <name>_getLifetime</name>
        <docblock>
          <description>Retrieve session lifetime considering Zend_Session_SaveHandler_DbTable::OVERRIDE_LIFETIME</description>
          <long-description>
</long-description>
          <tag line="564" name="param" description="" type="\Zend_Db_Table_Row_Abstract" variable="$row">
            <type by_reference="false">\Zend_Db_Table_Row_Abstract</type>
          </tag>
          <tag line="564" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="570">
          <name>$row</name>
          <default/>
          <type>Zend_Db_Table_Row_Abstract</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="587" package="Default">
        <name>_getExpirationTime</name>
        <docblock>
          <description>Retrieve session expiration time</description>
          <long-description>
</long-description>
          <tag line="581" name="param" description="" type="\Zend_Db_Table_Row_Abstract" variable="$row">
            <type by_reference="false">\Zend_Db_Table_Row_Abstract</type>
          </tag>
          <tag line="581" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="587">
          <name>$row</name>
          <default/>
          <type>Zend_Db_Table_Row_Abstract</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Session/SaveHandler/Interface.php" hash="ab66fc52204494b8005c88effd016a5d" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Session"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="since" description="Preview Release 0.2"/>
    </docblock>
    <interface namespace="default" line="33" package="Zend\Session\SaveHandler">
      <name>Zend_Session_SaveHandler_Interface</name>
      <extends/>
      <full_name>\Zend_Session_SaveHandler_Interface</full_name>
      <docblock>
        <description>Zend_Session_SaveHandler_Interface</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Session"/>
        <tag line="23" name="subpackage" description="SaveHandler"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="23" name="see" description="\http://php.net/session_set_save_handler" refers="\http://php.net/session_set_save_handler"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="42" package="Default">
        <name>open</name>
        <docblock>
          <description>Open Session - retrieve resources</description>
          <long-description>
</long-description>
          <tag line="36" name="param" description="" type="string" variable="$save_path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$save_path</name>
          <default/>
          <type/>
        </argument>
        <argument line="42">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="48" package="Default">
        <name>close</name>
        <docblock>
          <description>Close Session - free resources</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="55" package="Default">
        <name>read</name>
        <docblock>
          <description>Read session data</description>
          <long-description>
</long-description>
          <tag line="50" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="63" package="Default">
        <name>write</name>
        <docblock>
          <description>Write Session - commit data to resource</description>
          <long-description>
</long-description>
          <tag line="57" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="71" package="Default">
        <name>destroy</name>
        <docblock>
          <description>Destroy Session - remove data from resource for
given session id</description>
          <long-description>
</long-description>
          <tag line="65" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="79" package="Default">
        <name>gc</name>
        <docblock>
          <description>Garbage Collection - remove old session data older
than $maxlifetime (in seconds)</description>
          <long-description>
</long-description>
          <tag line="73" name="param" description="" type="int" variable="$maxlifetime">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$maxlifetime</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Zend/Session/Abstract.php" hash="1c413ebba009593de9ef9c81472265d3" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="3" name="category" description="Zend"/>
      <tag line="3" name="package" description="Zend_Session"/>
      <tag line="3" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="3" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="3" name="version" description="$Id: Abstract.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="3" name="since" description="Preview Release 0.2"/>
    </docblock>
    <class final="false" abstract="true" line="33" namespace="default" package="Zend\Session">
      <name>Zend_Session_Abstract</name>
      <extends/>
      <full_name>\Zend_Session_Abstract</full_name>
      <docblock>
        <description>Zend_Session_Abstract</description>
        <long-description>
</long-description>
        <tag line="25" name="category" description="Zend"/>
        <tag line="25" name="package" description="Zend_Session"/>
        <tag line="25" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="25" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="62" package="Default">
        <name>_THROW_NOT_WRITABLE_MSG</name>
        <value>'Zend_Session is currently marked as read-only.'</value>
        <docblock>
          <description>Error message thrown when an action requires modification,
but current Zend_Session has been marked as read-only.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="69" package="Default">
        <name>_THROW_NOT_READABLE_MSG</name>
        <value>'Zend_Session is not marked as readable.'</value>
        <docblock>
          <description>Error message thrown when an action requires reading session data,
but current Zend_Session is not marked as readable.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="40" package="Default">
        <name>$_writable</name>
        <default>false</default>
        <docblock>
          <description>Whether or not session permits writing (modification of $_SESSION[])</description>
          <long-description>
</long-description>
          <tag line="35" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="47" package="Default">
        <name>$_readable</name>
        <default>false</default>
        <docblock>
          <description>Whether or not session permits reading (reading data in $_SESSION[])</description>
          <long-description>
</long-description>
          <tag line="42" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="55" package="Default">
        <name>$_expiringData</name>
        <default>array()</default>
        <docblock>
          <description>Since expiring data is handled at startup to avoid __destruct difficulties,
the data that will be expiring at end of this request is held here</description>
          <long-description>
</long-description>
          <tag line="49" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="protected" line="79" package="Default">
        <name>_namespaceIsset</name>
        <docblock>
          <description>namespaceIsset() - check to see if a namespace or a variable within a namespace is set</description>
          <long-description>
</long-description>
          <tag line="72" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
        <argument line="79">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="105" package="Default">
        <name>_namespaceUnset</name>
        <docblock>
          <description>namespaceUnset() - unset a namespace or a variable within a namespace</description>
          <long-description>
</long-description>
          <tag line="97" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="97" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
        <argument line="105">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="140" package="Default">
        <name>_namespaceGet</name>
        <docblock>
          <description>namespaceGet() - Get $name variable from $namespace, returning by reference.</description>
          <long-description>
</long-description>
          <tag line="133" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
        <argument line="140">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="177" package="Default">
        <name>_namespaceGetAll</name>
        <docblock>
          <description>namespaceGetAll() - Get an array containing $namespace, including expiring data.</description>
          <long-description>
</long-description>
          <tag line="170" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="170" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="170" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Loader.php" hash="5047821be990d6ddf90b80ed7c9822b9" package="Zend\Loader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Loader.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="30" namespace="default" package="Zend\Loader">
      <name>Zend_Loader</name>
      <extends/>
      <full_name>\Zend_Loader</full_name>
      <docblock>
        <description>Static methods for loading classes and files.</description>
        <long-description>
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Loader"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" line="52" package="Default">
        <name>loadClass</name>
        <docblock>
          <description>Loads a class from a PHP file.  The filename must be formatted
as "$class.php".</description>
          <long-description>&lt;p&gt;If $dirs is a string or an array, it will search the directories
in the order supplied, and attempt to load the first matching file.&lt;/p&gt;

&lt;p&gt;If $dirs is null, it will split the class name at underscores to
generate a path hierarchy (e.g., "Zend_Example_Class" will map
to "Zend/Example/Class.php").&lt;/p&gt;

&lt;p&gt;If the file was not found in the $dirs, or if no $dirs were specified,
it will attempt to load it from PHP's include_path.&lt;/p&gt;
</long-description>
          <tag line="32" name="param" description="- The full class name of a Zend component." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="- OPTIONAL Either a path or an array of paths to search." type="string|array" variable="$dirs">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="32" name="throws" description="" type="\Zend_Exception">
            <type by_reference="false">\Zend_Exception</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="52">
          <name>$dirs</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="114" package="Default">
        <name>loadFile</name>
        <docblock>
          <description>Loads a PHP file.  This is a wrapper for PHP's include() function.</description>
          <long-description>&lt;p&gt;$filename must be the complete filename, including any
extension such as ".php".  Note that a security check is performed that
does not permit extended characters in the filename.  This method is
intended for loading Zend Framework files.&lt;/p&gt;

&lt;p&gt;If $dirs is a string or an array, it will search the directories
in the order supplied, and attempt to load the first matching file.&lt;/p&gt;

&lt;p&gt;If the file was not found in the $dirs, or if no $dirs were specified,
it will attempt to load it from PHP's include_path.&lt;/p&gt;

&lt;p&gt;If $once is TRUE, it will use include_once() instead of include().&lt;/p&gt;
</long-description>
          <tag line="91" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="param" description="- OPTIONAL either a path or array of paths to search." type="string|array" variable="$dirs">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="91" name="param" description="" type="boolean" variable="$once">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="91" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="91" name="throws" description="" type="\Zend_Exception">
            <type by_reference="false">\Zend_Exception</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
        <argument line="114">
          <name>$dirs</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="114">
          <name>$once</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="162" package="Default">
        <name>isReadable</name>
        <docblock>
          <description>Returns TRUE if the $filename is readable, or FALSE otherwise.</description>
          <long-description>&lt;p&gt;This function uses the PHP include_path, where PHP's is_readable()
does not.&lt;/p&gt;

&lt;p&gt;Note from ZF-2900:
If you use custom error handler, please check whether return value
 from error_reporting() is zero or not.
At mark of fopen() can not suppress warning if the handler is used.&lt;/p&gt;
</long-description>
          <tag line="149" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="149" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="202" package="Default">
        <name>explodeIncludePath</name>
        <docblock>
          <description>Explode an include path into an array</description>
          <long-description>&lt;p&gt;If no path provided, uses current include_path. Works around issues that
occur when the path includes stream schemas.&lt;/p&gt;
</long-description>
          <tag line="193" name="param" description="" type="string|null" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="193" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$path</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="231" package="Default">
        <name>autoload</name>
        <docblock>
          <description>spl_autoload() suitable implementation for supporting class autoloading.</description>
          <long-description>&lt;p&gt;Attach to spl_autoload() using the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spl_autoload_register(array('Zend_Loader', 'autoload'));
&lt;/code&gt;&lt;/pre&gt;
</long-description>
          <tag line="219" name="deprecated" description="Since 1.8.0"/>
          <tag line="219" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="219" name="return" description="Class name on success; false on failure" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="252" package="Default">
        <name>registerAutoload</name>
        <docblock>
          <description>Register {@link autoload()} with spl_autoload()</description>
          <long-description>
</long-description>
          <tag line="242" name="deprecated" description="Since 1.8.0"/>
          <tag line="242" name="param" description="(optional)" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="242" name="param" description="(optional)" type="boolean" variable="$enabled">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="242" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="242" name="throws" description="if spl_autoload() is not found or if the specified class does not have an autoload() method." type="\Zend_Exception">
            <type by_reference="false">\Zend_Exception</type>
          </tag>
        </docblock>
        <argument line="252">
          <name>$class</name>
          <default>'Zend_Loader'</default>
          <type/>
        </argument>
        <argument line="252">
          <name>$enabled</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="284" package="Default">
        <name>_securityCheck</name>
        <docblock>
          <description>Ensure that filename does not contain exploits</description>
          <long-description>
</long-description>
          <tag line="277" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="277" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="277" name="throws" description="" type="\Zend_Exception">
            <type by_reference="false">\Zend_Exception</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="309" package="Default">
        <name>_includeFile</name>
        <docblock>
          <description>Attempt to include() the file.</description>
          <long-description>&lt;p&gt;include() is not prefixed with the @ operator because if
the file is loaded and contains a parse error, execution
will halt silently and this is difficult to debug.&lt;/p&gt;

&lt;p&gt;Always set display_errors = Off on production servers!&lt;/p&gt;
</long-description>
          <tag line="295" name="param" description="" type="string" variable="$filespec">
            <type by_reference="false">string</type>
          </tag>
          <tag line="295" name="param" description="" type="boolean" variable="$once">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="295" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="295" name="deprecated" description="Since 1.5.0; use loadFile() instead"/>
        </docblock>
        <argument line="309">
          <name>$filespec</name>
          <default/>
          <type/>
        </argument>
        <argument line="309">
          <name>$once</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="330" package="Default">
        <name>standardiseFile</name>
        <docblock>
          <description>Standardise the filename.</description>
          <long-description>&lt;p&gt;Convert the supplied filename into the namespace-aware standard,
based on the Framework Interop Group reference implementation:
http://groups.google.com/group/php-standards/web/psr-0-final-proposal&lt;/p&gt;

&lt;p&gt;The filename must be formatted as "$file.php".&lt;/p&gt;
</long-description>
          <tag line="318" name="param" description="- The file name to be loaded." type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="318" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="330">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Date.php" hash="79821db82d8eb0b10b7f6b6fbb67a9d9" package="Zend\Date">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Date"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Date.php 24880 2012-06-12 20:35:18Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="30">No short description for class Zend_Date</critical>
      <error line="38">No DocBlock was found for Property $_locale</error>
      <error line="41">No DocBlock was found for Property $_fractional</error>
      <error line="42">No DocBlock was found for Property $_precision</error>
      <error line="44">No DocBlock was found for Property $_options</error>
      <error line="53">No DocBlock was found for Constant DAY</error>
      <error line="54">No DocBlock was found for Constant DAY_SHORT</error>
      <error line="55">No DocBlock was found for Constant DAY_SUFFIX</error>
      <error line="56">No DocBlock was found for Constant DAY_OF_YEAR</error>
      <error line="57">No DocBlock was found for Constant WEEKDAY</error>
      <error line="58">No DocBlock was found for Constant WEEKDAY_SHORT</error>
      <error line="59">No DocBlock was found for Constant WEEKDAY_NARROW</error>
      <error line="60">No DocBlock was found for Constant WEEKDAY_NAME</error>
      <error line="61">No DocBlock was found for Constant WEEKDAY_8601</error>
      <error line="62">No DocBlock was found for Constant WEEKDAY_DIGIT</error>
      <error line="63">No DocBlock was found for Constant WEEK</error>
      <error line="64">No DocBlock was found for Constant MONTH</error>
      <error line="65">No DocBlock was found for Constant MONTH_SHORT</error>
      <error line="66">No DocBlock was found for Constant MONTH_DAYS</error>
      <error line="67">No DocBlock was found for Constant MONTH_NAME</error>
      <error line="68">No DocBlock was found for Constant MONTH_NAME_SHORT</error>
      <error line="69">No DocBlock was found for Constant MONTH_NAME_NARROW</error>
      <error line="70">No DocBlock was found for Constant YEAR</error>
      <error line="71">No DocBlock was found for Constant YEAR_SHORT</error>
      <error line="72">No DocBlock was found for Constant YEAR_8601</error>
      <error line="73">No DocBlock was found for Constant YEAR_SHORT_8601</error>
      <error line="74">No DocBlock was found for Constant LEAPYEAR</error>
      <error line="75">No DocBlock was found for Constant MERIDIEM</error>
      <error line="76">No DocBlock was found for Constant SWATCH</error>
      <error line="77">No DocBlock was found for Constant HOUR</error>
      <error line="78">No DocBlock was found for Constant HOUR_SHORT</error>
      <error line="79">No DocBlock was found for Constant HOUR_AM</error>
      <error line="80">No DocBlock was found for Constant HOUR_SHORT_AM</error>
      <error line="81">No DocBlock was found for Constant MINUTE</error>
      <error line="82">No DocBlock was found for Constant MINUTE_SHORT</error>
      <error line="83">No DocBlock was found for Constant SECOND</error>
      <error line="84">No DocBlock was found for Constant SECOND_SHORT</error>
      <error line="85">No DocBlock was found for Constant MILLISECOND</error>
      <error line="86">No DocBlock was found for Constant TIMEZONE_NAME</error>
      <error line="87">No DocBlock was found for Constant DAYLIGHT</error>
      <error line="88">No DocBlock was found for Constant GMT_DIFF</error>
      <error line="89">No DocBlock was found for Constant GMT_DIFF_SEP</error>
      <error line="90">No DocBlock was found for Constant TIMEZONE</error>
      <error line="91">No DocBlock was found for Constant TIMEZONE_SECS</error>
      <error line="92">No DocBlock was found for Constant ISO_8601</error>
      <error line="93">No DocBlock was found for Constant RFC_2822</error>
      <error line="94">No DocBlock was found for Constant TIMESTAMP</error>
      <error line="95">No DocBlock was found for Constant ERA</error>
      <error line="96">No DocBlock was found for Constant ERA_NAME</error>
      <error line="97">No DocBlock was found for Constant ERA_NARROW</error>
      <error line="98">No DocBlock was found for Constant DATES</error>
      <error line="99">No DocBlock was found for Constant DATE_FULL</error>
      <error line="100">No DocBlock was found for Constant DATE_LONG</error>
      <error line="101">No DocBlock was found for Constant DATE_MEDIUM</error>
      <error line="102">No DocBlock was found for Constant DATE_SHORT</error>
      <error line="103">No DocBlock was found for Constant TIMES</error>
      <error line="104">No DocBlock was found for Constant TIME_FULL</error>
      <error line="105">No DocBlock was found for Constant TIME_LONG</error>
      <error line="106">No DocBlock was found for Constant TIME_MEDIUM</error>
      <error line="107">No DocBlock was found for Constant TIME_SHORT</error>
      <error line="108">No DocBlock was found for Constant DATETIME</error>
      <error line="109">No DocBlock was found for Constant DATETIME_FULL</error>
      <error line="110">No DocBlock was found for Constant DATETIME_LONG</error>
      <error line="111">No DocBlock was found for Constant DATETIME_MEDIUM</error>
      <error line="112">No DocBlock was found for Constant DATETIME_SHORT</error>
      <error line="113">No DocBlock was found for Constant ATOM</error>
      <error line="114">No DocBlock was found for Constant COOKIE</error>
      <error line="115">No DocBlock was found for Constant RFC_822</error>
      <error line="116">No DocBlock was found for Constant RFC_850</error>
      <error line="117">No DocBlock was found for Constant RFC_1036</error>
      <error line="118">No DocBlock was found for Constant RFC_1123</error>
      <error line="119">No DocBlock was found for Constant RFC_3339</error>
      <error line="120">No DocBlock was found for Constant RSS</error>
      <error line="121">No DocBlock was found for Constant W3C</error>
      <notice line="3466">Name of argument $type does not match with function Docblock</notice>
      <notice line="3505">Name of argument $type does not match with function Docblock</notice>
      <notice line="3505">Argument $parameter is missing from the function Docblock</notice>
      <notice line="3505">Argument $locale is missing from the function Docblock</notice>
      <notice line="3564">Name of argument $year does not match with function Docblock</notice>
      <notice line="3583">Name of argument $year does not match with function Docblock</notice>
      <notice line="3602">Name of argument $year does not match with function Docblock</notice>
      <notice line="3870">Name of argument $day does not match with function Docblock</notice>
      <notice line="3888">Name of argument $day does not match with function Docblock</notice>
      <notice line="3906">Name of argument $day does not match with function Docblock</notice>
      <notice line="4018">Name of argument $weekday does not match with function Docblock</notice>
      <notice line="4038">Name of argument $weekday does not match with function Docblock</notice>
      <notice line="4058">Name of argument $weekday does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="25">
      <name>Zend/Date/DateObject.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Locale.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Locale/Format.php</name>
    </include>
    <include type="Require Once" line="28">
      <name>Zend/Locale/Math.php</name>
    </include>
    <class final="false" abstract="false" line="36" namespace="default" package="Zend\Date">
      <name>Zend_Date</name>
      <extends>\Zend_Date_DateObject</extends>
      <full_name>\Zend_Date</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Date"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="53" package="Default">
        <name>DAY</name>
        <value>'dd'</value>
      </constant>
      <constant namespace="default" line="54" package="Default">
        <name>DAY_SHORT</name>
        <value>'d'</value>
      </constant>
      <constant namespace="default" line="55" package="Default">
        <name>DAY_SUFFIX</name>
        <value>'SS'</value>
      </constant>
      <constant namespace="default" line="56" package="Default">
        <name>DAY_OF_YEAR</name>
        <value>'D'</value>
      </constant>
      <constant namespace="default" line="57" package="Default">
        <name>WEEKDAY</name>
        <value>'EEEE'</value>
      </constant>
      <constant namespace="default" line="58" package="Default">
        <name>WEEKDAY_SHORT</name>
        <value>'EEE'</value>
      </constant>
      <constant namespace="default" line="59" package="Default">
        <name>WEEKDAY_NARROW</name>
        <value>'E'</value>
      </constant>
      <constant namespace="default" line="60" package="Default">
        <name>WEEKDAY_NAME</name>
        <value>'EE'</value>
      </constant>
      <constant namespace="default" line="61" package="Default">
        <name>WEEKDAY_8601</name>
        <value>'eee'</value>
      </constant>
      <constant namespace="default" line="62" package="Default">
        <name>WEEKDAY_DIGIT</name>
        <value>'e'</value>
      </constant>
      <constant namespace="default" line="63" package="Default">
        <name>WEEK</name>
        <value>'ww'</value>
      </constant>
      <constant namespace="default" line="64" package="Default">
        <name>MONTH</name>
        <value>'MM'</value>
      </constant>
      <constant namespace="default" line="65" package="Default">
        <name>MONTH_SHORT</name>
        <value>'M'</value>
      </constant>
      <constant namespace="default" line="66" package="Default">
        <name>MONTH_DAYS</name>
        <value>'ddd'</value>
      </constant>
      <constant namespace="default" line="67" package="Default">
        <name>MONTH_NAME</name>
        <value>'MMMM'</value>
      </constant>
      <constant namespace="default" line="68" package="Default">
        <name>MONTH_NAME_SHORT</name>
        <value>'MMM'</value>
      </constant>
      <constant namespace="default" line="69" package="Default">
        <name>MONTH_NAME_NARROW</name>
        <value>'MMMMM'</value>
      </constant>
      <constant namespace="default" line="70" package="Default">
        <name>YEAR</name>
        <value>'y'</value>
      </constant>
      <constant namespace="default" line="71" package="Default">
        <name>YEAR_SHORT</name>
        <value>'yy'</value>
      </constant>
      <constant namespace="default" line="72" package="Default">
        <name>YEAR_8601</name>
        <value>'Y'</value>
      </constant>
      <constant namespace="default" line="73" package="Default">
        <name>YEAR_SHORT_8601</name>
        <value>'YY'</value>
      </constant>
      <constant namespace="default" line="74" package="Default">
        <name>LEAPYEAR</name>
        <value>'l'</value>
      </constant>
      <constant namespace="default" line="75" package="Default">
        <name>MERIDIEM</name>
        <value>'a'</value>
      </constant>
      <constant namespace="default" line="76" package="Default">
        <name>SWATCH</name>
        <value>'B'</value>
      </constant>
      <constant namespace="default" line="77" package="Default">
        <name>HOUR</name>
        <value>'HH'</value>
      </constant>
      <constant namespace="default" line="78" package="Default">
        <name>HOUR_SHORT</name>
        <value>'H'</value>
      </constant>
      <constant namespace="default" line="79" package="Default">
        <name>HOUR_AM</name>
        <value>'hh'</value>
      </constant>
      <constant namespace="default" line="80" package="Default">
        <name>HOUR_SHORT_AM</name>
        <value>'h'</value>
      </constant>
      <constant namespace="default" line="81" package="Default">
        <name>MINUTE</name>
        <value>'mm'</value>
      </constant>
      <constant namespace="default" line="82" package="Default">
        <name>MINUTE_SHORT</name>
        <value>'m'</value>
      </constant>
      <constant namespace="default" line="83" package="Default">
        <name>SECOND</name>
        <value>'ss'</value>
      </constant>
      <constant namespace="default" line="84" package="Default">
        <name>SECOND_SHORT</name>
        <value>'s'</value>
      </constant>
      <constant namespace="default" line="85" package="Default">
        <name>MILLISECOND</name>
        <value>'S'</value>
      </constant>
      <constant namespace="default" line="86" package="Default">
        <name>TIMEZONE_NAME</name>
        <value>'zzzz'</value>
      </constant>
      <constant namespace="default" line="87" package="Default">
        <name>DAYLIGHT</name>
        <value>'I'</value>
      </constant>
      <constant namespace="default" line="88" package="Default">
        <name>GMT_DIFF</name>
        <value>'Z'</value>
      </constant>
      <constant namespace="default" line="89" package="Default">
        <name>GMT_DIFF_SEP</name>
        <value>'ZZZZ'</value>
      </constant>
      <constant namespace="default" line="90" package="Default">
        <name>TIMEZONE</name>
        <value>'z'</value>
      </constant>
      <constant namespace="default" line="91" package="Default">
        <name>TIMEZONE_SECS</name>
        <value>'X'</value>
      </constant>
      <constant namespace="default" line="92" package="Default">
        <name>ISO_8601</name>
        <value>'c'</value>
      </constant>
      <constant namespace="default" line="93" package="Default">
        <name>RFC_2822</name>
        <value>'r'</value>
      </constant>
      <constant namespace="default" line="94" package="Default">
        <name>TIMESTAMP</name>
        <value>'U'</value>
      </constant>
      <constant namespace="default" line="95" package="Default">
        <name>ERA</name>
        <value>'G'</value>
      </constant>
      <constant namespace="default" line="96" package="Default">
        <name>ERA_NAME</name>
        <value>'GGGG'</value>
      </constant>
      <constant namespace="default" line="97" package="Default">
        <name>ERA_NARROW</name>
        <value>'GGGGG'</value>
      </constant>
      <constant namespace="default" line="98" package="Default">
        <name>DATES</name>
        <value>'F'</value>
      </constant>
      <constant namespace="default" line="99" package="Default">
        <name>DATE_FULL</name>
        <value>'FFFFF'</value>
      </constant>
      <constant namespace="default" line="100" package="Default">
        <name>DATE_LONG</name>
        <value>'FFFF'</value>
      </constant>
      <constant namespace="default" line="101" package="Default">
        <name>DATE_MEDIUM</name>
        <value>'FFF'</value>
      </constant>
      <constant namespace="default" line="102" package="Default">
        <name>DATE_SHORT</name>
        <value>'FF'</value>
      </constant>
      <constant namespace="default" line="103" package="Default">
        <name>TIMES</name>
        <value>'WW'</value>
      </constant>
      <constant namespace="default" line="104" package="Default">
        <name>TIME_FULL</name>
        <value>'TTTTT'</value>
      </constant>
      <constant namespace="default" line="105" package="Default">
        <name>TIME_LONG</name>
        <value>'TTTT'</value>
      </constant>
      <constant namespace="default" line="106" package="Default">
        <name>TIME_MEDIUM</name>
        <value>'TTT'</value>
      </constant>
      <constant namespace="default" line="107" package="Default">
        <name>TIME_SHORT</name>
        <value>'TT'</value>
      </constant>
      <constant namespace="default" line="108" package="Default">
        <name>DATETIME</name>
        <value>'K'</value>
      </constant>
      <constant namespace="default" line="109" package="Default">
        <name>DATETIME_FULL</name>
        <value>'KKKKK'</value>
      </constant>
      <constant namespace="default" line="110" package="Default">
        <name>DATETIME_LONG</name>
        <value>'KKKK'</value>
      </constant>
      <constant namespace="default" line="111" package="Default">
        <name>DATETIME_MEDIUM</name>
        <value>'KKK'</value>
      </constant>
      <constant namespace="default" line="112" package="Default">
        <name>DATETIME_SHORT</name>
        <value>'KK'</value>
      </constant>
      <constant namespace="default" line="113" package="Default">
        <name>ATOM</name>
        <value>'OOO'</value>
      </constant>
      <constant namespace="default" line="114" package="Default">
        <name>COOKIE</name>
        <value>'CCC'</value>
      </constant>
      <constant namespace="default" line="115" package="Default">
        <name>RFC_822</name>
        <value>'R'</value>
      </constant>
      <constant namespace="default" line="116" package="Default">
        <name>RFC_850</name>
        <value>'RR'</value>
      </constant>
      <constant namespace="default" line="117" package="Default">
        <name>RFC_1036</name>
        <value>'RRR'</value>
      </constant>
      <constant namespace="default" line="118" package="Default">
        <name>RFC_1123</name>
        <value>'RRRR'</value>
      </constant>
      <constant namespace="default" line="119" package="Default">
        <name>RFC_3339</name>
        <value>'RRRRR'</value>
      </constant>
      <constant namespace="default" line="120" package="Default">
        <name>RSS</name>
        <value>'SSS'</value>
      </constant>
      <constant namespace="default" line="121" package="Default">
        <name>W3C</name>
        <value>'WWW'</value>
      </constant>
      <property final="false" static="false" visibility="private" line="38" package="Default">
        <name>$_locale</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="private" line="41" package="Default">
        <name>$_fractional</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="42" package="Default">
        <name>$_precision</name>
        <default>3</default>
      </property>
      <property final="false" static="true" visibility="private" line="44" package="Default">
        <name>$_options</name>
        <default>array(
        'format_type'  =&gt; 'iso'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="137" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Generates the standard date object, could be a unix timestamp, localized date,
string, integer, array and so on. Also parts of dates or time are supported
Always set the default timezone: http://php.net/date_default_timezone_set
For example, in your bootstrap: date_default_timezone_set('America/Los_Angeles');
For detailed instructions please look in the docu.</description>
          <long-description>
</long-description>
          <tag line="123" name="param" description="OPTIONAL Date value or value of date part to set ,depending on $part. If null the actual time is set" type="string|integer|\Zend_Date|array" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="123" name="param" description="OPTIONAL Defines the input format of $date" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="123" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="123" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="123" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$date</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="137">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="137">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="238" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Sets class wide options, if no option was given, the actual set options will be returned</description>
          <long-description>
</long-description>
          <tag line="231" name="param" description="Options to set" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="231" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
          <tag line="231" name="return" description="array if no option was given" type="\Options">
            <type by_reference="false">\Options</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="312" package="Default">
        <name>getTimestamp</name>
        <docblock>
          <description>Returns this object's internal UNIX timestamp (equivalent to Zend_Date::TIMESTAMP).</description>
          <long-description>&lt;p&gt;If the timestamp is too large for integers, then the return value will be a string.
This function does not return the timestamp as an object.
Use clone() or copyPart() instead.&lt;/p&gt;
</long-description>
          <tag line="304" name="return" description="UNIX timestamp" type="integer|string">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="326" package="Default">
        <name>_timestamp</name>
        <docblock>
          <description>Returns the calculated timestamp
HINT: timestamps are always GMT</description>
          <long-description>
</long-description>
          <tag line="317" name="param" description="Type of calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="317" name="param" description="Timestamp to calculate, when null the actual timestamp is calculated" type="string|integer|array|\Zend_Date" variable="$stamp">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="317" name="return" description="" type="\Zend_Date|integer">
            <type by_reference="false">\Zend_Date</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="317" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="326">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="326">
          <name>$stamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="360" package="Default">
        <name>setTimestamp</name>
        <docblock>
          <description>Sets a new timestamp</description>
          <long-description>
</long-description>
          <tag line="353" name="param" description="Timestamp to set" type="integer|string|array|\Zend_Date" variable="$timestamp">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="353" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="353" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="360">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="372" package="Default">
        <name>addTimestamp</name>
        <docblock>
          <description>Adds a timestamp</description>
          <long-description>
</long-description>
          <tag line="365" name="param" description="Timestamp to add" type="integer|string|array|\Zend_Date" variable="$timestamp">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="365" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="365" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="384" package="Default">
        <name>subTimestamp</name>
        <docblock>
          <description>Subtracts a timestamp</description>
          <long-description>
</long-description>
          <tag line="377" name="param" description="Timestamp to sub" type="integer|string|array|\Zend_Date" variable="$timestamp">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="377" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="377" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="384">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="396" package="Default">
        <name>compareTimestamp</name>
        <docblock>
          <description>Compares two timestamps, returning the difference as integer</description>
          <long-description>
</long-description>
          <tag line="389" name="param" description="Timestamp to compare" type="integer|string|array|\Zend_Date" variable="$timestamp">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="389" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="389" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="396">
          <name>$timestamp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="423" package="Default">
        <name>toString</name>
        <docblock>
          <description>Returns a string representation of the object
Supported format tokens are:
G - era, y - year, Y - ISO year, M - month, w - week of year, D - day of year, d - day of month
E - day of week, e - number of weekday (1-7), h - hour 1-12, H - hour 0-23, m - minute, s - second
A - milliseconds of day, z - timezone, Z - timezone offset, S - fractional second, a - period of day</description>
          <long-description>&lt;p&gt;Additionally format tokens but non ISO conform are:
SS - day suffix, eee - php number of weekday(0-6), ddd - number of days per month
l - Leap year, B - swatch internet time, I - daylight saving time, X - timezone offset in seconds
r - RFC2822 format, U - unix timestamp&lt;/p&gt;

&lt;p&gt;Not supported ISO tokens are
u - extended year, Q - quarter, q - quarter, L - stand alone month, W - week of month
F - day of week of month, g - modified julian, c - stand alone weekday, k - hour 0-11, K - hour 1-24
v - wall zone&lt;/p&gt;
</long-description>
          <tag line="401" name="param" description="OPTIONAL Rule for formatting output. If null the default date format is used" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="401" name="param" description="OPTIONAL Type for the format string which overrides the standard setting" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="401" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="401" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="423">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="423">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="423">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="474" package="Default">
        <name>__toString</name>
        <docblock>
          <description>Returns a string representation of the date which is equal with the timestamp</description>
          <long-description>
</long-description>
          <tag line="469" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="486" package="Default">
        <name>toValue</name>
        <docblock>
          <description>Returns a integer representation of the object
But returns false when the given part is no value f.e. Month-Name</description>
          <long-description>
</long-description>
          <tag line="479" name="param" description="OPTIONAL Defines the date or datepart to return as integer" type="string|integer|\Zend_Date" variable="$part">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="479" name="return" description="" type="integer|false">
            <type by_reference="false">integer</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="486">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="501" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Returns an array representation of the object</description>
          <long-description>
</long-description>
          <tag line="496" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="527" package="Default">
        <name>get</name>
        <docblock>
          <description>Returns a representation of a date or datepart
This could be for example a localized monthname, the time without date,
the era or only the fractional seconds. There are about 50 different supported date parts.</description>
          <long-description>&lt;p&gt;For a complete list of supported datepart values look into the docu&lt;/p&gt;
</long-description>
          <tag line="517" name="param" description="OPTIONAL Part of the date to return, if null the timestamp is returned" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="517" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="517" name="return" description="date or datepart" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="527">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="527">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="556" package="Default">
        <name>_toToken</name>
        <docblock>
          <description>Internal method to apply tokens</description>
          <long-description>
</long-description>
          <tag line="549" name="param" description="" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="549" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="549" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="556">
          <name>$part</name>
          <default/>
          <type/>
        </argument>
        <argument line="556">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="596" package="Default">
        <name>_parseIsoToDate</name>
        <docblock>
          <description>Internal parsing method</description>
          <long-description>
</long-description>
          <tag line="589" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="589" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="589" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="596">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="596">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="974" package="Default">
        <name>_toComment</name>
        <docblock>
          <description>Private function to make a comment of a token</description>
          <long-description>
</long-description>
          <tag line="968" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="968" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="974">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="993" package="Default">
        <name>_getDigitFromName</name>
        <docblock>
          <description>Return digit from standard names (english)
Faster implementation than locale aware searching</description>
          <long-description>
</long-description>
          <tag line="985" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="985" name="return" description="Number of this month" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="985" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="993">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="1045" package="Default">
        <name>getFullYear</name>
        <docblock>
          <description>Counts the exact year number
&lt; 70 - 2000 added, &gt;70 &lt; 100 - 1900, others just returned</description>
          <long-description>
</long-description>
          <tag line="1038" name="param" description="year number" type="integer" variable="$value">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="1038" name="return" description="Number of year" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="1045">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1069" package="Default">
        <name>set</name>
        <docblock>
          <description>Sets the given date as new date or a given datepart as new datepart returning the new datepart
This could be for example a localized dayname, the date without time,
the month or only the seconds. There are about 50 different supported date parts.</description>
          <long-description>&lt;p&gt;For a complete list of supported datepart values look into the docu&lt;/p&gt;
</long-description>
          <tag line="1057" name="param" description="Date or datepart to set" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1057" name="param" description="OPTIONAL Part of the date to set, if null the timestamp is set" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1057" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1057" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1057" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1069">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1069">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="1069">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1097" package="Default">
        <name>add</name>
        <docblock>
          <description>Adds a date or datepart to the existing date, by extracting $part from $date,
and modifying this object by adding that part.  The $part is then extracted from
this object and returned as an integer or numeric string (for large values, or $part's
corresponding to pre-defined formatted date strings).</description>
          <long-description>&lt;p&gt;This could be for example a ISO 8601 date, the hour the monthname or only the minute.
There are about 50 different supported date parts.
For a complete list of supported datepart values look into the docu.&lt;/p&gt;
</long-description>
          <tag line="1082" name="param" description="Date or datepart to add" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1082" name="param" description="OPTIONAL Part of the date to add, if null the timestamp is added" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1082" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1082" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1082" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1097">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1097">
          <name>$part</name>
          <default>self::TIMESTAMP</default>
          <type/>
        </argument>
        <argument line="1097">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1120" package="Default">
        <name>sub</name>
        <docblock>
          <description>Subtracts a date from another date.</description>
          <long-description>&lt;p&gt;This could be for example a RFC2822 date, the time,
the year or only the timestamp. There are about 50 different supported date parts.
For a complete list of supported datepart values look into the docu
Be aware: Adding -2 Months is not equal to Subtracting 2 Months !!!&lt;/p&gt;
</long-description>
          <tag line="1107" name="param" description="Date or datepart to subtract" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1107" name="param" description="OPTIONAL Part of the date to sub, if null the timestamp is subtracted" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1107" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1107" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1107" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1120">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1120">
          <name>$part</name>
          <default>self::TIMESTAMP</default>
          <type/>
        </argument>
        <argument line="1120">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1140" package="Default">
        <name>compare</name>
        <docblock>
          <description>Compares a date or datepart with the existing one.</description>
          <long-description>&lt;p&gt;Returns -1 if earlier, 0 if equal and 1 if later.&lt;/p&gt;
</long-description>
          <tag line="1130" name="param" description="Date or datepart to compare with the date object" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1130" name="param" description="OPTIONAL Part of the date to compare, if null the timestamp is subtracted" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1130" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1130" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="1130" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1140">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1140">
          <name>$part</name>
          <default>self::TIMESTAMP</default>
          <type/>
        </argument>
        <argument line="1140">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1170" package="Default">
        <name>copyPart</name>
        <docblock>
          <description>Returns a new instance of Zend_Date with the selected part copied.</description>
          <long-description>&lt;p&gt;To make an exact copy, use PHP's clone keyword.
For a complete list of supported date part values look into the docu.
If a date part is copied, all other date parts are set to standard values.
For example: If only YEAR is copied, the returned date object is equal to
01-01-YEAR 00:00:00 (01-01-1970 00:00:00 is equal to timestamp 0)
If only HOUR is copied, the returned date object is equal to
01-01-1970 HOUR:00:00 (so $this contains a timestamp equal to a timestamp of 0 plus HOUR).&lt;/p&gt;
</long-description>
          <tag line="1156" name="param" description="Part of the date to compare, if null the timestamp is subtracted" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1156" name="param" description="OPTIONAL New object's locale. No adjustments to timezone are made." type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1156" name="return" description="New clone with requested part" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="1170">
          <name>$part</name>
          <default/>
          <type/>
        </argument>
        <argument line="1170">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1187" package="Default">
        <name>getTimezoneFromString</name>
        <docblock>
          <description>Internal function, returns the offset of a given timezone</description>
          <long-description>
</long-description>
          <tag line="1181" name="param" description="" type="string" variable="$zone">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1181" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="1187">
          <name>$zone</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="1238" package="Default">
        <name>_assign</name>
        <docblock>
          <description>Calculates the date or object</description>
          <long-description>
</long-description>
          <tag line="1229" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1229" name="param" description="Date for calculation" type="string|integer" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="1229" name="param" description="Second date for calculation" type="string|integer" variable="$comp">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="1229" name="param" description="Use dst correction if option is set" type="boolean|integer" variable="$dst">
            <type by_reference="false">boolean</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="1229" name="return" description="new timestamp or Zend_Date depending on calculation" type="integer|string|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="1238">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="1238">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1238">
          <name>$comp</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="1238">
          <name>$dst</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="1288" package="Default">
        <name>_calculate</name>
        <docblock>
          <description>Calculates the date or object</description>
          <long-description>
</long-description>
          <tag line="1278" name="param" description="Calculation to make, one of: 'add'|'sub'|'cmp'|'copy'|'set'" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1278" name="param" description="Date or datepart to calculate with" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1278" name="param" description="Part of the date to calculate, if null the timestamp is used" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1278" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="1278" name="return" description="new timestamp" type="integer|string|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="1278" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1288">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="1288">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="1288">
          <name>$part</name>
          <default/>
          <type/>
        </argument>
        <argument line="1288">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2684" package="Default">
        <name>equals</name>
        <docblock>
          <description>Returns true when both date objects or date parts are equal.</description>
          <long-description>&lt;p&gt;For example:
15.May.2000 &lt;-&gt; 15.June.2000 Equals only for Day or Year... all other will return false&lt;/p&gt;
</long-description>
          <tag line="2673" name="param" description="Date or datepart to equal with" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2673" name="param" description="OPTIONAL Part of the date to compare, if null the timestamp is used" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2673" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2673" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2673" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2684">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="2684">
          <name>$part</name>
          <default>self::TIMESTAMP</default>
          <type/>
        </argument>
        <argument line="2684">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2706" package="Default">
        <name>isEarlier</name>
        <docblock>
          <description>Returns if the given date or datepart is earlier
For example:
15.May.2000 &lt;-&gt; 13.June.1999 will return true for day, year and date, but not for month</description>
          <long-description>
</long-description>
          <tag line="2695" name="param" description="Date or datepart to compare with" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2695" name="param" description="OPTIONAL Part of the date to compare, if null the timestamp is used" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2695" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2695" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2695" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2706">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="2706">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2706">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2729" package="Default">
        <name>isLater</name>
        <docblock>
          <description>Returns if the given date or datepart is later
For example:
15.May.2000 &lt;-&gt; 13.June.1999 will return true for month but false for day, year and date
Returns if the given date is later</description>
          <long-description>
</long-description>
          <tag line="2717" name="param" description="Date or datepart to compare with" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2717" name="param" description="OPTIONAL Part of the date to compare, if null the timestamp is used" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2717" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2717" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2717" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2729">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="2729">
          <name>$part</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2729">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2748" package="Default">
        <name>getTime</name>
        <docblock>
          <description>Returns only the time of the date as new Zend_Date object
For example:
15.May.2000 10:11:23 will return a dateobject equal to 01.Jan.1970 10:11:23</description>
          <long-description>
</long-description>
          <tag line="2740" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2740" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="2748">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="2769" package="Default">
        <name>_time</name>
        <docblock>
          <description>Returns the calculated time</description>
          <long-description>
</long-description>
          <tag line="2759" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2759" name="param" description="Time to calculate with, if null the actual time is taken" type="string|integer|array|\Zend_Date" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2759" name="param" description="Timeformat for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2759" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2759" name="return" description="new time" type="integer|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2759" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2769">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="2769">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="2769">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
        <argument line="2769">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2842" package="Default">
        <name>setTime</name>
        <docblock>
          <description>Sets a new time for the date object. Format defines how to parse the time string.</description>
          <long-description>&lt;p&gt;Also a complete date can be given, but only the time is used for setting.
For example: dd.MMMM.yyTHH:mm' and 'ss sec'-&gt; 10.May.07T25:11 and 44 sec =&gt; 1h11min44sec + 1 day
Returned is the new date object and the existing date is left as it was before&lt;/p&gt;
</long-description>
          <tag line="2830" name="param" description="Time to set" type="string|integer|array|\Zend_Date" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2830" name="param" description="OPTIONAL Timeformat for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2830" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2830" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2830" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2842">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="2842">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2842">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2860" package="Default">
        <name>addTime</name>
        <docblock>
          <description>Adds a time to the existing date. Format defines how to parse the time string.</description>
          <long-description>&lt;p&gt;If only parts are given the other parts are set to 0.
If no format is given, the standardformat of this locale is used.
For example: HH:mm:ss -&gt; 10 -&gt; +10 hours&lt;/p&gt;
</long-description>
          <tag line="2848" name="param" description="Time to add" type="string|integer|array|\Zend_Date" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2848" name="param" description="OPTIONAL Timeformat for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2848" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2848" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2848" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2860">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="2860">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2860">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2878" package="Default">
        <name>subTime</name>
        <docblock>
          <description>Subtracts a time from the existing date. Format defines how to parse the time string.</description>
          <long-description>&lt;p&gt;If only parts are given the other parts are set to 0.
If no format is given, the standardformat of this locale is used.
For example: HH:mm:ss -&gt; 10 -&gt; -10 hours&lt;/p&gt;
</long-description>
          <tag line="2866" name="param" description="Time to sub" type="string|integer|array|\Zend_Date" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2866" name="param" description="OPTIONAL Timeformat for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2866" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2866" name="return" description="Provides fluid inteface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2866" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2878">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="2878">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2878">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2896" package="Default">
        <name>compareTime</name>
        <docblock>
          <description>Compares the time from the existing date. Format defines how to parse the time string.</description>
          <long-description>&lt;p&gt;If only parts are given the other parts are set to default.
If no format us given, the standardformat of this locale is used.
For example: HH:mm:ss -&gt; 10 -&gt; 10 hours&lt;/p&gt;
</long-description>
          <tag line="2884" name="param" description="Time to compare" type="string|integer|array|\Zend_Date" variable="$time">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2884" name="param" description="OPTIONAL Timeformat for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2884" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2884" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="2884" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2896">
          <name>$time</name>
          <default/>
          <type/>
        </argument>
        <argument line="2896">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="2896">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="2907" package="Default">
        <name>getDate</name>
        <docblock>
          <description>Returns a clone of $this, with the time part set to 00:00:00.</description>
          <long-description>
</long-description>
          <tag line="2901" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2901" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="2907">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="2931" package="Default">
        <name>_date</name>
        <docblock>
          <description>Returns the calculated date</description>
          <long-description>
</long-description>
          <tag line="2921" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2921" name="param" description="Date to calculate with, if null the actual date is taken" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2921" name="param" description="Date format for parsing" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2921" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2921" name="return" description="new date" type="integer|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2921" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="2931">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="2931">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="2931">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
        <argument line="2931">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3004" package="Default">
        <name>setDate</name>
        <docblock>
          <description>Sets a new date for the date object. Format defines how to parse the date string.</description>
          <long-description>&lt;p&gt;Also a complete date with time can be given, but only the date is used for setting.
For example: MMMM.yy HH:mm-&gt; May.07 22:11 =&gt; 01.May.07 00:00
Returned is the new date object and the existing time is left as it was before&lt;/p&gt;
</long-description>
          <tag line="2992" name="param" description="Date to set" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2992" name="param" description="OPTIONAL Date format for parsing" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2992" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="2992" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="2992" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3004">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3004">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="3004">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3022" package="Default">
        <name>addDate</name>
        <docblock>
          <description>Adds a date to the existing date object. Format defines how to parse the date string.</description>
          <long-description>&lt;p&gt;If only parts are given the other parts are set to 0.
If no format is given, the standardformat of this locale is used.
For example: MM.dd.YYYY -&gt; 10 -&gt; +10 months&lt;/p&gt;
</long-description>
          <tag line="3010" name="param" description="Date to add" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3010" name="param" description="OPTIONAL Date format for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3010" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3010" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3010" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3022">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3022">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="3022">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3041" package="Default">
        <name>subDate</name>
        <docblock>
          <description>Subtracts a date from the existing date object. Format defines how to parse the date string.</description>
          <long-description>&lt;p&gt;If only parts are given the other parts are set to 0.
If no format is given, the standardformat of this locale is used.
For example: MM.dd.YYYY -&gt; 10 -&gt; -10 months
Be aware: Subtracting 2 months is not equal to Adding -2 months !!!&lt;/p&gt;
</long-description>
          <tag line="3028" name="param" description="Date to sub" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3028" name="param" description="OPTIONAL Date format for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3028" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3028" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3028" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3041">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3041">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="3041">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3060" package="Default">
        <name>compareDate</name>
        <docblock>
          <description>Compares the date from the existing date object, ignoring the time.</description>
          <long-description>&lt;p&gt;Format defines how to parse the date string.
If only parts are given the other parts are set to 0.
If no format is given, the standardformat of this locale is used.
For example: 10.01.2000 =&gt; 10.02.1999 -&gt; false&lt;/p&gt;
</long-description>
          <tag line="3047" name="param" description="Date to compare" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3047" name="param" description="OPTIONAL Date format for parsing input" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3047" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3047" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3047" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3060">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3060">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="3060">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3075" package="Default">
        <name>getIso</name>
        <docblock>
          <description>Returns the full ISO 8601 date from the date object.</description>
          <long-description>&lt;p&gt;Always the complete ISO 8601 specifiction is used. If an other ISO date is needed
(ISO 8601 defines several formats) use toString() instead.
This function does not return the ISO date as object. Use copy() instead.&lt;/p&gt;
</long-description>
          <tag line="3066" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3066" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="3075">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3092" package="Default">
        <name>setIso</name>
        <docblock>
          <description>Sets a new date for the date object. Not given parts are set to default.</description>
          <long-description>&lt;p&gt;Only supported ISO 8601 formats are accepted.
For example: 050901 -&gt; 01.Sept.2005 00:00:00, 20050201T10:00:30 -&gt; 01.Feb.2005 10h00m30s
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3081" name="param" description="ISO Date to set" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3081" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3081" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3081" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3092">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3092">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3109" package="Default">
        <name>addIso</name>
        <docblock>
          <description>Adds a ISO date to the date object. Not given parts are set to default.</description>
          <long-description>&lt;p&gt;Only supported ISO 8601 formats are accepted.
For example: 050901 -&gt; + 01.Sept.2005 00:00:00, 10:00:00 -&gt; +10h
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3098" name="param" description="ISO Date to add" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3098" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3098" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3098" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3109">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3109">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3126" package="Default">
        <name>subIso</name>
        <docblock>
          <description>Subtracts a ISO date from the date object. Not given parts are set to default.</description>
          <long-description>&lt;p&gt;Only supported ISO 8601 formats are accepted.
For example: 050901 -&gt; - 01.Sept.2005 00:00:00, 10:00:00 -&gt; -10h
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3115" name="param" description="ISO Date to sub" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3115" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3115" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3115" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3126">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3126">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3143" package="Default">
        <name>compareIso</name>
        <docblock>
          <description>Compares a ISO date with the date object. Not given parts are set to default.</description>
          <long-description>&lt;p&gt;Only supported ISO 8601 formats are accepted.
For example: 050901 -&gt; - 01.Sept.2005 00:00:00, 10:00:00 -&gt; -10h
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="3132" name="param" description="ISO Date to sub" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3132" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3132" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3132" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3143">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3143">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3156" package="Default">
        <name>getArpa</name>
        <docblock>
          <description>Returns a RFC 822 compilant datestring from the date object.</description>
          <long-description>&lt;p&gt;This function does not return the RFC date as object. Use copy() instead.&lt;/p&gt;
</long-description>
          <tag line="3149" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3149" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="3156">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3179" package="Default">
        <name>setArpa</name>
        <docblock>
          <description>Sets a RFC 822 date as new date for the date object.</description>
          <long-description>&lt;p&gt;Only RFC 822 compilant date strings are accepted.
For example: Sat, 14 Feb 09 00:31:30 +0100
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3168" name="param" description="RFC 822 to set" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3168" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3168" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3168" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3179">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3179">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3197" package="Default">
        <name>addArpa</name>
        <docblock>
          <description>Adds a RFC 822 date to the date object.</description>
          <long-description>&lt;p&gt;ARPA messages are used in emails or HTTP Headers.
Only RFC 822 compilant date strings are accepted.
For example: Sat, 14 Feb 09 00:31:30 +0100
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3185" name="param" description="RFC 822 Date to add" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3185" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3185" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3185" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3197">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3197">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3215" package="Default">
        <name>subArpa</name>
        <docblock>
          <description>Subtracts a RFC 822 date from the date object.</description>
          <long-description>&lt;p&gt;ARPA messages are used in emails or HTTP Headers.
Only RFC 822 compilant date strings are accepted.
For example: Sat, 14 Feb 09 00:31:30 +0100
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3203" name="param" description="RFC 822 Date to sub" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3203" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3203" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3203" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3215">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3215">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3233" package="Default">
        <name>compareArpa</name>
        <docblock>
          <description>Compares a RFC 822 compilant date with the date object.</description>
          <long-description>&lt;p&gt;ARPA messages are used in emails or HTTP Headers.
Only RFC 822 compilant date strings are accepted.
For example: Sat, 14 Feb 09 00:31:30 +0100
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="3221" name="param" description="RFC 822 Date to sub" type="string|integer|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3221" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3221" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3221" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3233">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3233">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3245" package="Default">
        <name>_checkLocation</name>
        <docblock>
          <description>Check if location is supported</description>
          <long-description>
</long-description>
          <tag line="3239" name="param" description="locations array" type="array" variable="$location">
            <type by_reference="false">array</type>
          </tag>
          <tag line="3239" name="return" description="float" type="\$horizon">
            <type by_reference="false">\$horizon</type>
          </tag>
        </docblock>
        <argument line="3245">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3292" package="Default">
        <name>getSunrise</name>
        <docblock>
          <description>Returns the time of sunrise for this date and a given location as new date object
For a list of cities and correct locations use the class Zend_Date_Cities</description>
          <long-description>
</long-description>
          <tag line="3281" name="param" description="location of sunrise ['horizon'] -&gt; civil, nautic, astronomical, effective (default) ['longitude'] -&gt; longitude of location ['latitude'] -&gt; latitude of location" type="array" variable="$location">
            <type by_reference="false">array</type>
          </tag>
          <tag line="3281" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3281" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3292">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3312" package="Default">
        <name>getSunset</name>
        <docblock>
          <description>Returns the time of sunset for this date and a given location as new date object
For a list of cities and correct locations use the class Zend_Date_Cities</description>
          <long-description>
</long-description>
          <tag line="3301" name="param" description="location of sunset ['horizon'] -&gt; civil, nautic, astronomical, effective (default) ['longitude'] -&gt; longitude of location ['latitude'] -&gt; latitude of location" type="array" variable="$location">
            <type by_reference="false">array</type>
          </tag>
          <tag line="3301" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3301" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3312">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3332" package="Default">
        <name>getSunInfo</name>
        <docblock>
          <description>Returns an array with the sunset and sunrise dates for all horizon types
For a list of cities and correct locations use the class Zend_Date_Cities</description>
          <long-description>
</long-description>
          <tag line="3321" name="param" description="location of suninfo ['horizon'] -&gt; civil, nautic, astronomical, effective (default) ['longitude'] -&gt; longitude of location ['latitude'] -&gt; latitude of location" type="array" variable="$location">
            <type by_reference="false">array</type>
          </tag>
          <tag line="3321" name="return" description="- [sunset|sunrise][effective|civil|nautic|astronomic]" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="3321" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3332">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="3368" package="Default">
        <name>checkLeapYear</name>
        <docblock>
          <description>Check a given year for leap year.</description>
          <long-description>
</long-description>
          <tag line="3362" name="param" description="Year to check" type="integer|array|\Zend_Date" variable="$year">
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3362" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="3368">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3397" package="Default">
        <name>isLeapYear</name>
        <docblock>
          <description>Returns true, if the year is a leap year.</description>
          <long-description>
</long-description>
          <tag line="3392" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3408" package="Default">
        <name>isToday</name>
        <docblock>
          <description>Returns if the set date is todays date</description>
          <long-description>
</long-description>
          <tag line="3403" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3421" package="Default">
        <name>isYesterday</name>
        <docblock>
          <description>Returns if the set date is yesterdays date</description>
          <long-description>
</long-description>
          <tag line="3416" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3436" package="Default">
        <name>isTomorrow</name>
        <docblock>
          <description>Returns if the set date is tomorrows date</description>
          <long-description>
</long-description>
          <tag line="3431" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="3451" package="Default">
        <name>now</name>
        <docblock>
          <description>Returns the actual date as new date object</description>
          <long-description>
</long-description>
          <tag line="3445" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3445" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="3451">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3466" package="Default">
        <name>_calcdetail</name>
        <docblock>
          <description>Calculate date details</description>
          <long-description>
</long-description>
          <tag line="3456" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3456" name="param" description="Date or Part to calculate" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3456" name="param" description="Datepart for Calculation" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3456" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3456" name="return" description="new date" type="integer|string">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="3456" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3466">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="3466">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="3466">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="3466">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3505" package="Default">
        <name>_calcvalue</name>
        <docblock>
          <description>Internal calculation, returns the requested date type</description>
          <long-description>
</long-description>
          <tag line="3496" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3496" name="param" description="Datevalue to calculate with, if null the actual value is taken" type="string|integer|\Zend_Date" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3496" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3496" name="return" description="new date" type="integer|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3496" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3505">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="3505">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="3505">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="3505">
          <name>$parameter</name>
          <default/>
          <type/>
        </argument>
        <argument line="3505">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3539" package="Default">
        <name>getYear</name>
        <docblock>
          <description>Returns only the year from the date object as new object.</description>
          <long-description>&lt;p&gt;For example: 10.May.2000 10:30:00 -&gt; 01.Jan.2000 00:00:00&lt;/p&gt;
</long-description>
          <tag line="3532" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3532" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="3539">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3564" package="Default">
        <name>setYear</name>
        <docblock>
          <description>Sets a new year
If the year is between 0 and 69, 2000 will be set (2000-2069)
If the year if between 70 and 99, 1999 will be set (1970-1999)
3 or 4 digit years are set as expected. If you need to set year 0-99
use set() instead.</description>
          <long-description>&lt;p&gt;Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3551" name="param" description="Year to set" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3551" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3551" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3551" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3564">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="3564">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3583" package="Default">
        <name>addYear</name>
        <docblock>
          <description>Adds the year to the existing date object
If the year is between 0 and 69, 2000 will be added (2000-2069)
If the year if between 70 and 99, 1999 will be added (1970-1999)
3 or 4 digit years are added as expected. If you need to add years from 0-99
use add() instead.</description>
          <long-description>&lt;p&gt;Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3570" name="param" description="Year to add" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3570" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3570" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3570" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3583">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="3583">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3602" package="Default">
        <name>subYear</name>
        <docblock>
          <description>Subs the year from the existing date object
If the year is between 0 and 69, 2000 will be subtracted (2000-2069)
If the year if between 70 and 99, 1999 will be subtracted (1970-1999)
3 or 4 digit years are subtracted as expected. If you need to subtract years from 0-99
use sub() instead.</description>
          <long-description>&lt;p&gt;Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3589" name="param" description="Year to sub" type="string|integer|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3589" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3589" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3589" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3602">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="3602">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3618" package="Default">
        <name>compareYear</name>
        <docblock>
          <description>Compares the year with the existing date object, ignoring other date parts.</description>
          <long-description>&lt;p&gt;For example: 10.03.2000 -&gt; 15.02.2000 -&gt; true
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="3608" name="param" description="Year to compare" type="string|integer|array|\Zend_Date" variable="$year">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3608" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3608" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3608" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3618">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="3618">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3631" package="Default">
        <name>getMonth</name>
        <docblock>
          <description>Returns only the month from the date object as new object.</description>
          <long-description>&lt;p&gt;For example: 10.May.2000 10:30:00 -&gt; 01.May.1970 00:00:00&lt;/p&gt;
</long-description>
          <tag line="3624" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3624" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="3631">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3652" package="Default">
        <name>_month</name>
        <docblock>
          <description>Returns the calculated month</description>
          <long-description>
</long-description>
          <tag line="3643" name="param" description="Calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3643" name="param" description="Month to calculate with, if null the actual month is taken" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3643" name="param" description="Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3643" name="return" description="new time" type="integer|\Zend_Date">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3643" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3652">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="3652">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="3652">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3726" package="Default">
        <name>setMonth</name>
        <docblock>
          <description>Sets a new month
The month can be a number or a string. Setting months lower then 0 and greater then 12
will result in adding or subtracting the relevant year. (12 months equal one year)
If a localized monthname is given it will be parsed with the default locale or the optional
set locale.</description>
          <long-description>&lt;p&gt;Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3713" name="param" description="Month to set" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3713" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3713" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3713" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3726">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="3726">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3745" package="Default">
        <name>addMonth</name>
        <docblock>
          <description>Adds months to the existing date object.</description>
          <long-description>&lt;p&gt;The month can be a number or a string. Adding months lower then 0 and greater then 12
will result in adding or subtracting the relevant year. (12 months equal one year)
If a localized monthname is given it will be parsed with the default locale or the optional
set locale.
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3732" name="param" description="Month to add" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3732" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3732" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3732" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3745">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="3745">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3764" package="Default">
        <name>subMonth</name>
        <docblock>
          <description>Subtracts months from the existing date object.</description>
          <long-description>&lt;p&gt;The month can be a number or a string. Subtracting months lower then 0 and greater then 12
will result in adding or subtracting the relevant year. (12 months equal one year)
If a localized monthname is given it will be parsed with the default locale or the optional
set locale.
Returned is the new date object&lt;/p&gt;
</long-description>
          <tag line="3751" name="param" description="Month to sub" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3751" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3751" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3751" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3764">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="3764">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3780" package="Default">
        <name>compareMonth</name>
        <docblock>
          <description>Compares the month with the existing date object, ignoring other date parts.</description>
          <long-description>&lt;p&gt;For example: 10.03.2000 -&gt; 15.03.1950 -&gt; true
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="3770" name="param" description="Month to compare" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3770" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3770" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3770" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3780">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="3780">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3793" package="Default">
        <name>getDay</name>
        <docblock>
          <description>Returns the day as new date object
Example: 20.May.1986 -&gt; 20.Jan.1970 00:00:00</description>
          <long-description>
</long-description>
          <tag line="3786" name="param" description="OPTIONAL Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3786" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="3793">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3807" package="Default">
        <name>_day</name>
        <docblock>
          <description>Returns the calculated day</description>
          <long-description>
</long-description>
          <tag line="3799" name="param" description="Type of calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3799" name="param" description="Day to calculate, when null the actual day is calculated" type="\Zend_Date" variable="$day">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3799" name="param" description="Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3799" name="return" description="" type="\Zend_Date|integer">
            <type by_reference="false">\Zend_Date</type>
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="3807">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="3807">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="3807">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3870" package="Default">
        <name>setDay</name>
        <docblock>
          <description>Sets a new day
The day can be a number or a string. Setting days lower then 0 or greater than the number of this months days
will result in adding or subtracting the relevant month.</description>
          <long-description>&lt;p&gt;If a localized dayname is given it will be parsed with the default locale or the optional
set locale.
Returned is the new date object
Example: setDay('Montag', 'de_AT'); will set the monday of this week as day.&lt;/p&gt;
</long-description>
          <tag line="3856" name="param" description="Day to set" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3856" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3856" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3856" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3870">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="3870">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3888" package="Default">
        <name>addDay</name>
        <docblock>
          <description>Adds days to the existing date object.</description>
          <long-description>&lt;p&gt;The day can be a number or a string. Adding days lower then 0 or greater than the number of this months days
will result in adding or subtracting the relevant month.
If a localized dayname is given it will be parsed with the default locale or the optional
set locale.&lt;/p&gt;
</long-description>
          <tag line="3876" name="param" description="Day to add" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3876" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3876" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3876" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3888">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="3888">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3906" package="Default">
        <name>subDay</name>
        <docblock>
          <description>Subtracts days from the existing date object.</description>
          <long-description>&lt;p&gt;The day can be a number or a string. Subtracting days lower then 0 or greater than the number of this months days
will result in adding or subtracting the relevant month.
If a localized dayname is given it will be parsed with the default locale or the optional
set locale.&lt;/p&gt;
</long-description>
          <tag line="3894" name="param" description="Day to sub" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3894" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3894" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3894" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3906">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="3906">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3922" package="Default">
        <name>compareDay</name>
        <docblock>
          <description>Compares the day with the existing date object, ignoring other date parts.</description>
          <long-description>&lt;p&gt;For example: 'Monday', 'en' -&gt; 08.Jan.2007 -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="3912" name="param" description="Day to compare" type="string|integer|array|\Zend_Date" variable="$day">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3912" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3912" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3912" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3922">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="3922">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="3936" package="Default">
        <name>getWeekday</name>
        <docblock>
          <description>Returns the weekday as new date object
Weekday is always from 1-7
Example: 09-Jan-2007 -&gt; 2 = Tuesday -&gt; 02-Jan-1970 (when 02.01.1970 is also Tuesday)</description>
          <long-description>
</long-description>
          <tag line="3928" name="param" description="OPTIONAL Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3928" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="3936">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="3957" package="Default">
        <name>_weekday</name>
        <docblock>
          <description>Returns the calculated weekday</description>
          <long-description>
</long-description>
          <tag line="3948" name="param" description="Type of calculation to make" type="string" variable="$calc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3948" name="param" description="Weekday to calculate, when null the actual weekday is calculated" type="\Zend_Date" variable="$weekday">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="3948" name="param" description="Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="3948" name="return" description="" type="\Zend_Date|integer">
            <type by_reference="false">\Zend_Date</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="3948" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="3957">
          <name>$calc</name>
          <default/>
          <type/>
        </argument>
        <argument line="3957">
          <name>$weekday</name>
          <default/>
          <type/>
        </argument>
        <argument line="3957">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4018" package="Default">
        <name>setWeekday</name>
        <docblock>
          <description>Sets a new weekday
The weekday can be a number or a string. If a localized weekday name is given,
then it will be parsed as a date in $locale (defaults to the same locale as $this).</description>
          <long-description>&lt;p&gt;Returned is the new date object.
Example: setWeekday(3); will set the wednesday of this week as day.&lt;/p&gt;
</long-description>
          <tag line="4006" name="param" description="Weekday to set" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4006" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4006" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4006" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4018">
          <name>$weekday</name>
          <default/>
          <type/>
        </argument>
        <argument line="4018">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4038" package="Default">
        <name>addWeekday</name>
        <docblock>
          <description>Adds weekdays to the existing date object.</description>
          <long-description>&lt;p&gt;The weekday can be a number or a string.
If a localized dayname is given it will be parsed with the default locale or the optional
set locale.
Returned is the new date object
Example: addWeekday(3); will add the difference of days from the begining of the month until
wednesday.&lt;/p&gt;
</long-description>
          <tag line="4024" name="param" description="Weekday to add" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4024" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4024" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4024" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4038">
          <name>$weekday</name>
          <default/>
          <type/>
        </argument>
        <argument line="4038">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4058" package="Default">
        <name>subWeekday</name>
        <docblock>
          <description>Subtracts weekdays from the existing date object.</description>
          <long-description>&lt;p&gt;The weekday can be a number or a string.
If a localized dayname is given it will be parsed with the default locale or the optional
set locale.
Returned is the new date object
Example: subWeekday(3); will subtract the difference of days from the begining of the month until
wednesday.&lt;/p&gt;
</long-description>
          <tag line="4044" name="param" description="Weekday to sub" type="string|integer|array|\Zend_Date" variable="$month">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4044" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4044" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4044" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4058">
          <name>$weekday</name>
          <default/>
          <type/>
        </argument>
        <argument line="4058">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4074" package="Default">
        <name>compareWeekday</name>
        <docblock>
          <description>Compares the weekday with the existing date object, ignoring other date parts.</description>
          <long-description>&lt;p&gt;For example: 'Monday', 'en' -&gt; 08.Jan.2007 -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="4064" name="param" description="Weekday to compare" type="string|integer|array|\Zend_Date" variable="$weekday">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4064" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4064" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4064" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4074">
          <name>$weekday</name>
          <default/>
          <type/>
        </argument>
        <argument line="4074">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4087" package="Default">
        <name>getDayOfYear</name>
        <docblock>
          <description>Returns the day of year as new date object
Example: 02.Feb.1986 10:00:00 -&gt; 02.Feb.1970 00:00:00</description>
          <long-description>
</long-description>
          <tag line="4080" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4080" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4087">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4110" package="Default">
        <name>setDayOfYear</name>
        <docblock>
          <description>Sets a new day of year
The day of year is always a number.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 04.May.2004 -&gt; setDayOfYear(10) -&gt; 10.Jan.2004&lt;/p&gt;
</long-description>
          <tag line="4099" name="param" description="Day of Year to set" type="string|integer|array|\Zend_Date" variable="$day">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4099" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4099" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4099" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4110">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="4110">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4127" package="Default">
        <name>addDayOfYear</name>
        <docblock>
          <description>Adds a day of year to the existing date object.</description>
          <long-description>&lt;p&gt;The day of year is always a number.
Returned is the new date object
Example: addDayOfYear(10); will add 10 days to the existing date object.&lt;/p&gt;
</long-description>
          <tag line="4116" name="param" description="Day of Year to add" type="string|integer|array|\Zend_Date" variable="$day">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4116" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4116" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4116" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4127">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="4127">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4144" package="Default">
        <name>subDayOfYear</name>
        <docblock>
          <description>Subtracts a day of year from the existing date object.</description>
          <long-description>&lt;p&gt;The day of year is always a number.
Returned is the new date object
Example: subDayOfYear(10); will subtract 10 days from the existing date object.&lt;/p&gt;
</long-description>
          <tag line="4133" name="param" description="Day of Year to sub" type="string|integer|array|\Zend_Date" variable="$day">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4133" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4133" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4133" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4144">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="4144">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4160" package="Default">
        <name>compareDayOfYear</name>
        <docblock>
          <description>Compares the day of year with the existing date object.</description>
          <long-description>&lt;p&gt;For example: compareDayOfYear(33) -&gt; 02.Feb.2007 -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="4150" name="param" description="Day of Year to compare" type="string|integer|array|\Zend_Date" variable="$day">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4150" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4150" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4150" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4160">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="4160">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4173" package="Default">
        <name>getHour</name>
        <docblock>
          <description>Returns the hour as new date object
Example: 02.Feb.1986 10:30:25 -&gt; 01.Jan.1970 10:00:00</description>
          <long-description>
</long-description>
          <tag line="4166" name="param" description="OPTIONAL Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4166" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4173">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4190" package="Default">
        <name>setHour</name>
        <docblock>
          <description>Sets a new hour
The hour is always a number.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; setHour(7); -&gt; 04.May.1993 07:07:25&lt;/p&gt;
</long-description>
          <tag line="4179" name="param" description="Hour to set" type="string|integer|array|\Zend_Date" variable="$hour">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4179" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4179" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4179" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4190">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="4190">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4207" package="Default">
        <name>addHour</name>
        <docblock>
          <description>Adds hours to the existing date object.</description>
          <long-description>&lt;p&gt;The hour is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; addHour(12); -&gt; 05.May.1993 01:07:25&lt;/p&gt;
</long-description>
          <tag line="4196" name="param" description="Hour to add" type="string|integer|array|\Zend_Date" variable="$hour">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4196" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4196" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4196" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4207">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="4207">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4224" package="Default">
        <name>subHour</name>
        <docblock>
          <description>Subtracts hours from the existing date object.</description>
          <long-description>&lt;p&gt;The hour is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; subHour(6); -&gt; 05.May.1993 07:07:25&lt;/p&gt;
</long-description>
          <tag line="4213" name="param" description="Hour to sub" type="string|integer|array|\Zend_Date" variable="$hour">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4213" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4213" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4213" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4224">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="4224">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4240" package="Default">
        <name>compareHour</name>
        <docblock>
          <description>Compares the hour with the existing date object.</description>
          <long-description>&lt;p&gt;For example: 10:30:25 -&gt; compareHour(10) -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="4230" name="param" description="Hour to compare" type="string|integer|array|\Zend_Date" variable="$hour">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4230" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4230" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4230" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4240">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="4240">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4253" package="Default">
        <name>getMinute</name>
        <docblock>
          <description>Returns the minute as new date object
Example: 02.Feb.1986 10:30:25 -&gt; 01.Jan.1970 00:30:00</description>
          <long-description>
</long-description>
          <tag line="4246" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4246" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4253">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4276" package="Default">
        <name>setMinute</name>
        <docblock>
          <description>Sets a new minute
The minute is always a number.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; setMinute(29); -&gt; 04.May.1993 13:29:25&lt;/p&gt;
</long-description>
          <tag line="4265" name="param" description="Minute to set" type="string|integer|array|\Zend_Date" variable="$minute">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4265" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4265" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4265" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4276">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="4276">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4293" package="Default">
        <name>addMinute</name>
        <docblock>
          <description>Adds minutes to the existing date object.</description>
          <long-description>&lt;p&gt;The minute is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; addMinute(65); -&gt; 04.May.1993 13:12:25&lt;/p&gt;
</long-description>
          <tag line="4282" name="param" description="Minute to add" type="string|integer|array|\Zend_Date" variable="$minute">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4282" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4282" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4282" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4293">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="4293">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4310" package="Default">
        <name>subMinute</name>
        <docblock>
          <description>Subtracts minutes from the existing date object.</description>
          <long-description>&lt;p&gt;The minute is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; subMinute(9); -&gt; 04.May.1993 12:58:25&lt;/p&gt;
</long-description>
          <tag line="4299" name="param" description="Minute to sub" type="string|integer|array|\Zend_Date" variable="$minute">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4299" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4299" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4299" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4310">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="4310">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4326" package="Default">
        <name>compareMinute</name>
        <docblock>
          <description>Compares the minute with the existing date object.</description>
          <long-description>&lt;p&gt;For example: 10:30:25 -&gt; compareMinute(30) -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="4316" name="param" description="Hour to compare" type="string|integer|array|\Zend_Date" variable="$minute">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4316" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4316" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4316" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4326">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="4326">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4339" package="Default">
        <name>getSecond</name>
        <docblock>
          <description>Returns the second as new date object
Example: 02.Feb.1986 10:30:25 -&gt; 01.Jan.1970 00:00:25</description>
          <long-description>
</long-description>
          <tag line="4332" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4332" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4339">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4362" package="Default">
        <name>setSecond</name>
        <docblock>
          <description>Sets new seconds to the existing date object.</description>
          <long-description>&lt;p&gt;The second is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; setSecond(100); -&gt; 04.May.1993 13:08:40&lt;/p&gt;
</long-description>
          <tag line="4351" name="param" description="Second to set" type="string|integer|array|\Zend_Date" variable="$second">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4351" name="param" description="(Optional) Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4351" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4351" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4362">
          <name>$second</name>
          <default/>
          <type/>
        </argument>
        <argument line="4362">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4379" package="Default">
        <name>addSecond</name>
        <docblock>
          <description>Adds seconds to the existing date object.</description>
          <long-description>&lt;p&gt;The second is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; addSecond(65); -&gt; 04.May.1993 13:08:30&lt;/p&gt;
</long-description>
          <tag line="4368" name="param" description="Second to add" type="string|integer|array|\Zend_Date" variable="$second">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4368" name="param" description="(Optional) Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4368" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4368" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4379">
          <name>$second</name>
          <default/>
          <type/>
        </argument>
        <argument line="4379">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4396" package="Default">
        <name>subSecond</name>
        <docblock>
          <description>Subtracts seconds from the existing date object.</description>
          <long-description>&lt;p&gt;The second is always a number.
Returned is the new date object
Example: 04.May.1993 13:07:25 -&gt; subSecond(10); -&gt; 04.May.1993 13:07:15&lt;/p&gt;
</long-description>
          <tag line="4385" name="param" description="Second to sub" type="string|integer|array|\Zend_Date" variable="$second">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4385" name="param" description="(Optional) Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4385" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4385" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4396">
          <name>$second</name>
          <default/>
          <type/>
        </argument>
        <argument line="4396">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4412" package="Default">
        <name>compareSecond</name>
        <docblock>
          <description>Compares the second with the existing date object.</description>
          <long-description>&lt;p&gt;For example: 10:30:25 -&gt; compareSecond(25) -&gt; 0
Returns if equal, earlier or later&lt;/p&gt;
</long-description>
          <tag line="4402" name="param" description="Second to compare" type="string|integer|array|\Zend_Date" variable="$second">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4402" name="param" description="(Optional) Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4402" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4402" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4412">
          <name>$second</name>
          <default/>
          <type/>
        </argument>
        <argument line="4412">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4423" package="Default">
        <name>getFractionalPrecision</name>
        <docblock>
          <description>Returns the precision for fractional seconds</description>
          <long-description>
</long-description>
          <tag line="4418" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4436" package="Default">
        <name>setFractionalPrecision</name>
        <docblock>
          <description>Sets a new precision for fractional seconds</description>
          <long-description>
</long-description>
          <tag line="4429" name="param" description="Precision for the fractional datepart 3 = milliseconds" type="integer" variable="$precision">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4429" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
          <tag line="4429" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4436">
          <name>$precision</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4459" package="Default">
        <name>getMilliSecond</name>
        <docblock>
          <description>Returns the milliseconds of the date object</description>
          <long-description>
</long-description>
          <tag line="4454" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4473" package="Default">
        <name>setMilliSecond</name>
        <docblock>
          <description>Sets new milliseconds for the date object
Example: setMilliSecond(550, 2) -&gt; equals +5 Sec +50 MilliSec</description>
          <long-description>
</long-description>
          <tag line="4465" name="param" description="(Optional) Millisecond to set, when null the actual millisecond is set" type="integer|\Zend_Date" variable="$milli">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4465" name="param" description="(Optional) Fraction precision of the given milliseconds" type="integer" variable="$precision">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4465" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4473">
          <name>$milli</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="4473">
          <name>$precision</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4506" package="Default">
        <name>addMilliSecond</name>
        <docblock>
          <description>Adds milliseconds to the date object</description>
          <long-description>
</long-description>
          <tag line="4499" name="param" description="(Optional) Millisecond to add, when null the actual millisecond is added" type="integer|\Zend_Date" variable="$milli">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4499" name="param" description="(Optional) Fractional precision for the given milliseconds" type="integer" variable="$precision">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4499" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4506">
          <name>$milli</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="4506">
          <name>$precision</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4562" package="Default">
        <name>subMilliSecond</name>
        <docblock>
          <description>Subtracts a millisecond</description>
          <long-description>
</long-description>
          <tag line="4555" name="param" description="(Optional) Millisecond to sub, when null the actual millisecond is subtracted" type="integer|\Zend_Date" variable="$milli">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4555" name="param" description="(Optional) Fractional precision for the given milliseconds" type="integer" variable="$precision">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4555" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4562">
          <name>$milli</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="4562">
          <name>$precision</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4576" package="Default">
        <name>compareMilliSecond</name>
        <docblock>
          <description>Compares only the millisecond part, returning the difference</description>
          <long-description>
</long-description>
          <tag line="4568" name="param" description="OPTIONAL Millisecond to compare, when null the actual millisecond is compared" type="integer|\Zend_Date" variable="$milli">
            <type by_reference="false">integer</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4568" name="param" description="OPTIONAL Fractional precision for the given milliseconds" type="integer" variable="$precision">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="4568" name="throws" description="On invalid input" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
          <tag line="4568" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="4576">
          <name>$milli</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="4576">
          <name>$precision</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4624" package="Default">
        <name>getWeek</name>
        <docblock>
          <description>Returns the week as new date object using monday as begining of the week
Example: 12.Jan.2007 -&gt; 08.Jan.1970 00:00:00</description>
          <long-description>
</long-description>
          <tag line="4617" name="param" description="OPTIONAL Locale for parsing input" type="\Zend_Locale" variable="$locale">
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4617" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4624">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4645" package="Default">
        <name>setWeek</name>
        <docblock>
          <description>Sets a new week. The week is always a number. The day of week is not changed.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 09.Jan.2007 13:07:25 -&gt; setWeek(1); -&gt; 02.Jan.2007 13:07:25&lt;/p&gt;
</long-description>
          <tag line="4635" name="param" description="Week to set" type="string|integer|array|\Zend_Date" variable="$week">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4635" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4635" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4635" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4645">
          <name>$week</name>
          <default/>
          <type/>
        </argument>
        <argument line="4645">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4660" package="Default">
        <name>addWeek</name>
        <docblock>
          <description>Adds a week. The week is always a number. The day of week is not changed.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 09.Jan.2007 13:07:25 -&gt; addWeek(1); -&gt; 16.Jan.2007 13:07:25&lt;/p&gt;
</long-description>
          <tag line="4650" name="param" description="Week to add" type="string|integer|array|\Zend_Date" variable="$week">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4650" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4650" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4650" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4660">
          <name>$week</name>
          <default/>
          <type/>
        </argument>
        <argument line="4660">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4675" package="Default">
        <name>subWeek</name>
        <docblock>
          <description>Subtracts a week. The week is always a number. The day of week is not changed.</description>
          <long-description>&lt;p&gt;Returned is the new date object
Example: 09.Jan.2007 13:07:25 -&gt; subWeek(1); -&gt; 02.Jan.2007 13:07:25&lt;/p&gt;
</long-description>
          <tag line="4665" name="param" description="Week to sub" type="string|integer|array|\Zend_Date" variable="$week">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4665" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4665" name="return" description="Provides fluid interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4665" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="4675">
          <name>$week</name>
          <default/>
          <type/>
        </argument>
        <argument line="4675">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4690" package="Default">
        <name>compareWeek</name>
        <docblock>
          <description>Compares only the week part, returning the difference
Returned is the new date object
Returns if equal, earlier or later
Example: 09.Jan.2007 13:07:25 -&gt; compareWeek(2); -&gt; 0</description>
          <long-description>
</long-description>
          <tag line="4680" name="param" description="Week to compare" type="string|integer|array|\Zend_Date" variable="$week">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4680" name="param" description="OPTIONAL Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4680" name="return" description="0 = equal, 1 = later, -1 = earlier" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="4690">
          <name>$week</name>
          <default/>
          <type/>
        </argument>
        <argument line="4690">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4706" package="Default">
        <name>setLocale</name>
        <docblock>
          <description>Sets a new standard locale for the date object.</description>
          <long-description>&lt;p&gt;This locale will be used for all functions
Returned is the really set locale.
Example: 'de_XX' will be set to 'de' because 'de_XX' does not exist
'xx_YY' will be set to 'root' because 'xx' does not exist&lt;/p&gt;
</long-description>
          <tag line="4695" name="param" description="(Optional) Locale for parsing input" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4695" name="throws" description="When the given locale does not exist" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
          <tag line="4695" name="return" description="Provides fluent interface" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
        <argument line="4706">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="4723" package="Default">
        <name>getLocale</name>
        <docblock>
          <description>Returns the actual set locale</description>
          <long-description>
</long-description>
          <tag line="4718" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="4740" package="Default">
        <name>isDate</name>
        <docblock>
          <description>Checks if the given date is a real date or datepart.</description>
          <long-description>&lt;p&gt;Returns false if a expected datepart is missing or a datepart exceeds its possible border.
But the check will only be done for the expected dateparts which are given by format.
If no format is given the standard dateformat for the actual locale is used.
f.e. 30.February.2007 will return false if format is 'dd.MMMM.YYYY'&lt;/p&gt;
</long-description>
          <tag line="4728" name="param" description="Date to parse for correctness" type="string|array|\Zend_Date" variable="$date">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="4728" name="param" description="(Optional) Format for parsing the date string" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4728" name="param" description="(Optional) Locale for parsing date parts" type="string|\Zend_Locale" variable="$locale">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Locale</type>
          </tag>
          <tag line="4728" name="return" description="True when all date parts are correct" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="4740">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
        <argument line="4740">
          <name>$format</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="4740">
          <name>$locale</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="4882" package="Default">
        <name>_getLocalizedToken</name>
        <docblock>
          <description>Returns the ISO Token for all localized constants</description>
          <long-description>
</long-description>
          <tag line="4875" name="param" description="Token to normalize" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4875" name="param" description="Locale to search" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4875" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="4882">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="4882">
          <name>$locale</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Date/Cities.php" hash="e36869ef9f4107133a42ef5888b4320d" package="Zend\Date">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Date"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Cities.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="34" namespace="default" package="Zend\Date\Zend\Date\Cities">
      <name>Zend_Date_Cities</name>
      <extends/>
      <full_name>\Zend_Date_Cities</full_name>
      <docblock>
        <description>Additional data for sunset/sunrise calculations</description>
        <long-description>&lt;p&gt;Holds the geographical data for all capital cities and many others worldwide
Original data from http://www.fallingrain.com/world/&lt;/p&gt;
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Date"/>
        <tag line="22" name="subpackage" description="Zend_Date_Cities"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="43" package="Default">
        <name>$cities</name>
        <default>array(
        'Abidjan'       =&gt; array('latitude' =&gt;    5.3411111</default>
        <docblock>
          <description>Array Collection of known cities</description>
          <long-description>&lt;p&gt;The array contains 'latitude' and 'longitude' for every known city&lt;/p&gt;
</long-description>
          <tag line="36" name="var" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="300" package="Default">
        <name>City</name>
        <docblock>
          <description>Returns the location from the selected city</description>
          <long-description>
</long-description>
          <tag line="290" name="param" description="City to get location for" type="string" variable="$city">
            <type by_reference="false">string</type>
          </tag>
          <tag line="290" name="param" description="Horizon to use : default: effective others are civil, nautic, astronomic" type="string" variable="$horizon">
            <type by_reference="false">string</type>
          </tag>
          <tag line="290" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="290" name="throws" description="When city is unknown" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="300">
          <name>$city</name>
          <default/>
          <type/>
        </argument>
        <argument line="300">
          <name>$horizon</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="318" package="Default">
        <name>getCityList</name>
        <docblock>
          <description>Return a list with all known cities</description>
          <long-description>
</long-description>
          <tag line="313" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Date/Exception.php" hash="6974a4f37c4c93d62f8a08ad14a5de01" package="Zend\Date">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Date"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="29">No short description for class Zend_Date_Exception</critical>
      <error line="37">No DocBlock was found for Property $operand</error>
      <error line="39">No DocBlock was found for Method __construct</error>
      <error line="45">No DocBlock was found for Method getOperand</error>
    </parse_markers>
    <include type="Require Once" line="26">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="35" namespace="default" package="Zend\Date">
      <name>Zend_Date_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Date_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="29" name="category" description="Zend"/>
        <tag line="29" name="package" description="Zend_Date"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$operand</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>__construct</name>
        <argument line="39">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="39">
          <name>$code</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$e</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$op</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>getOperand</name>
      </method>
    </class>
  </file>
  <file path="Zend/Date/DateObject.php" hash="2dd6497387d8a4fec88247d965eeae4b" package="Zend\Date">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Date"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="version" description="$Id: DateObject.php 24880 2012-06-12 20:35:18Z matthew $"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="22">No short description for class Zend_Date_DateObject</critical>
      <error line="35">No DocBlock was found for Property $_cache</error>
      <error line="36">No DocBlock was found for Property $_cacheTags</error>
      <error line="37">No DocBlock was found for Property $_defaultOffset</error>
      <error line="43">No DocBlock was found for Property $_offset</error>
      <error line="44">No DocBlock was found for Property $_syncronised</error>
      <error line="47">No DocBlock was found for Property $_dst</error>
      <notice line="913">Argument $rise is missing from the function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="true" line="29" namespace="default" package="Zend\Date\Zend\Date\DateObject">
      <name>Zend_Date_DateObject</name>
      <extends/>
      <full_name>\Zend_Date_DateObject</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Date"/>
        <tag line="22" name="subpackage" description="Zend_Date_DateObject"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="34" package="Default">
        <name>$_unixTimestamp</name>
        <default/>
        <docblock>
          <description>UNIX Timestamp</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="35" package="Default">
        <name>$_cache</name>
        <default>null</default>
      </property>
      <property final="false" static="true" visibility="protected" line="36" package="Default">
        <name>$_cacheTags</name>
        <default>false</default>
      </property>
      <property final="false" static="true" visibility="protected" line="37" package="Default">
        <name>$_defaultOffset</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="42" package="Default">
        <name>$_timezone</name>
        <default>'UTC'</default>
        <docblock>
          <description>active timezone</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" package="Default">
        <name>$_offset</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="44" package="Default">
        <name>$_syncronised</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_dst</name>
        <default>true</default>
      </property>
      <property final="false" static="true" visibility="private" line="52" package="Default">
        <name>$_monthTable</name>
        <default>array(31</default>
        <docblock>
          <description>Table of Monthdays</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="57" package="Default">
        <name>$_yearTable</name>
        <default>array(
        1970 =&gt; 0</default>
        <docblock>
          <description>Table of Years</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" line="79" package="Default">
        <name>setUnixTimestamp</name>
        <docblock>
          <description>Set this object to have a new UNIX timestamp.</description>
          <long-description>
</long-description>
          <tag line="72" name="param" description="OPTIONAL timestamp; defaults to local time using time()" type="string|integer" variable="$timestamp">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="72" name="return" description="old timestamp" type="string|integer">
            <type by_reference="false">string</type>
            <type by_reference="false">integer</type>
          </tag>
          <tag line="72" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="102" package="Default">
        <name>getUnixTimestamp</name>
        <docblock>
          <description>Returns this object's UNIX timestamp
A timestamp greater then the integer range will be returned as string
This function does not return the timestamp as object. Use copy() instead.</description>
          <long-description>
</long-description>
          <tag line="95" name="return" description="timestamp" type="integer|string">
            <type by_reference="false">integer</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="119" package="Default">
        <name>_getTime</name>
        <docblock>
          <description>Internal function.</description>
          <long-description>&lt;p&gt;Returns time().  This method exists to allow unit tests to work-around methods that might otherwise
be hard-coded to use time().  For example, this makes it possible to test isYesterday() in Date.php.&lt;/p&gt;
</long-description>
          <tag line="111" name="param" description="OPTIONAL time syncronisation value" type="integer" variable="$sync">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="111" name="return" description="timestamp" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$sync</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="146" package="Default">
        <name>mktime</name>
        <docblock>
          <description>Internal mktime function used by Zend_Date.</description>
          <long-description>&lt;p&gt;The timestamp returned by mktime() can exceed the precision of traditional UNIX timestamps,
by allowing PHP to auto-convert to using a float value.&lt;/p&gt;

&lt;p&gt;Returns a timestamp relative to 1970/01/01 00:00:00 GMT/UTC.
DST (Summer/Winter) is depriciated since php 5.1.0.
Year has to be 4 digits otherwise it would be recognised as
year 70 AD instead of 1970 AD as expected !!&lt;/p&gt;
</long-description>
          <tag line="127" name="param" description="" type="integer" variable="$hour">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="" type="integer" variable="$minute">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="" type="integer" variable="$second">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="" type="integer" variable="$month">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="" type="integer" variable="$day">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="" type="integer" variable="$year">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="127" name="param" description="OPTIONAL true = other arguments are for UTC time, false = arguments are for local time/date" type="boolean" variable="$gmt">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="127" name="return" description="timestamp (number of seconds elapsed relative to 1970/01/01 00:00:00 GMT/UTC)" type="integer|float">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$hour</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$minute</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$second</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$gmt</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="274" package="Default">
        <name>isYearLeapYear</name>
        <docblock>
          <description>Returns true, if given $year is a leap year.</description>
          <long-description>
</long-description>
          <tag line="268" name="param" description="" type="integer" variable="$year">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="268" name="return" description="true, if year is leap year" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="301" package="Default">
        <name>date</name>
        <docblock>
          <description>Internal mktime function used by Zend_Date for handling 64bit timestamps.</description>
          <long-description>&lt;p&gt;Returns a formatted date for a given timestamp.&lt;/p&gt;
</long-description>
          <tag line="291" name="param" description="format for output" type="string" variable="$format">
            <type by_reference="false">string</type>
          </tag>
          <tag line="291" name="param" description="" type="mixed" variable="$timestamp">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="291" name="param" description="OPTIONAL true = other arguments are for UTC time, false = arguments are for local time/date" type="boolean" variable="$gmt">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="291" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="301">
          <name>$format</name>
          <default/>
          <type/>
        </argument>
        <argument line="301">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="301">
          <name>$gmt</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="636" package="Default">
        <name>dayOfWeek</name>
        <docblock>
          <description>Returns the day of week for a Gregorian calendar date.</description>
          <long-description>&lt;p&gt;0 = sunday, 6 = saturday&lt;/p&gt;
</long-description>
          <tag line="627" name="param" description="" type="integer" variable="$year">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="627" name="param" description="" type="integer" variable="$month">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="627" name="param" description="" type="integer" variable="$day">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="627" name="return" description="dayOfWeek" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="636">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="636">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="636">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="674" package="Default">
        <name>getDateParts</name>
        <docblock>
          <description>Internal getDateParts function for handling 64bit timestamps, similar to:
http://www.php.net/getdate</description>
          <long-description>&lt;p&gt;Returns an array of date parts for $timestamp, relative to 1970/01/01 00:00:00 GMT/UTC.&lt;/p&gt;

&lt;p&gt;$fast specifies ALL date parts should be returned (slower)
Default is false, and excludes $dayofweek, weekday, month and timestamp from parts returned.&lt;/p&gt;
</long-description>
          <tag line="661" name="param" description="" type="mixed" variable="$timestamp">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="661" name="param" description="OPTIONAL defaults to fast (false), resulting in fewer date parts" type="boolean" variable="$fast">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="661" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="674">
          <name>$timestamp</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="674">
          <name>$fast</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="867" package="Default">
        <name>weekNumber</name>
        <docblock>
          <description>Internal getWeekNumber function for handling 64bit timestamps</description>
          <long-description>&lt;p&gt;Returns the ISO 8601 week number of a given date&lt;/p&gt;
</long-description>
          <tag line="857" name="param" description="" type="integer" variable="$year">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="857" name="param" description="" type="integer" variable="$month">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="857" name="param" description="" type="integer" variable="$day">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="857" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="867">
          <name>$year</name>
          <default/>
          <type/>
        </argument>
        <argument line="867">
          <name>$month</name>
          <default/>
          <type/>
        </argument>
        <argument line="867">
          <name>$day</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="896" package="Default">
        <name>_range</name>
        <docblock>
          <description>Internal _range function
Sets the value $a to be in the range of [0, $b]</description>
          <long-description>
</long-description>
          <tag line="889" name="param" description="- value to correct" type="float" variable="$a">
            <type by_reference="false">float</type>
          </tag>
          <tag line="889" name="param" description="- maximum range to set" type="float" variable="$b">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="896">
          <name>$a</name>
          <default/>
          <type/>
        </argument>
        <argument line="896">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="913" package="Default">
        <name>calcSun</name>
        <docblock>
          <description>Calculates the sunrise or sunset based on a location</description>
          <long-description>
</long-description>
          <tag line="906" name="param" description="Location for calculation MUST include 'latitude', 'longitude', 'horizon'" type="array" variable="$location">
            <type by_reference="false">array</type>
          </tag>
          <tag line="906" name="param" description="true: sunrise; false: sunset" type="bool" variable="$horizon">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="906" name="return" description="- false: midnight sun, integer:" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="913">
          <name>$location</name>
          <default/>
          <type/>
        </argument>
        <argument line="913">
          <name>$horizon</name>
          <default/>
          <type/>
        </argument>
        <argument line="913">
          <name>$rise</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1014" package="Default">
        <name>setTimezone</name>
        <docblock>
          <description>Sets a new timezone for calculation of $this object's gmt offset.</description>
          <long-description>&lt;p&gt;For a list of supported timezones look here: http://php.net/timezones
If no timezone can be detected or the given timezone is wrong UTC will be set.&lt;/p&gt;
</long-description>
          <tag line="1005" name="param" description="OPTIONAL timezone for date calculation; defaults to date_default_timezone_get()" type="string" variable="$zone">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1005" name="return" description="Provides fluent interface" type="\Zend_Date_DateObject">
            <type by_reference="false">\Zend_Date_DateObject</type>
          </tag>
          <tag line="1005" name="throws" description="" type="\Zend_Date_Exception">
            <type by_reference="false">\Zend_Date_Exception</type>
          </tag>
        </docblock>
        <argument line="1014">
          <name>$zone</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1051" package="Default">
        <name>getTimezone</name>
        <docblock>
          <description>Return the timezone of $this object.</description>
          <long-description>&lt;p&gt;The timezone is initially set when the object is instantiated.&lt;/p&gt;
</long-description>
          <tag line="1045" name="return" description="actual set timezone string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="1063" package="Default">
        <name>getGmtOffset</name>
        <docblock>
          <description>Return the offset to GMT of $this object's timezone.</description>
          <long-description>&lt;p&gt;The offset to GMT is initially set when the object is instantiated using the currently,
in effect, default timezone for PHP functions.&lt;/p&gt;
</long-description>
          <tag line="1056" name="return" description="seconds difference between GMT timezone and timezone when object was instantiated" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="1084" package="Default">
        <name>_getTagSupportForCache</name>
        <docblock>
          <description>Internal method to check if the given cache supports tags</description>
          <long-description>
</long-description>
          <tag line="1079" name="param" description="" type="\Zend_Cache" variable="$cache">
            <type by_reference="false">\Zend_Cache</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Loader/PluginLoader.php" hash="5e82d4d8acb758d2ac7ad6a9c2497fe8" package="Zend\Loader\PluginLoader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="subpackage" description="PluginLoader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: PluginLoader.php 24877 2012-06-04 14:04:53Z adamlundrigan $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Loader/PluginLoader/Interface.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Loader.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Loader\PluginLoader">
      <name>Zend_Loader_PluginLoader</name>
      <extends/>
      <full_name>\Zend_Loader_PluginLoader</full_name>
      <docblock>
        <description>Generic plugin class loader</description>
        <long-description>
</long-description>
        <tag line="29" name="category" description="Zend"/>
        <tag line="29" name="package" description="Zend_Loader"/>
        <tag line="29" name="subpackage" description="PluginLoader"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Loader_PluginLoader_Interface</implements>
      <property final="false" static="true" visibility="protected" line="44" package="Default">
        <name>$_includeFileCache</name>
        <default/>
        <docblock>
          <description>Class map cache file</description>
          <long-description>
</long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_loadedPluginPaths</name>
        <default>array()</default>
        <docblock>
          <description>Instance loaded plugin paths</description>
          <long-description>
</long-description>
          <tag line="46" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_loadedPlugins</name>
        <default>array()</default>
        <docblock>
          <description>Instance loaded plugins</description>
          <long-description>
</long-description>
          <tag line="53" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$_prefixToPaths</name>
        <default>array()</default>
        <docblock>
          <description>Instance registry property</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="72" package="Default">
        <name>$_staticLoadedPluginPaths</name>
        <default>array()</default>
        <docblock>
          <description>Statically loaded plugin path mappings</description>
          <long-description>
</long-description>
          <tag line="67" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="79" package="Default">
        <name>$_staticLoadedPlugins</name>
        <default>array()</default>
        <docblock>
          <description>Statically loaded plugins</description>
          <long-description>
</long-description>
          <tag line="74" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="86" package="Default">
        <name>$_staticPrefixToPaths</name>
        <default>array()</default>
        <docblock>
          <description>Static registry property</description>
          <long-description>
</long-description>
          <tag line="81" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="93" package="Default">
        <name>$_useStaticRegistry</name>
        <default>null</default>
        <docblock>
          <description>Whether to use a statically named registry for loading plugins</description>
          <long-description>
</long-description>
          <tag line="88" name="var" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="101" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="95" name="param" description="" type="array" variable="$prefixToPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="95" name="param" description="OPTIONAL" type="string" variable="$staticRegistryName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$prefixToPaths</name>
          <default>array()</default>
          <type>Array</type>
        </argument>
        <argument line="101">
          <name>$staticRegistryName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="124" package="Default">
        <name>_formatPrefix</name>
        <docblock>
          <description>Format prefix for internal use</description>
          <long-description>
</long-description>
          <tag line="118" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="141" package="Default">
        <name>addPrefixPath</name>
        <docblock>
          <description>Add prefixed paths to the registry of paths</description>
          <long-description>
</long-description>
          <tag line="134" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="141">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="170" package="Default">
        <name>getPaths</name>
        <docblock>
          <description>Get path stack</description>
          <long-description>
</long-description>
          <tag line="164" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="164" name="return" description="False if prefix does not exist, array otherwise" type="false|array">
            <type by_reference="false">false</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$prefix</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="202" package="Default">
        <name>clearPaths</name>
        <docblock>
          <description>Clear path stack</description>
          <long-description>
</long-description>
          <tag line="196" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="196" name="return" description="False only if $prefix does not exist" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$prefix</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="239" package="Default">
        <name>removePrefixPath</name>
        <docblock>
          <description>Remove a prefix (or prefixed-path) from the registry</description>
          <long-description>
</long-description>
          <tag line="232" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="232" name="param" description="OPTIONAL" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="232" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="239">
          <name>$path</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="273" package="Default">
        <name>_formatName</name>
        <docblock>
          <description>Normalize plugin name</description>
          <long-description>
</long-description>
          <tag line="267" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="267" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="273">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="284" package="Default">
        <name>isLoaded</name>
        <docblock>
          <description>Whether or not a Plugin by a specific name is loaded</description>
          <long-description>
</long-description>
          <tag line="278" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="278" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="300" package="Default">
        <name>getClassName</name>
        <docblock>
          <description>Return full class name for a named plugin</description>
          <long-description>
</long-description>
          <tag line="294" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="return" description="False if class not found, class name otherwise" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="300">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="320" package="Default">
        <name>getClassPath</name>
        <docblock>
          <description>Get path to plugin class</description>
          <long-description>
</long-description>
          <tag line="314" name="param" description="" type="mixed" variable="$name">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="314" name="return" description="False if not found" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="356" package="Default">
        <name>load</name>
        <docblock>
          <description>Load a plugin via the name provided</description>
          <long-description>
</long-description>
          <tag line="346" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="346" name="param" description="Whether or not to throw exceptions if the class is not resolved" type="bool" variable="$throwExceptions">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="346" name="return" description="Class name of loaded class; false if $throwExceptions if false and no class found" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
          <tag line="346" name="throws" description="if class not found" type="\Zend_Loader_Exception">
            <type by_reference="false">\Zend_Loader_Exception</type>
          </tag>
        </docblock>
        <argument line="356">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="356">
          <name>$throwExceptions</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="433" package="Default">
        <name>setIncludeFileCache</name>
        <docblock>
          <description>Set path to class file cache</description>
          <long-description>&lt;p&gt;Specify a path to a file that will add include_once statements for each
plugin class loaded. This is an opt-in feature for performance purposes.&lt;/p&gt;
</long-description>
          <tag line="423" name="param" description="" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="423" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="423" name="throws" description="if file is not writeable or path does not exist" type="\Zend_Loader_PluginLoader_Exception">
            <type by_reference="false">\Zend_Loader_PluginLoader_Exception</type>
          </tag>
        </docblock>
        <argument line="433">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="461" package="Default">
        <name>getIncludeFileCache</name>
        <docblock>
          <description>Retrieve class file cache path</description>
          <long-description>
</long-description>
          <tag line="456" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="472" package="Default">
        <name>_appendIncFile</name>
        <docblock>
          <description>Append an include_once statement to the class file cache</description>
          <long-description>
</long-description>
          <tag line="466" name="param" description="" type="string" variable="$incFile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="466" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="472">
          <name>$incFile</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Loader/Exception.php" hash="f4b2b2e104e4a9af7fed920e6776a6d4" package="Zend\Loader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="27">No short description for class Zend_Loader_Exception</critical>
    </parse_markers>
    <include type="Require Once" line="25">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="34" namespace="default" package="Zend\Loader">
      <name>Zend_Loader_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Loader_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="27" name="category" description="Zend"/>
        <tag line="27" name="package" description="Zend_Loader"/>
        <tag line="27" name="uses" description="\Zend_Exception" refers="\Zend_Exception"/>
        <tag line="27" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="27" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Loader/PluginLoader/Exception.php" hash="78a7e41ddf018ecf14ab400d03390b8f" package="Zend\Loader\PluginLoader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="subpackage" description="PluginLoader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Loader/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Loader\PluginLoader">
      <name>Zend_Loader_PluginLoader_Exception</name>
      <extends>\Zend_Loader_Exception</extends>
      <full_name>\Zend_Loader_PluginLoader_Exception</full_name>
      <docblock>
        <description>Plugin class loader exceptions</description>
        <long-description>
</long-description>
        <tag line="28" name="category" description="Zend"/>
        <tag line="28" name="package" description="Zend_Loader"/>
        <tag line="28" name="subpackage" description="PluginLoader"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Loader/PluginLoader/Interface.php" hash="c92cf12295251dffc244b7f3da2e663d" package="Zend\Loader\PluginLoader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="subpackage" description="PluginLoader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <interface namespace="default" line="32" package="Zend\Loader\PluginLoader">
      <name>Zend_Loader_PluginLoader_Interface</name>
      <extends/>
      <full_name>\Zend_Loader_PluginLoader_Interface</full_name>
      <docblock>
        <description>Plugin class loader interface</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Loader"/>
        <tag line="23" name="subpackage" description="PluginLoader"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>addPrefixPath</name>
        <docblock>
          <description>Add prefixed paths to the registry of paths</description>
          <long-description>
</long-description>
          <tag line="34" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="41">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="50" package="Default">
        <name>removePrefixPath</name>
        <docblock>
          <description>Remove a prefix (or prefixed-path) from the registry</description>
          <long-description>
</long-description>
          <tag line="43" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="OPTIONAL" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$path</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="58" package="Default">
        <name>isLoaded</name>
        <docblock>
          <description>Whether or not a Helper by a specific name</description>
          <long-description>
</long-description>
          <tag line="52" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="66" package="Default">
        <name>getClassName</name>
        <docblock>
          <description>Return full class name for a named helper</description>
          <long-description>
</long-description>
          <tag line="60" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="74" package="Default">
        <name>load</name>
        <docblock>
          <description>Load a helper via the name provided</description>
          <long-description>
</long-description>
          <tag line="68" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Zend/Loader/Autoloader.php" hash="9d4c3e7f957e1cc7f9e29d6d426af421" package="Zend\Loader\Autoloader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="subpackage" description="Autoloader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="version" description="$Id: Autoloader.php 25024 2012-07-30 15:08:15Z rob $"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="37">No short description for property $_instance</critical>
      <critical line="42">No short description for property $_autoloaders</critical>
      <critical line="47">No short description for property $_defaultAutoloader</critical>
      <critical line="52">No short description for property $_fallbackAutoloader</critical>
      <critical line="57">No short description for property $_internalAutoloader</critical>
      <critical line="62">No short description for property $_namespaces</critical>
      <critical line="70">No short description for property $_namespaceAutoloaders</critical>
      <critical line="75">No short description for property $_suppressNotFoundWarnings</critical>
      <critical line="80">No short description for property $_zfPath</critical>
      <error line="254">No DocBlock was found for Method setZfPath</error>
      <error line="275">No DocBlock was found for Method getZfPath</error>
    </parse_markers>
    <include type="Require Once" line="24">
      <name>Zend/Loader.php</name>
    </include>
    <class final="false" abstract="false" line="35" namespace="default" package="Zend\Loader\Autoloader">
      <name>Zend_Loader_Autoloader</name>
      <extends/>
      <full_name>\Zend_Loader_Autoloader</full_name>
      <docblock>
        <description>Autoloader stack and namespace autoloader</description>
        <long-description>
</long-description>
        <tag line="26" name="uses" description="\Zend_Loader_Autoloader" refers="\Zend_Loader_Autoloader"/>
        <tag line="26" name="package" description="Zend_Loader"/>
        <tag line="26" name="subpackage" description="Autoloader"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="40" package="Default">
        <name>$_instance</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="37" name="var" description="Singleton instance" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$_autoloaders</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="42" name="var" description="Concrete autoloader callback implementations" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$_defaultAutoloader</name>
        <default>array('Zend_Loader'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="47" name="var" description="Default autoloader callback" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$_fallbackAutoloader</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="52" name="var" description="Whether or not to act as a fallback autoloader" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$_internalAutoloader</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="57" name="var" description="Callback for internal autoloader implementation" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$_namespaces</name>
        <default>array(
        'Zend_'  =&gt; true</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="62" name="var" description="Supported namespaces 'Zend' and 'ZendX' by default." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$_namespaceAutoloaders</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="70" name="var" description="Namespace-specific autoloaders" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" package="Default">
        <name>$_suppressNotFoundWarnings</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="75" name="var" description="Whether or not to suppress file not found warnings" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="83" package="Default">
        <name>$_zfPath</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="80" name="var" description="" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="90" package="Default">
        <name>getInstance</name>
        <docblock>
          <description>Retrieve singleton instance</description>
          <long-description>
</long-description>
          <tag line="85" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="103" package="Default">
        <name>resetInstance</name>
        <docblock>
          <description>Reset the singleton instance</description>
          <long-description>
</long-description>
          <tag line="98" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="114" package="Default">
        <name>autoload</name>
        <docblock>
          <description>Autoload a class</description>
          <long-description>
</long-description>
          <tag line="108" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="143" package="Default">
        <name>setDefaultAutoloader</name>
        <docblock>
          <description>Set the default autoloader implementation</description>
          <long-description>
</long-description>
          <tag line="137" name="param" description="PHP callback" type="string|array" variable="$callback">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="137" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="158" package="Default">
        <name>getDefaultAutoloader</name>
        <docblock>
          <description>Retrieve the default autoloader callback</description>
          <long-description>
</long-description>
          <tag line="153" name="return" description="PHP Callback" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="169" package="Default">
        <name>setAutoloaders</name>
        <docblock>
          <description>Set several autoloader callbacks at once</description>
          <long-description>
</long-description>
          <tag line="163" name="param" description="Array of PHP callbacks (or Zend_Loader_Autoloader_Interface implementations) to act as autoloaders" type="array" variable="$autoloaders">
            <type by_reference="false">array</type>
          </tag>
          <tag line="163" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$autoloaders</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="180" package="Default">
        <name>getAutoloaders</name>
        <docblock>
          <description>Get attached autoloader implementations</description>
          <long-description>
</long-description>
          <tag line="175" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="191" package="Default">
        <name>getNamespaceAutoloaders</name>
        <docblock>
          <description>Return all autoloaders for a given namespace</description>
          <long-description>
</long-description>
          <tag line="185" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="206" package="Default">
        <name>registerNamespace</name>
        <docblock>
          <description>Register a namespace to autoload</description>
          <long-description>
</long-description>
          <tag line="200" name="param" description="" type="string|array" variable="$namespace">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="200" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="228" package="Default">
        <name>unregisterNamespace</name>
        <docblock>
          <description>Unload a registered autoload namespace</description>
          <long-description>
</long-description>
          <tag line="222" name="param" description="" type="string|array" variable="$namespace">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="222" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="249" package="Default">
        <name>getRegisteredNamespaces</name>
        <docblock>
          <description>Get a list of registered autoload namespaces</description>
          <long-description>
</long-description>
          <tag line="244" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="254" package="Default">
        <name>setZfPath</name>
        <argument line="254">
          <name>$spec</name>
          <default/>
          <type/>
        </argument>
        <argument line="254">
          <name>$version</name>
          <default>'latest'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="275" package="Default">
        <name>getZfPath</name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="286" package="Default">
        <name>suppressNotFoundWarnings</name>
        <docblock>
          <description>Get or set the value of the "suppress not found warnings" flag</description>
          <long-description>
</long-description>
          <tag line="280" name="param" description="" type="null|bool" variable="$flag">
            <type by_reference="false">null</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="280" name="return" description="Returns boolean if no argument is passed, object instance otherwise" type="bool|\Zend_Loader_Autoloader">
            <type by_reference="false">bool</type>
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="286">
          <name>$flag</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="301" package="Default">
        <name>setFallbackAutoloader</name>
        <docblock>
          <description>Indicate whether or not this autoloader should be a fallback autoloader</description>
          <long-description>
</long-description>
          <tag line="295" name="param" description="" type="bool" variable="$flag">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="295" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="301">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="312" package="Default">
        <name>isFallbackAutoloader</name>
        <docblock>
          <description>Is this instance acting as a fallback autoloader?</description>
          <long-description>
</long-description>
          <tag line="307" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="327" package="Default">
        <name>getClassAutoloaders</name>
        <docblock>
          <description>Get autoloaders to use when matching class</description>
          <long-description>&lt;p&gt;Determines if the class matches a registered namespace, and, if so,
returns only the autoloaders for that namespace. Otherwise, it returns
all non-namespaced autoloaders.&lt;/p&gt;
</long-description>
          <tag line="317" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="317" name="return" description="Array of autoloaders to use" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="327">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="378" package="Default">
        <name>unshiftAutoloader</name>
        <docblock>
          <description>Add an autoloader to the beginning of the stack</description>
          <long-description>
</long-description>
          <tag line="371" name="param" description="PHP callback or Zend_Loader_Autoloader_Interface implementation" type="object|array|string" variable="$callback">
            <type by_reference="false">object</type>
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="371" name="param" description="Specific namespace(s) under which to register callback" type="string|array" variable="$namespace">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="371" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="378">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
        <argument line="378">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="401" package="Default">
        <name>pushAutoloader</name>
        <docblock>
          <description>Append an autoloader to the autoloader stack</description>
          <long-description>
</long-description>
          <tag line="394" name="param" description="PHP callback or Zend_Loader_Autoloader_Interface implementation" type="object|array|string" variable="$callback">
            <type by_reference="false">object</type>
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="394" name="param" description="Specific namespace(s) under which to register callback" type="string|array" variable="$namespace">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="394" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="401">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
        <argument line="401">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="424" package="Default">
        <name>removeAutoloader</name>
        <docblock>
          <description>Remove an autoloader from the autoloader stack</description>
          <long-description>
</long-description>
          <tag line="417" name="param" description="PHP callback or Zend_Loader_Autoloader_Interface implementation" type="object|array|string" variable="$callback">
            <type by_reference="false">object</type>
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="417" name="param" description="Specific namespace(s) from which to remove autoloader" type="null|string|array" variable="$namespace">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="417" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="424">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
        <argument line="424">
          <name>$namespace</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="460" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;Registers instance with spl_autoload stack&lt;/p&gt;
</long-description>
          <tag line="453" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="472" package="Default">
        <name>_autoload</name>
        <docblock>
          <description>Internal autoloader implementation</description>
          <long-description>
</long-description>
          <tag line="466" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="466" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="472">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="494" package="Default">
        <name>_setNamespaceAutoloaders</name>
        <docblock>
          <description>Set autoloaders for a specific namespace</description>
          <long-description>
</long-description>
          <tag line="487" name="param" description="" type="array" variable="$autoloaders">
            <type by_reference="false">array</type>
          </tag>
          <tag line="487" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="487" name="return" description="" type="\Zend_Loader_Autoloader">
            <type by_reference="false">\Zend_Loader_Autoloader</type>
          </tag>
        </docblock>
        <argument line="494">
          <name>$autoloaders</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="494">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="508" package="Default">
        <name>_getVersionPath</name>
        <docblock>
          <description>Retrieve the filesystem path for the requested ZF version</description>
          <long-description>
</long-description>
          <tag line="501" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="501" name="param" description="" type="string" variable="$version">
            <type by_reference="false">string</type>
          </tag>
          <tag line="501" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="508">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="508">
          <name>$version</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="532" package="Default">
        <name>_getVersionType</name>
        <docblock>
          <description>Retrieve the ZF version type</description>
          <long-description>
</long-description>
          <tag line="525" name="param" description="" type="string" variable="$version">
            <type by_reference="false">string</type>
          </tag>
          <tag line="525" name="return" description="&quot;latest&quot;, &quot;major&quot;, &quot;minor&quot;, or &quot;specific&quot;" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="525" name="throws" description="if version string contains too many dots" type="\Zend_Loader_Exception">
            <type by_reference="false">\Zend_Loader_Exception</type>
          </tag>
        </docblock>
        <argument line="532">
          <name>$version</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="559" package="Default">
        <name>_getAvailableVersions</name>
        <docblock>
          <description>Get available versions for the version type requested</description>
          <long-description>
</long-description>
          <tag line="552" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="552" name="param" description="" type="string" variable="$version">
            <type by_reference="false">string</type>
          </tag>
          <tag line="552" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="559">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
        <argument line="559">
          <name>$version</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Loader/Autoloader/Interface.php" hash="b1845a4e9c1f28777cd012ac748d1ca9" package="Zend\Loader\Autoloader">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Loader"/>
      <tag line="2" name="subpackage" description="Autoloader"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <interface namespace="default" line="31" package="Zend\Loader\Autoloader">
      <name>Zend_Loader_Autoloader_Interface</name>
      <extends/>
      <full_name>\Zend_Loader_Autoloader_Interface</full_name>
      <docblock>
        <description>Autoloader interface</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Loader"/>
        <tag line="23" name="subpackage" description="Autoloader"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="42" package="Default">
        <name>autoload</name>
        <docblock>
          <description>Autoload a class</description>
          <long-description>
</long-description>
          <tag line="33" name="abstract" description=""/>
          <tag line="33" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="return" description="False [if unable to load $class] get_class($class) [if $class is successfully loaded]" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Zend/Exception.php" hash="fbc5f5ea9fce0426cb52c4d33a41a2df" package="Zend">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="22">No short description for class Zend_Exception</critical>
      <critical line="30">No short description for property $_previous</critical>
    </parse_markers>
    <class final="false" abstract="false" line="28" namespace="default" package="Zend">
      <name>Zend_Exception</name>
      <extends>\Exception</extends>
      <full_name>\Zend_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="33" package="Default">
        <name>$_previous</name>
        <default>null</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="30" name="var" description="" type="null|\Exception">
            <type by_reference="false">null</type>
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="43" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Construct the exception</description>
          <long-description>
</long-description>
          <tag line="35" name="param" description="" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="param" description="" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="35" name="param" description="" type="\Exception" variable="$previous">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="35" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$msg</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="43">
          <name>$code</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="43">
          <name>$previous</name>
          <default>null</default>
          <type>Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>__call</name>
        <docblock>
          <description>Overloading</description>
          <long-description>&lt;p&gt;For PHP &amp;lt; 5.3.0, provides access to the getPrevious() method.&lt;/p&gt;
</long-description>
          <tag line="53" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="53" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="62">
          <name>$args</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>__toString</name>
        <docblock>
          <description>String representation of the exception</description>
          <long-description>
</long-description>
          <tag line="70" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="92" package="Default">
        <name>_getPrevious</name>
        <docblock>
          <description>Returns previous Exception</description>
          <long-description>
</long-description>
          <tag line="87" name="return" description="" type="\Exception|null">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Request/Http.php" hash="252ffcba33cfed647dda432b90ceeff5" package="Zend\Amf\Request">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Request"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Http.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Request.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Amf\Request">
      <name>Zend_Amf_Request_Http</name>
      <extends>\Zend_Amf_Request</extends>
      <full_name>\Zend_Amf_Request_Http</full_name>
      <docblock>
        <description>AMF Request object -- Request via HTTP</description>
        <long-description>&lt;p&gt;Extends {@link Zend_Amf_Request} to accept a request via HTTP. Request is
built at construction time using a raw POST; if no data is available, the
request is declared a fault.&lt;/p&gt;
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Request"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$_rawRequest</name>
        <default/>
        <docblock>
          <description>Raw AMF request</description>
          <long-description>
</long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="55" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;Attempts to read from php://input to get raw POST request; if an error
occurs in doing so, or if the AMF body is invalid, the request is declared a
fault.&lt;/p&gt;
</long-description>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="76" package="Default">
        <name>getRawRequest</name>
        <docblock>
          <description>Retrieve raw AMF Request</description>
          <long-description>
</long-description>
          <tag line="71" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Response.php" hash="3a9351025d405ca92668e22731bdb690" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Response.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="40">No short description for property $_objectEncoding</critical>
      <critical line="57">No short description for property $_outputStream</critical>
    </parse_markers>
    <include type="Require Once" line="23">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Amf/Parse/OutputStream.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Amf/Parse/Amf0/Serializer.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Amf">
      <name>Zend_Amf_Response</name>
      <extends/>
      <full_name>\Zend_Amf_Response</full_name>
      <docblock>
        <description>Handles converting the PHP object ready for response back into AMF</description>
        <long-description>
</long-description>
        <tag line="31" name="package" description="Zend_Amf"/>
        <tag line="31" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="31" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_objectEncoding</name>
        <default>0</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="40" name="var" description="Object encoding for response" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$_bodies</name>
        <default>array()</default>
        <docblock>
          <description>Array of Zend_Amf_Value_MessageBody objects</description>
          <long-description>
</long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$_headers</name>
        <default>array()</default>
        <docblock>
          <description>Array of Zend_Amf_Value_MessageHeader objects</description>
          <long-description>
</long-description>
          <tag line="51" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$_outputStream</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="57" name="var" description="" type="\Zend_Amf_Parse_OutputStream">
            <type by_reference="false">\Zend_Amf_Parse_OutputStream</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="67" package="Default">
        <name>finalize</name>
        <docblock>
          <description>Instantiate new output stream and start serialization</description>
          <long-description>
</long-description>
          <tag line="62" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="81" package="Default">
        <name>writeMessage</name>
        <docblock>
          <description>Serialize the PHP data types back into Actionscript and
create and AMF stream.</description>
          <long-description>
</long-description>
          <tag line="74" name="param" description="" type="\Zend_Amf_Parse_OutputStream" variable="$stream">
            <type by_reference="false">\Zend_Amf_Parse_OutputStream</type>
          </tag>
          <tag line="74" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$stream</name>
          <default/>
          <type>Zend_Amf_Parse_OutputStream</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="135" package="Default">
        <name>getResponse</name>
        <docblock>
          <description>Return the output stream content</description>
          <long-description>
</long-description>
          <tag line="130" name="return" description="The contents of the output stream" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="145" package="Default">
        <name>__toString</name>
        <docblock>
          <description>Return the output stream content</description>
          <long-description>
</long-description>
          <tag line="140" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="156" package="Default">
        <name>addAmfBody</name>
        <docblock>
          <description>Add an AMF body to be sent to the Flash Player</description>
          <long-description>
</long-description>
          <tag line="150" name="param" description="" type="\Zend_Amf_Value_MessageBody" variable="$body">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
          <tag line="150" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$body</name>
          <default/>
          <type>Zend_Amf_Value_MessageBody</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="167" package="Default">
        <name>getAmfBodies</name>
        <docblock>
          <description>Return an array of AMF bodies to be serialized</description>
          <long-description>
</long-description>
          <tag line="162" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="178" package="Default">
        <name>addAmfHeader</name>
        <docblock>
          <description>Add an AMF Header to be sent back to the flash player</description>
          <long-description>
</long-description>
          <tag line="172" name="param" description="" type="\Zend_Amf_Value_MessageHeader" variable="$header">
            <type by_reference="false">\Zend_Amf_Value_MessageHeader</type>
          </tag>
          <tag line="172" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$header</name>
          <default/>
          <type>Zend_Amf_Value_MessageHeader</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="189" package="Default">
        <name>getAmfHeaders</name>
        <docblock>
          <description>Retrieve attached AMF message headers</description>
          <long-description>
</long-description>
          <tag line="184" name="return" description="Array of Zend_Amf_Value_MessageHeader objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="200" package="Default">
        <name>setObjectEncoding</name>
        <docblock>
          <description>Set the AMF encoding that will be used for serialization</description>
          <long-description>
</long-description>
          <tag line="194" name="param" description="" type="int" variable="$encoding">
            <type by_reference="false">int</type>
          </tag>
          <tag line="194" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$encoding</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Deserializer.php" hash="ce9c06d1051ca076da79dd9f4cd88528" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Deserializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <notice line="64">Name of argument $markerType does not match with function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="true" line="36" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_Deserializer</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_Deserializer</full_name>
      <docblock>
        <description>Abstract cass that all deserializer must implement.</description>
        <long-description>&lt;p&gt;Logic for deserialization of the AMF envelop is based on resources supplied
by Adobe Blaze DS. For and example of deserialization please review the BlazeDS
source tree.&lt;/p&gt;
</long-description>
        <tag line="23" name="see" description="\http://opensource.adobe.com/svn/opensource/blazeds/trunk/modules/core/src/java/flex/messaging/io/amf/" refers="\http://opensource.adobe.com/svn/opensource/blazeds/trunk/modules/core/src/java/flex/messaging/io/amf/"/>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Parse"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_stream</name>
        <default/>
        <docblock>
          <description>The raw string that represents the AMF request.</description>
          <long-description>
</long-description>
          <tag line="38" name="var" description="" type="\Zend_Amf_Parse_InputStream">
            <type by_reference="false">\Zend_Amf_Parse_InputStream</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="51" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="45" name="param" description="" type="\Zend_Amf_Parse_InputStream" variable="$stream">
            <type by_reference="false">\Zend_Amf_Parse_InputStream</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$stream</name>
          <default/>
          <type>Zend_Amf_Parse_InputStream</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="64" package="Default">
        <name>readTypeMarker</name>
        <docblock>
          <description>Checks for AMF marker types and calls the appropriate methods
for deserializing those marker types. Markers are the data type of
the following value.</description>
          <long-description>
</long-description>
          <tag line="56" name="param" description="" type="int" variable="$typeMarker">
            <type by_reference="false">int</type>
          </tag>
          <tag line="56" name="return" description="Whatever the data type is of the marker in php" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$markerType</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Amf3/Deserializer.php" hash="ca506acc01da60b3599f2b35af2eb77b" package="Zend\Amf\Parse\Amf3">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse_Amf3"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Deserializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Parse/Deserializer.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Amf/Parse/TypeLoader.php</name>
    </include>
    <class final="false" abstract="false" line="40" namespace="default" package="Zend\Amf\Parse\Amf3">
      <name>Zend_Amf_Parse_Amf3_Deserializer</name>
      <extends>\Zend_Amf_Parse_Deserializer</extends>
      <full_name>\Zend_Amf_Parse_Amf3_Deserializer</full_name>
      <docblock>
        <description>Read an AMF3 input stream and convert it into PHP data types.</description>
        <long-description>
</long-description>
        <tag line="29" name="todo" description="readObject to handle Typed Objects"/>
        <tag line="29" name="todo" description="readXMLStrimg to be implemented."/>
        <tag line="29" name="todo" description="Class could be implemented as Factory Class with each data type it's own class."/>
        <tag line="29" name="package" description="Zend_Amf"/>
        <tag line="29" name="subpackage" description="Parse_Amf3"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_objectCount</name>
        <default/>
        <docblock>
          <description>Total number of objects in the referenceObject array</description>
          <long-description>
</long-description>
          <tag line="42" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_referenceObjects</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference objects per amf body</description>
          <long-description>
</long-description>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_referenceStrings</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference strings per amf body</description>
          <long-description>
</long-description>
          <tag line="54" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_referenceDefinitions</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference class definitions per body</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>readTypeMarker</name>
        <docblock>
          <description>Read AMF markers and dispatch for deserialization</description>
          <long-description>&lt;p&gt;Checks for AMF marker types and calls the appropriate methods
for deserializing those marker types. markers are the data type of
the following value.&lt;/p&gt;
</long-description>
          <tag line="66" name="param" description="" type="integer" variable="$typeMarker">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="66" name="return" description="Whatever the corresponding PHP data type is" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="66" name="throws" description="for unidentified marker type" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$typeMarker</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="134" package="Default">
        <name>readInteger</name>
        <docblock>
          <description>Read and deserialize an integer</description>
          <long-description>&lt;p&gt;AMF 3 represents smaller integers with fewer bytes using the most
significant bit of each byte. The worst case uses 32-bits
to represent a 29-bit number, which is what we would have
done with no compression.
- 0x00000000 - 0x0000007F : 0xxxxxxx
- 0x00000080 - 0x00003FFF : 1xxxxxxx 0xxxxxxx
- 0x00004000 - 0x001FFFFF : 1xxxxxxx 1xxxxxxx 0xxxxxxx
- 0x00200000 - 0x3FFFFFFF : 1xxxxxxx 1xxxxxxx 1xxxxxxx xxxxxxxx
- 0x40000000 - 0xFFFFFFFF : throw range exception&lt;/p&gt;

&lt;p&gt;0x04 -&gt; integer type code, followed by up to 4 bytes of data.&lt;/p&gt;

&lt;p&gt;Parsing integers on OSFlash for the AMF3 integer data format:&lt;/p&gt;
</long-description>
          <tag line="115" name="link" description="http://osflash.org/amf3/parsing_integers" link="http://osflash.org/amf3/parsing_integers"/>
          <tag line="115" name="return" description="" type="int|float">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="176" package="Default">
        <name>readString</name>
        <docblock>
          <description>Read and deserialize a string</description>
          <long-description>&lt;p&gt;Strings can be sent as a reference to a previously
occurring String by using an index to the implicit string reference table.
Strings are encoding using UTF-8 - however the header may either
describe a string literal or a string reference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;string = 0x06 string-data&lt;/li&gt;
&lt;li&gt;string-data = integer-data [ modified-utf-8 ]&lt;/li&gt;
&lt;li&gt;modified-utf-8 = *OCTET&lt;/li&gt;
&lt;/ul&gt;
</long-description>
          <tag line="162" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="213" package="Default">
        <name>readDate</name>
        <docblock>
          <description>Read and deserialize a date</description>
          <long-description>&lt;p&gt;Data is the number of milliseconds elapsed since the epoch
of midnight, 1st Jan 1970 in the UTC time zone.
Local time zone information is not sent to flash.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date = 0x08 integer-data [ number-data ]&lt;/li&gt;
&lt;/ul&gt;
</long-description>
          <tag line="202" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="240" package="Default">
        <name>readArray</name>
        <docblock>
          <description>Read amf array to PHP array</description>
          <long-description>&lt;ul&gt;
&lt;li&gt;array = 0x09 integer-data ( [ 1OCTET *amf3-data ] | [OCTET *amf3-data 1] | [ OCTET *amf-data ] )&lt;/li&gt;
&lt;/ul&gt;
</long-description>
          <tag line="233" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="279" package="Default">
        <name>readObject</name>
        <docblock>
          <description>Read an object from the AMF stream and convert it into a PHP object</description>
          <long-description>
</long-description>
          <tag line="273" name="todo" description="Rather than using an array of traitsInfo create Zend_Amf_Value_TraitsInfo"/>
          <tag line="273" name="return" description="" type="object|array">
            <type by_reference="false">object</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="415" package="Default">
        <name>readXmlString</name>
        <docblock>
          <description>Convert XML to SimpleXml
If user wants DomDocument they can use dom_import_simplexml</description>
          <long-description>
</long-description>
          <tag line="409" name="return" description="Object" type="\SimpleXml">
            <type by_reference="false">\SimpleXml</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Amf3/Serializer.php" hash="c5e534a78ea89c88ce0a81cf480855eb" package="Zend\Amf\Parse\Amf3">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse_Amf3"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Serializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <notice line="183">Name of argument $int does not match with function Docblock</notice>
      <notice line="412">Name of argument $object does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="28">
      <name>Zend/Amf/Parse/Serializer.php</name>
    </include>
    <include type="Require Once" line="31">
      <name>Zend/Amf/Parse/TypeLoader.php</name>
    </include>
    <class final="false" abstract="false" line="41" namespace="default" package="Zend\Amf\Parse\Amf3">
      <name>Zend_Amf_Parse_Amf3_Serializer</name>
      <extends>\Zend_Amf_Parse_Serializer</extends>
      <full_name>\Zend_Amf_Parse_Amf3_Serializer</full_name>
      <docblock>
        <description>Detect PHP object type and convert it to a corresponding AMF3 object type</description>
        <long-description>
</long-description>
        <tag line="33" name="package" description="Zend_Amf"/>
        <tag line="33" name="subpackage" description="Parse_Amf3"/>
        <tag line="33" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="33" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_strEmpty</name>
        <default>''</default>
        <docblock>
          <description>A constant empty string</description>
          <long-description>
</long-description>
          <tag line="43" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$_referenceObjects</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference objects per amf body</description>
          <long-description>
</long-description>
          <tag line="49" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$_referenceStrings</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference strings per amf body</description>
          <long-description>
</long-description>
          <tag line="55" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$_referenceDefinitions</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference class definitions, indexed by classname</description>
          <long-description>
</long-description>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="79" package="Default">
        <name>writeTypeMarker</name>
        <docblock>
          <description>Serialize PHP types to AMF3 and write to stream</description>
          <long-description>&lt;p&gt;Checks to see if the type was declared and then either
auto negotiates the type or use the user defined markerType to
serialize the data from php back to AMF3&lt;/p&gt;
</long-description>
          <tag line="67" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="int" variable="$markerType">
            <type by_reference="false">int</type>
          </tag>
          <tag line="67" name="param" description="" type="mixed" variable="$dataByVal">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="79">
          <name>$markerType</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="79">
          <name>$dataByVal</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="183" package="Default">
        <name>writeInteger</name>
        <docblock>
          <description>Write an AMF3 integer</description>
          <long-description>
</long-description>
          <tag line="177" name="param" description="" type="int|float" variable="$data">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="177" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$int</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="217" package="Default">
        <name>writeBinaryString</name>
        <docblock>
          <description>Send string to output stream, without trying to reference it.</description>
          <long-description>&lt;p&gt;The string is prepended with strlen($string) &amp;lt;&amp;lt; 1 | 0x01&lt;/p&gt;
</long-description>
          <tag line="210" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="210" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="231" package="Default">
        <name>writeString</name>
        <docblock>
          <description>Send string to output stream</description>
          <long-description>
</long-description>
          <tag line="225" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="225" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="259" package="Default">
        <name>writeByteArray</name>
        <docblock>
          <description>Send ByteArray to output stream</description>
          <long-description>
</long-description>
          <tag line="253" name="param" description="" type="string|\Zend_Amf_Value_ByteArray" variable="$data">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Amf_Value_ByteArray</type>
          </tag>
          <tag line="253" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="259">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="285" package="Default">
        <name>writeXml</name>
        <docblock>
          <description>Send xml to output stream</description>
          <long-description>
</long-description>
          <tag line="279" name="param" description="" type="\DOMDocument|\SimpleXMLElement" variable="$xml">
            <type by_reference="false">\DOMDocument</type>
            <type by_reference="false">\SimpleXMLElement</type>
          </tag>
          <tag line="279" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$xml</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="313" package="Default">
        <name>writeDate</name>
        <docblock>
          <description>Convert DateTime/Zend_Date to AMF date</description>
          <long-description>
</long-description>
          <tag line="307" name="param" description="" type="\DateTime|\Zend_Date" variable="$date">
            <type by_reference="false">\DateTime</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="307" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="313">
          <name>$date</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="340" package="Default">
        <name>writeArray</name>
        <docblock>
          <description>Write a PHP array back to the amf output stream</description>
          <long-description>
</long-description>
          <tag line="334" name="param" description="" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="334" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="340">
          <name>$array</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="383" package="Default">
        <name>writeObjectReference</name>
        <docblock>
          <description>Check if the given object is in the reference table, write the reference if it exists,
otherwise add the object to the reference table</description>
          <long-description>
</long-description>
          <tag line="375" name="param" description="object reference to check for reference" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="375" name="param" description="object to check for reference" type="mixed" variable="$objectByVal">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="375" name="return" description="true, if the reference was written, false otherwise" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="383">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
        <argument line="383">
          <name>$objectByVal</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="412" package="Default">
        <name>writeObject</name>
        <docblock>
          <description>Write object to ouput stream</description>
          <long-description>
</long-description>
          <tag line="406" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="406" name="return" description="" type="\Zend_Amf_Parse_Amf3_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf3_Serializer</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/OutputStream.php" hash="75bd7b554544062fefd3e61e90563e9d" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: OutputStream.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Util/BinaryStream.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_OutputStream</name>
      <extends>\Zend_Amf_Util_BinaryStream</extends>
      <full_name>\Zend_Amf_Parse_OutputStream</full_name>
      <docblock>
        <description>Iterate at a binary level through the AMF response</description>
        <long-description>&lt;p&gt;OutputStream extends BinaryStream as eventually BinaryStream could be placed
outside of Zend_Amf in order to allow other packages to use the class.&lt;/p&gt;
</long-description>
        <tag line="26" name="uses" description="\Zend_Amf_Util_BinaryStream" refers="\Zend_Amf_Util_BinaryStream"/>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Parse"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/InputStream.php" hash="10df0dab15889dabecc01c14db245182" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: InputStream.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Util/BinaryStream.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_InputStream</name>
      <extends>\Zend_Amf_Util_BinaryStream</extends>
      <full_name>\Zend_Amf_Parse_InputStream</full_name>
      <docblock>
        <description>InputStream is used to iterate at a binary level through the AMF request.</description>
        <long-description>&lt;p&gt;InputStream extends BinaryStream as eventually BinaryStream could be placed
outside of Zend_Amf in order to allow other packages to use the class.&lt;/p&gt;
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Parse"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Resource/MysqlResult.php" hash="7a6640c6dad0543e882e43dfaa9b82b2" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: MysqlResult.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $fieldTypes</critical>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_Resource_MysqlResult</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_Resource_MysqlResult</full_name>
      <docblock>
        <description>This class will convert mysql result resource to array suitable for passing
to the external entities.</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Parse"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="39" package="Default">
        <name>$fieldTypes</name>
        <default>array(
        "int" =&gt; "int"</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="List of Mysql types with PHP counterparts Key =&gt; Value is Mysql type (exact string) =&gt; PHP type" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="51" package="Default">
        <name>parse</name>
        <docblock>
          <description>Parse resource into array</description>
          <long-description>
</long-description>
          <tag line="45" name="param" description="" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="45" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$resource</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Resource/MysqliResult.php" hash="04a2b6b44d0cf928a937f8f5a90f479d" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: MysqliResult.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <error line="67">No DocBlock was found for Property $mysqli_to_php</error>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_Resource_MysqliResult</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_Resource_MysqliResult</full_name>
      <docblock>
        <description>This class will convert mysql result resource to array suitable for passing
to the external entities.</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Parse"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="38" package="Default">
        <name>$mysqli_type</name>
        <default>array(
        0 =&gt; "MYSQLI_TYPE_DECIMAL"</default>
        <docblock>
          <description>mapping taken from http://forums.mysql.com/read.php?52,255868,255895#msg-255895</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="67" package="Default">
        <name>$mysqli_to_php</name>
        <default>array(
        "MYSQLI_TYPE_DECIMAL"     =&gt; 'float'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="104" package="Default">
        <name>parse</name>
        <docblock>
          <description>Parse resource into array</description>
          <long-description>
</long-description>
          <tag line="98" name="param" description="" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="98" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$resource</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Resource/Stream.php" hash="008eea9c17176822e4d0065404aa122d" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Stream.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_Resource_Stream</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_Resource_Stream</full_name>
      <docblock>
        <description>This class will convert stream resource to string by just reading it</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Parse"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="39" package="Default">
        <name>parse</name>
        <docblock>
          <description>Parse resource into string</description>
          <long-description>
</long-description>
          <tag line="33" name="param" description="Stream resource" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="33" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$resource</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/TypeLoader.php" hash="c081bfa0abda3b1102fb03a3b7052056" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: TypeLoader.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="55">No short description for property $callbackClass</critical>
      <critical line="60">No short description for property $classMap</critical>
      <critical line="72">No short description for property $_defaultClassMap</critical>
      <critical line="84">No short description for property $_resourceLoader</critical>
    </parse_markers>
    <include type="Require Once" line="26">
      <name>Zend/Amf/Value/Messaging/AcknowledgeMessage.php</name>
    </include>
    <include type="Require Once" line="30">
      <name>Zend/Amf/Value/Messaging/AsyncMessage.php</name>
    </include>
    <include type="Require Once" line="34">
      <name>Zend/Amf/Value/Messaging/CommandMessage.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>Zend/Amf/Value/Messaging/ErrorMessage.php</name>
    </include>
    <include type="Require Once" line="42">
      <name>Zend/Amf/Value/Messaging/RemotingMessage.php</name>
    </include>
    <class final="true" abstract="false" line="53" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_TypeLoader</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_TypeLoader</full_name>
      <docblock>
        <description>Loads a local class and executes the instantiation of that class.</description>
        <long-description>
</long-description>
        <tag line="44" name="todo" description="PHP 5.3 can drastically change this class w/ namespace and the new call_user_func w/ namespace"/>
        <tag line="44" name="package" description="Zend_Amf"/>
        <tag line="44" name="subpackage" description="Parse"/>
        <tag line="44" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="44" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="58" package="Default">
        <name>$callbackClass</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="55" name="var" description="callback class" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="63" package="Default">
        <name>$classMap</name>
        <default>array (
        'flex.messaging.messages.AcknowledgeMessage' =&gt; 'Zend_Amf_Value_Messaging_AcknowledgeMessage'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="60" name="var" description="AMF class map" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="75" package="Default">
        <name>$_defaultClassMap</name>
        <default>array(
        'flex.messaging.messages.AcknowledgeMessage' =&gt; 'Zend_Amf_Value_Messaging_AcknowledgeMessage'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="72" name="var" description="Default class map" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="87" package="Default">
        <name>$_resourceLoader</name>
        <default>null</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="84" name="var" description="" type="\Zend_Loader_PluginLoader_Interface">
            <type by_reference="false">\Zend_Loader_PluginLoader_Interface</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="96" package="Default">
        <name>loadType</name>
        <docblock>
          <description>Load the mapped class type into a callback.</description>
          <long-description>
</long-description>
          <tag line="90" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="" type="object|false">
            <type by_reference="false">object</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="114" package="Default">
        <name>getMappedClassName</name>
        <docblock>
          <description>Looks up the supplied call name to its mapped class name</description>
          <long-description>
</long-description>
          <tag line="108" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="142" package="Default">
        <name>setMapping</name>
        <docblock>
          <description>Map PHP class names to ActionScript class names</description>
          <long-description>&lt;p&gt;Allows users to map the class names of there action script classes
to the equivelent php class name. Used in deserialization to load a class
and serialiation to set the class name of the returned object.&lt;/p&gt;
</long-description>
          <tag line="131" name="param" description="" type="string" variable="$asClassName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="param" description="" type="string" variable="$phpClassName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$asClassName</name>
          <default/>
          <type/>
        </argument>
        <argument line="142">
          <name>$phpClassName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="152" package="Default">
        <name>resetMap</name>
        <docblock>
          <description>Reset type map</description>
          <long-description>
</long-description>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="162" package="Default">
        <name>setResourceLoader</name>
        <docblock>
          <description>Set loader for resource type handlers</description>
          <long-description>
</long-description>
          <tag line="157" name="param" description="" type="\Zend_Loader_PluginLoader_Interface" variable="$loader">
            <type by_reference="false">\Zend_Loader_PluginLoader_Interface</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$loader</name>
          <default/>
          <type>Zend_Loader_PluginLoader_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="173" package="Default">
        <name>addResourceDirectory</name>
        <docblock>
          <description>Add directory to the list of places where to look for resource handlers</description>
          <long-description>
</long-description>
          <tag line="167" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="param" description="" type="string" variable="$dir">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$prefix</name>
          <default/>
          <type/>
        </argument>
        <argument line="173">
          <name>$dir</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="186" package="Default">
        <name>getResourceParser</name>
        <docblock>
          <description>Get plugin class that handles this resource</description>
          <long-description>
</long-description>
          <tag line="180" name="param" description="Resource type" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="180" name="return" description="Class name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$resource</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="202" package="Default">
        <name>handleResource</name>
        <docblock>
          <description>Convert resource to a serializable object</description>
          <long-description>
</long-description>
          <tag line="196" name="param" description="" type="resource" variable="$resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="196" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$resource</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Amf0/Deserializer.php" hash="1d7d2f23fd244a36064f7d98dd0ad244" package="Zend\Amf\Parse\Amf0">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse_Amf0"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Deserializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Amf/Parse/Deserializer.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Amf\Parse\Amf0">
      <name>Zend_Amf_Parse_Amf0_Deserializer</name>
      <extends>\Zend_Amf_Parse_Deserializer</extends>
      <full_name>\Zend_Amf_Parse_Amf0_Deserializer</full_name>
      <docblock>
        <description>Read an AMF0 input stream and convert it into PHP data types</description>
        <long-description>
</long-description>
        <tag line="29" name="todo" description="Implement Typed Object Class Mapping"/>
        <tag line="29" name="todo" description="Class could be implemented as Factory Class with each data type it's own class"/>
        <tag line="29" name="package" description="Zend_Amf"/>
        <tag line="29" name="subpackage" description="Parse_Amf0"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$_reference</name>
        <default>array()</default>
        <docblock>
          <description>An array of objects used for recursively deserializing an object.</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_objectEncoding</name>
        <default>Zend_Amf_Constants::AMF0_OBJECT_ENCODING</default>
        <docblock>
          <description>If AMF3 serialization occurs, update to AMF0 0x03</description>
          <long-description>
</long-description>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>readTypeMarker</name>
        <docblock>
          <description>Read AMF markers and dispatch for deserialization</description>
          <long-description>&lt;p&gt;Checks for AMF marker types and calls the appropriate methods
for deserializing those marker types. Markers are the data type of
the following value.&lt;/p&gt;
</long-description>
          <tag line="54" name="param" description="" type="integer" variable="$typeMarker">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="54" name="return" description="whatever the data type is of the marker in php" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="54" name="throws" description="for invalid type" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$typeMarker</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="149" package="Default">
        <name>readObject</name>
        <docblock>
          <description>Read AMF objects and convert to PHP objects</description>
          <long-description>&lt;p&gt;Read the name value pair objects form the php message and convert them to
a php object class.&lt;/p&gt;

&lt;p&gt;Called when the marker type is 3.&lt;/p&gt;
</long-description>
          <tag line="138" name="param" description="" type="array|null" variable="$object">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="138" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$object</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="179" package="Default">
        <name>readReference</name>
        <docblock>
          <description>Read reference objects</description>
          <long-description>&lt;p&gt;Used to gain access to the private array of reference objects.
Called when marker type is 7.&lt;/p&gt;
</long-description>
          <tag line="170" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="170" name="throws" description="for invalid reference keys" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="199" package="Default">
        <name>readMixedArray</name>
        <docblock>
          <description>Reads an array with numeric and string indexes.</description>
          <long-description>&lt;p&gt;Called when marker type is 8&lt;/p&gt;
</long-description>
          <tag line="189" name="todo" description="As of Flash Player 9 there is not support for mixed typed arrays&#10;so we handle this as an object. With the introduction of vectors&#10;in Flash Player 10 this may need to be reconsidered."/>
          <tag line="189" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="212" package="Default">
        <name>readArray</name>
        <docblock>
          <description>Converts numerically indexed actiosncript arrays into php arrays.</description>
          <long-description>&lt;p&gt;Called when marker type is 10&lt;/p&gt;
</long-description>
          <tag line="205" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="227" package="Default">
        <name>readDate</name>
        <docblock>
          <description>Convert AS Date to Zend_Date</description>
          <long-description>
</long-description>
          <tag line="222" name="return" description="" type="\Zend_Date">
            <type by_reference="false">\Zend_Date</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="248" package="Default">
        <name>readXmlString</name>
        <docblock>
          <description>Convert XML to SimpleXml
If user wants DomDocument they can use dom_import_simplexml</description>
          <long-description>
</long-description>
          <tag line="242" name="return" description="Object" type="\SimpleXml">
            <type by_reference="false">\SimpleXml</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263" package="Default">
        <name>readTypedObject</name>
        <docblock>
          <description>Read Class that is to be mapped to a server class.</description>
          <long-description>&lt;p&gt;Commonly used for Value Objects on the server&lt;/p&gt;
</long-description>
          <tag line="254" name="todo" description="implement Typed Class mapping"/>
          <tag line="254" name="return" description="" type="object|array">
            <type by_reference="false">object</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="254" name="throws" description="if unable to load type" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="288" package="Default">
        <name>readAmf3TypeMarker</name>
        <docblock>
          <description>AMF3 data type encountered load AMF3 Deserializer to handle
type markers.</description>
          <long-description>
</long-description>
          <tag line="282" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="302" package="Default">
        <name>getObjectEncoding</name>
        <docblock>
          <description>Return the object encoding to check if an AMF3 object
is going to be return.</description>
          <long-description>
</long-description>
          <tag line="296" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Amf0/Serializer.php" hash="705cb45d4b4d5c660f453de3e1f86dc8" package="Zend\Amf\Parse\Amf0">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse_Amf0"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Serializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="40">No short description for property $_className</critical>
      <notice line="227">Name of argument $object does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Amf/Parse/Serializer.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Amf\Parse\Amf0">
      <name>Zend_Amf_Parse_Amf0_Serializer</name>
      <extends>\Zend_Amf_Parse_Serializer</extends>
      <full_name>\Zend_Amf_Parse_Amf0_Serializer</full_name>
      <docblock>
        <description>Serializer PHP misc types back to there corresponding AMF0 Type Marker.</description>
        <long-description>
</long-description>
        <tag line="29" name="uses" description="\Zend_Amf_Parse_Serializer" refers="\Zend_Amf_Parse_Serializer"/>
        <tag line="29" name="package" description="Zend_Amf"/>
        <tag line="29" name="subpackage" description="Parse_Amf0"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_className</name>
        <default>''</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="40" name="var" description="Name of the class to be returned" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$_referenceObjects</name>
        <default>array()</default>
        <docblock>
          <description>An array of reference objects</description>
          <long-description>
</long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="64" package="Default">
        <name>writeTypeMarker</name>
        <docblock>
          <description>Determine type and serialize accordingly</description>
          <long-description>&lt;p&gt;Checks to see if the type was declared and then either
auto negotiates the type or relies on the user defined markerType to
serialize the data into amf&lt;/p&gt;
</long-description>
          <tag line="51" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="" type="mixed" variable="$markerType">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="" type="mixed" variable="$dataByVal">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
          <tag line="51" name="throws" description="for unrecognized types or data" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$markerType</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="64">
          <name>$dataByVal</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="195" package="Default">
        <name>writeObjectReference</name>
        <docblock>
          <description>Check if the given object is in the reference table, write the reference if it exists,
otherwise add the object to the reference table</description>
          <long-description>
</long-description>
          <tag line="186" name="param" description="object reference to check for reference" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="186" name="param" description="AMF type of the object to write" type="string" variable="$markerType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="param" description="object to check for reference" type="mixed" variable="$objectByVal">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="186" name="return" description="true, if the reference was written, false otherwise" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
        <argument line="195">
          <name>$markerType</name>
          <default/>
          <type/>
        </argument>
        <argument line="195">
          <name>$objectByVal</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="227" package="Default">
        <name>writeObject</name>
        <docblock>
          <description>Write a PHP array with string or mixed keys.</description>
          <long-description>
</long-description>
          <tag line="221" name="param" description="" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="221" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
        </docblock>
        <argument line="227">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="250" package="Default">
        <name>writeArray</name>
        <docblock>
          <description>Write a standard numeric array to the output stream. If a mixed array
is encountered call writeTypeMarker with mixed array.</description>
          <long-description>
</long-description>
          <tag line="243" name="param" description="" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="243" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$array</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="273" package="Default">
        <name>writeDate</name>
        <docblock>
          <description>Convert the DateTime into an AMF Date</description>
          <long-description>
</long-description>
          <tag line="267" name="param" description="" type="\DateTime|\Zend_Date" variable="$data">
            <type by_reference="false">\DateTime</type>
            <type by_reference="false">\Zend_Date</type>
          </tag>
          <tag line="267" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
        </docblock>
        <argument line="273">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="300" package="Default">
        <name>writeTypedObject</name>
        <docblock>
          <description>Write a class mapped object to the output stream.</description>
          <long-description>
</long-description>
          <tag line="294" name="param" description="" type="object" variable="$data">
            <type by_reference="false">object</type>
          </tag>
          <tag line="294" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
        </docblock>
        <argument line="300">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="314" package="Default">
        <name>writeAmf3TypeMarker</name>
        <docblock>
          <description>Encountered and AMF3 Type Marker use AMF3 serializer. Once AMF3 is
encountered it will not return to AMf0.</description>
          <long-description>
</long-description>
          <tag line="307" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="307" name="return" description="" type="\Zend_Amf_Parse_Amf0_Serializer">
            <type by_reference="false">\Zend_Amf_Parse_Amf0_Serializer</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="329" package="Default">
        <name>getClassName</name>
        <docblock>
          <description>Find if the class name is a class mapped name and return the
respective classname if it is.</description>
          <long-description>
</long-description>
          <tag line="322" name="param" description="" type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="322" name="return" description="$className" type="false|string">
            <type by_reference="false">false</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="329">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Parse/Serializer.php" hash="277a5d879bf01653ec2955f1ad97fa48" package="Zend\Amf\Parse">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Parse"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Serializer.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="true" line="31" namespace="default" package="Zend\Amf\Parse">
      <name>Zend_Amf_Parse_Serializer</name>
      <extends/>
      <full_name>\Zend_Amf_Parse_Serializer</full_name>
      <docblock>
        <description>Base abstract class for all AMF serializers.</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Parse"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$_stream</name>
        <default/>
        <docblock>
          <description>Reference to the current output stream being constructed</description>
          <long-description>
</long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="46" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="40" name="param" description="" type="\Zend_Amf_Parse_OutputStream" variable="$stream">
            <type by_reference="false">\Zend_Amf_Parse_OutputStream</type>
          </tag>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$stream</name>
          <default/>
          <type>Zend_Amf_Parse_OutputStream</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" line="59" package="Default">
        <name>writeTypeMarker</name>
        <docblock>
          <description>Find the PHP object type and convert it into an AMF object type</description>
          <long-description>
</long-description>
          <tag line="51" name="param" description="" type="mixed" variable="$content">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="" type="int" variable="$markerType">
            <type by_reference="false">int</type>
          </tag>
          <tag line="51" name="param" description="" type="mixed" variable="$contentByVal">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$content</name>
          <default/>
          <type/>
        </argument>
        <argument line="59">
          <name>$markerType</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="59">
          <name>$contentByVal</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Constants.php" hash="27668a176d7d26572f4f03aa3b6c0b04" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Constants.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <error line="32">No DocBlock was found for Constant AMF0_NUMBER</error>
      <error line="33">No DocBlock was found for Constant AMF0_BOOLEAN</error>
      <error line="34">No DocBlock was found for Constant AMF0_STRING</error>
      <error line="35">No DocBlock was found for Constant AMF0_OBJECT</error>
      <error line="36">No DocBlock was found for Constant AMF0_MOVIECLIP</error>
      <error line="37">No DocBlock was found for Constant AMF0_NULL</error>
      <error line="38">No DocBlock was found for Constant AMF0_UNDEFINED</error>
      <error line="39">No DocBlock was found for Constant AMF0_REFERENCE</error>
      <error line="40">No DocBlock was found for Constant AMF0_MIXEDARRAY</error>
      <error line="41">No DocBlock was found for Constant AMF0_OBJECTTERM</error>
      <error line="42">No DocBlock was found for Constant AMF0_ARRAY</error>
      <error line="43">No DocBlock was found for Constant AMF0_DATE</error>
      <error line="44">No DocBlock was found for Constant AMF0_LONGSTRING</error>
      <error line="45">No DocBlock was found for Constant AMF0_UNSUPPORTED</error>
      <error line="46">No DocBlock was found for Constant AMF0_XML</error>
      <error line="47">No DocBlock was found for Constant AMF0_TYPEDOBJECT</error>
      <error line="48">No DocBlock was found for Constant AMF0_AMF3</error>
      <error line="49">No DocBlock was found for Constant AMF0_OBJECT_ENCODING</error>
      <error line="51">No DocBlock was found for Constant AMF3_UNDEFINED</error>
      <error line="52">No DocBlock was found for Constant AMF3_NULL</error>
      <error line="53">No DocBlock was found for Constant AMF3_BOOLEAN_FALSE</error>
      <error line="54">No DocBlock was found for Constant AMF3_BOOLEAN_TRUE</error>
      <error line="55">No DocBlock was found for Constant AMF3_INTEGER</error>
      <error line="56">No DocBlock was found for Constant AMF3_NUMBER</error>
      <error line="57">No DocBlock was found for Constant AMF3_STRING</error>
      <error line="58">No DocBlock was found for Constant AMF3_XML</error>
      <error line="59">No DocBlock was found for Constant AMF3_DATE</error>
      <error line="60">No DocBlock was found for Constant AMF3_ARRAY</error>
      <error line="61">No DocBlock was found for Constant AMF3_OBJECT</error>
      <error line="62">No DocBlock was found for Constant AMF3_XMLSTRING</error>
      <error line="63">No DocBlock was found for Constant AMF3_BYTEARRAY</error>
      <error line="64">No DocBlock was found for Constant AMF3_OBJECT_ENCODING</error>
      <error line="67">No DocBlock was found for Constant ET_PROPLIST</error>
      <error line="68">No DocBlock was found for Constant ET_EXTERNAL</error>
      <error line="69">No DocBlock was found for Constant ET_DYNAMIC</error>
      <error line="70">No DocBlock was found for Constant ET_PROXY</error>
      <error line="72">No DocBlock was found for Constant FMS_OBJECT_ENCODING</error>
      <error line="79">No DocBlock was found for Constant URL_APPEND_HEADER</error>
      <error line="80">No DocBlock was found for Constant RESULT_METHOD</error>
      <error line="81">No DocBlock was found for Constant STATUS_METHOD</error>
      <error line="82">No DocBlock was found for Constant CREDENTIALS_HEADER</error>
      <error line="83">No DocBlock was found for Constant PERSISTENT_HEADER</error>
      <error line="84">No DocBlock was found for Constant DESCRIBE_HEADER</error>
      <error line="86">No DocBlock was found for Constant GUEST_ROLE</error>
    </parse_markers>
    <class final="true" abstract="false" line="30" namespace="default" package="Zend\Amf">
      <name>Zend_Amf_Constants</name>
      <extends/>
      <full_name>\Zend_Amf_Constants</full_name>
      <docblock>
        <description>The following constants are used throughout serialization and
deserialization to detect the AMF marker and encoding types.</description>
        <long-description>
</long-description>
        <tag line="22" name="package" description="Zend_Amf"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="32" package="Default">
        <name>AMF0_NUMBER</name>
        <value>0x00</value>
      </constant>
      <constant namespace="default" line="33" package="Default">
        <name>AMF0_BOOLEAN</name>
        <value>0x01</value>
      </constant>
      <constant namespace="default" line="34" package="Default">
        <name>AMF0_STRING</name>
        <value>0x02</value>
      </constant>
      <constant namespace="default" line="35" package="Default">
        <name>AMF0_OBJECT</name>
        <value>0x03</value>
      </constant>
      <constant namespace="default" line="36" package="Default">
        <name>AMF0_MOVIECLIP</name>
        <value>0x04</value>
      </constant>
      <constant namespace="default" line="37" package="Default">
        <name>AMF0_NULL</name>
        <value>0x05</value>
      </constant>
      <constant namespace="default" line="38" package="Default">
        <name>AMF0_UNDEFINED</name>
        <value>0x06</value>
      </constant>
      <constant namespace="default" line="39" package="Default">
        <name>AMF0_REFERENCE</name>
        <value>0x07</value>
      </constant>
      <constant namespace="default" line="40" package="Default">
        <name>AMF0_MIXEDARRAY</name>
        <value>0x08</value>
      </constant>
      <constant namespace="default" line="41" package="Default">
        <name>AMF0_OBJECTTERM</name>
        <value>0x09</value>
      </constant>
      <constant namespace="default" line="42" package="Default">
        <name>AMF0_ARRAY</name>
        <value>0x0a</value>
      </constant>
      <constant namespace="default" line="43" package="Default">
        <name>AMF0_DATE</name>
        <value>0x0b</value>
      </constant>
      <constant namespace="default" line="44" package="Default">
        <name>AMF0_LONGSTRING</name>
        <value>0x0c</value>
      </constant>
      <constant namespace="default" line="45" package="Default">
        <name>AMF0_UNSUPPORTED</name>
        <value>0x0e</value>
      </constant>
      <constant namespace="default" line="46" package="Default">
        <name>AMF0_XML</name>
        <value>0x0f</value>
      </constant>
      <constant namespace="default" line="47" package="Default">
        <name>AMF0_TYPEDOBJECT</name>
        <value>0x10</value>
      </constant>
      <constant namespace="default" line="48" package="Default">
        <name>AMF0_AMF3</name>
        <value>0x11</value>
      </constant>
      <constant namespace="default" line="49" package="Default">
        <name>AMF0_OBJECT_ENCODING</name>
        <value>0x00</value>
      </constant>
      <constant namespace="default" line="51" package="Default">
        <name>AMF3_UNDEFINED</name>
        <value>0x00</value>
      </constant>
      <constant namespace="default" line="52" package="Default">
        <name>AMF3_NULL</name>
        <value>0x01</value>
      </constant>
      <constant namespace="default" line="53" package="Default">
        <name>AMF3_BOOLEAN_FALSE</name>
        <value>0x02</value>
      </constant>
      <constant namespace="default" line="54" package="Default">
        <name>AMF3_BOOLEAN_TRUE</name>
        <value>0x03</value>
      </constant>
      <constant namespace="default" line="55" package="Default">
        <name>AMF3_INTEGER</name>
        <value>0x04</value>
      </constant>
      <constant namespace="default" line="56" package="Default">
        <name>AMF3_NUMBER</name>
        <value>0x05</value>
      </constant>
      <constant namespace="default" line="57" package="Default">
        <name>AMF3_STRING</name>
        <value>0x06</value>
      </constant>
      <constant namespace="default" line="58" package="Default">
        <name>AMF3_XML</name>
        <value>0x07</value>
      </constant>
      <constant namespace="default" line="59" package="Default">
        <name>AMF3_DATE</name>
        <value>0x08</value>
      </constant>
      <constant namespace="default" line="60" package="Default">
        <name>AMF3_ARRAY</name>
        <value>0x09</value>
      </constant>
      <constant namespace="default" line="61" package="Default">
        <name>AMF3_OBJECT</name>
        <value>0x0A</value>
      </constant>
      <constant namespace="default" line="62" package="Default">
        <name>AMF3_XMLSTRING</name>
        <value>0x0B</value>
      </constant>
      <constant namespace="default" line="63" package="Default">
        <name>AMF3_BYTEARRAY</name>
        <value>0x0C</value>
      </constant>
      <constant namespace="default" line="64" package="Default">
        <name>AMF3_OBJECT_ENCODING</name>
        <value>0x03</value>
      </constant>
      <constant namespace="default" line="67" package="Default">
        <name>ET_PROPLIST</name>
        <value>0x00</value>
      </constant>
      <constant namespace="default" line="68" package="Default">
        <name>ET_EXTERNAL</name>
        <value>0x01</value>
      </constant>
      <constant namespace="default" line="69" package="Default">
        <name>ET_DYNAMIC</name>
        <value>0x02</value>
      </constant>
      <constant namespace="default" line="70" package="Default">
        <name>ET_PROXY</name>
        <value>0x03</value>
      </constant>
      <constant namespace="default" line="72" package="Default">
        <name>FMS_OBJECT_ENCODING</name>
        <value>0x01</value>
      </constant>
      <constant namespace="default" line="78" package="Default">
        <name>UNKNOWN_CONTENT_LENGTH</name>
        <value>-1</value>
        <docblock>
          <description>Special content length value that indicates "unknown" content length
per AMF Specification</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="79" package="Default">
        <name>URL_APPEND_HEADER</name>
        <value>'AppendToGatewayUrl'</value>
      </constant>
      <constant namespace="default" line="80" package="Default">
        <name>RESULT_METHOD</name>
        <value>'/onResult'</value>
      </constant>
      <constant namespace="default" line="81" package="Default">
        <name>STATUS_METHOD</name>
        <value>'/onStatus'</value>
      </constant>
      <constant namespace="default" line="82" package="Default">
        <name>CREDENTIALS_HEADER</name>
        <value>'Credentials'</value>
      </constant>
      <constant namespace="default" line="83" package="Default">
        <name>PERSISTENT_HEADER</name>
        <value>'RequestPersistentHeader'</value>
      </constant>
      <constant namespace="default" line="84" package="Default">
        <name>DESCRIBE_HEADER</name>
        <value>'DescribeService'</value>
      </constant>
      <constant namespace="default" line="86" package="Default">
        <name>GUEST_ROLE</name>
        <value>'anonymous'</value>
      </constant>
    </class>
  </file>
  <file path="Zend/Amf/Exception.php" hash="9c9c939097a8787a43150a8b7ad6b328" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="27">No short description for class Zend_Amf_Exception</critical>
    </parse_markers>
    <include type="Require Once" line="25">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Amf">
      <name>Zend_Amf_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Amf_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="27" name="package" description="Zend_Amf"/>
        <tag line="27" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="27" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Amf/Server/Exception.php" hash="d05627b1cee5ed6b24c9e3c390db09de" package="Zend\Amf\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="35" namespace="default" package="Zend\Amf\Server">
      <name>Zend_Amf_Server_Exception</name>
      <extends>\Zend_Amf_Exception</extends>
      <full_name>\Zend_Amf_Server_Exception</full_name>
      <docblock>
        <description>Zend_Amf_Server_Exception</description>
        <long-description>
</long-description>
        <tag line="26" name="category" description="Zend"/>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Server"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Amf/Value/MessageBody.php" hash="01d5461fae49b381fb8832ad23002c12" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: MessageBody.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_MessageBody</name>
      <extends/>
      <full_name>\Zend_Amf_Value_MessageBody</full_name>
      <docblock>
        <description>An AMF Message contains information about the actual individual
transaction that is to be performed. It specifies the remote
operation that is to be performed; a local (client) operation
to be invoked upon success; and, the data to be used in the
operation.</description>
        <long-description>&lt;p/&gt;

&lt;p&gt;This Message structure defines how a local client would
invoke a method/operation on a remote server. Additionally,
the response from the Server is structured identically.&lt;/p&gt;
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_targetUri</name>
        <default>""</default>
        <docblock>
          <description>A string describing which operation, function, or method
is to be remotley invoked.</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_responseUri</name>
        <default>""</default>
        <docblock>
          <description>Universal Resource Identifier that uniquely targets the originator's
Object that should receive the server's response. The server will
use this path specification to target the "OnResult()" or "onStatus()"
handlers within the client. For Flash, it specifies an ActionScript
Object path only. The NetResponse object pointed to by the Response Uri
contains the connection state information. Passing/specifying this
provides a convenient mechanism for the client/server to share access
to an object that is managing the state of the shared connection.</description>
          <long-description>&lt;p&gt;Since the server will use this field in the event of an error,
this field is required even if a successful server request would
not be expected to return a value to the client.&lt;/p&gt;
</long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$_data</name>
        <default/>
        <docblock>
          <description>Contains the actual data associated with the operation. It contains
the client's parameter data that is passed to the server's operation/method.</description>
          <long-description>&lt;p&gt;When serializing a root level data type or a parameter list array, no
name field is included. That is, the data is anonomously represented
as "Type Marker"/"Value" pairs. When serializing member data, the data is
represented as a series of "Name"/"Type"/"Value" combinations.&lt;/p&gt;

&lt;p&gt;For server generated responses, it may contain any ActionScript
data/objects that the server was expected to provide.&lt;/p&gt;
</long-description>
          <tag line="66" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="81" name="param" description="" type="string" variable="$targetUri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="param" description="" type="string" variable="$responseUri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$targetUri</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$responseUri</name>
          <default/>
          <type/>
        </argument>
        <argument line="89">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="101" package="Default">
        <name>getTargetUri</name>
        <docblock>
          <description>Retrieve target Uri</description>
          <long-description>
</long-description>
          <tag line="96" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="112" package="Default">
        <name>setTargetUri</name>
        <docblock>
          <description>Set target Uri</description>
          <long-description>
</long-description>
          <tag line="106" name="param" description="" type="string" variable="$targetUri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="return" description="" type="\Zend_Amf_Value_MessageBody">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$targetUri</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="126" package="Default">
        <name>getResponseUri</name>
        <docblock>
          <description>Get target Uri</description>
          <long-description>
</long-description>
          <tag line="121" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="137" package="Default">
        <name>setResponseUri</name>
        <docblock>
          <description>Set response Uri</description>
          <long-description>
</long-description>
          <tag line="131" name="param" description="" type="string" variable="$responseUri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="return" description="" type="\Zend_Amf_Value_MessageBody">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$responseUri</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151" package="Default">
        <name>getData</name>
        <docblock>
          <description>Retrieve response data</description>
          <long-description>
</long-description>
          <tag line="146" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="162" package="Default">
        <name>setData</name>
        <docblock>
          <description>Set response data</description>
          <long-description>
</long-description>
          <tag line="156" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="156" name="return" description="" type="\Zend_Amf_Value_MessageBody">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="174" package="Default">
        <name>setReplyMethod</name>
        <docblock>
          <description>Set reply method</description>
          <long-description>
</long-description>
          <tag line="168" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="return" description="" type="\Zend_Amf_Value_MessageBody">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/AbstractMessage.php" hash="874caaa8c430b6797234fbdccbabb7a8" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: AbstractMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $clientId</critical>
      <critical line="39">No short description for property $destination</critical>
      <critical line="44">No short description for property $messageId</critical>
      <critical line="49">No short description for property $timestamp</critical>
      <critical line="54">No short description for property $timeToLive</critical>
      <critical line="59">No short description for property $headers</critical>
      <critical line="64">No short description for property $body</critical>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_AbstractMessage</name>
      <extends/>
      <full_name>\Zend_Amf_Value_Messaging_AbstractMessage</full_name>
      <docblock>
        <description>This is the default Implementation of Message, which provides
a convenient base for behavior and association of common endpoints</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$clientId</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="Client identifier" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$destination</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="39" name="var" description="Destination" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$messageId</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="44" name="var" description="Message identifier" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52" package="Default">
        <name>$timestamp</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="49" name="var" description="Message timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$timeToLive</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="54" name="var" description="Message TTL" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$headers</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="59" name="var" description="Message headers" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" package="Default">
        <name>$body</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="64" name="var" description="Message body" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="78" package="Default">
        <name>generateId</name>
        <docblock>
          <description>generate a unique id</description>
          <long-description>&lt;p&gt;Format is: ########-####-####-####-############
Where # is an uppercase letter or number
example: 6D9DC7EC-A273-83A9-ABE3-00005FD752D6&lt;/p&gt;
</long-description>
          <tag line="69" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/RemotingMessage.php" hash="a0176d2d0b4df8b36c3f88add7505d04" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: RemotingMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Value/Messaging/AbstractMessage.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_RemotingMessage</name>
      <extends>\Zend_Amf_Value_Messaging_AbstractMessage</extends>
      <full_name>\Zend_Amf_Value_Messaging_RemotingMessage</full_name>
      <docblock>
        <description>This type of message contains information needed to perform
a Remoting invocation.</description>
        <long-description>&lt;p&gt;Corresponds to flex.messaging.messages.RemotingMessage&lt;/p&gt;
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Value"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$source</name>
        <default/>
        <docblock>
          <description>The name of the service to be called including package name</description>
          <long-description>
</long-description>
          <tag line="40" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$operation</name>
        <default/>
        <docblock>
          <description>The name of the method to be called</description>
          <long-description>
</long-description>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$parameters</name>
        <default/>
        <docblock>
          <description>The arguments to call the mathod with</description>
          <long-description>
</long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="63" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Create a new Remoting Message</description>
          <long-description>
</long-description>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/AsyncMessage.php" hash="70de77c840d4f713ed92105304e1d502" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: AsyncMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="25">
      <name>Zend/Amf/Value/Messaging/AbstractMessage.php</name>
    </include>
    <class final="false" abstract="false" line="36" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_AsyncMessage</name>
      <extends>\Zend_Amf_Value_Messaging_AbstractMessage</extends>
      <full_name>\Zend_Amf_Value_Messaging_AsyncMessage</full_name>
      <docblock>
        <description>This type of message contains information necessary to perform
point-to-point or publish-subscribe messaging.</description>
        <long-description>
</long-description>
        <tag line="27" name="package" description="Zend_Amf"/>
        <tag line="27" name="subpackage" description="Value"/>
        <tag line="27" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="27" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$correlationId</name>
        <default/>
        <docblock>
          <description>The message id to be responded to.</description>
          <long-description>
</long-description>
          <tag line="38" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/ArrayCollection.php" hash="e16e45b1df4062dc92a2739f1b8d1642" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: ArrayCollection.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="33" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_ArrayCollection</name>
      <extends>\ArrayObject</extends>
      <full_name>\Zend_Amf_Value_Messaging_ArrayCollection</full_name>
      <docblock>
        <description>Type encapsulating Flex ArrayCollection</description>
        <long-description>&lt;p&gt;Corresponds to flex.messaging.io.ArrayCollection&lt;/p&gt;
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/ErrorMessage.php" hash="c280f56a42a4fb525b04ac2a6c42523a" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: ErrorMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Value/Messaging/AcknowledgeMessage.php</name>
    </include>
    <class final="false" abstract="false" line="36" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_ErrorMessage</name>
      <extends>\Zend_Amf_Value_Messaging_AcknowledgeMessage</extends>
      <full_name>\Zend_Amf_Value_Messaging_ErrorMessage</full_name>
      <docblock>
        <description>Creates the error message to report to flex the issue with the call</description>
        <long-description>&lt;p&gt;Corresponds to flex.messaging.messages.ErrorMessage&lt;/p&gt;
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Value"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$extendedData</name>
        <default>null</default>
        <docblock>
          <description>Additional data with error</description>
          <long-description>
</long-description>
          <tag line="38" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$faultCode</name>
        <default/>
        <docblock>
          <description>Error code number</description>
          <long-description>
</long-description>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$faultDetail</name>
        <default/>
        <docblock>
          <description>Description as to the cause of the error</description>
          <long-description>
</long-description>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$faultString</name>
        <default>''</default>
        <docblock>
          <description>Short description of error</description>
          <long-description>
</long-description>
          <tag line="56" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="66" package="Default">
        <name>$rootCause</name>
        <default>null</default>
        <docblock>
          <description>root cause of error</description>
          <long-description>
</long-description>
          <tag line="62" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/CommandMessage.php" hash="a239af33b61bf2d51bb107d279bd5ac1" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: CommandMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Amf/Value/Messaging/AsyncMessage.php</name>
    </include>
    <class final="false" abstract="false" line="42" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_CommandMessage</name>
      <extends>\Zend_Amf_Value_Messaging_AsyncMessage</extends>
      <full_name>\Zend_Amf_Value_Messaging_CommandMessage</full_name>
      <docblock>
        <description>A message that represents an infrastructure command passed between
client and server. Subscribe/unsubscribe operations result in
CommandMessage transmissions, as do polling operations.</description>
        <long-description>&lt;p&gt;Corresponds to flex.messaging.messages.CommandMessage&lt;/p&gt;

&lt;p&gt;Note: THESE VALUES MUST BE THE SAME ON CLIENT AND SERVER&lt;/p&gt;
</long-description>
        <tag line="28" name="package" description="Zend_Amf"/>
        <tag line="28" name="subpackage" description="Value"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="47" package="Default">
        <name>SUBSCRIBE_OPERATION</name>
        <value>0</value>
        <docblock>
          <description>This operation is used to subscribe to a remote destination.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="52" package="Default">
        <name>UNSUSBSCRIBE_OPERATION</name>
        <value>1</value>
        <docblock>
          <description>This operation is used to unsubscribe from a remote destination.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="58" package="Default">
        <name>POLL_OPERATION</name>
        <value>2</value>
        <docblock>
          <description>This operation is used to poll a remote destination for pending,
undelivered messages.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="64" package="Default">
        <name>CLIENT_SYNC_OPERATION</name>
        <value>4</value>
        <docblock>
          <description>This operation is used by a remote destination to sync missed or cached messages
back to a client as a result of a client issued poll command.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="70" package="Default">
        <name>CLIENT_PING_OPERATION</name>
        <value>5</value>
        <docblock>
          <description>This operation is used to test connectivity over the current channel to
the remote endpoint.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="76" package="Default">
        <name>CLUSTER_REQUEST_OPERATION</name>
        <value>7</value>
        <docblock>
          <description>This operation is used to request a list of failover endpoint URIs
for the remote destination based on cluster membership.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="84" package="Default">
        <name>LOGIN_OPERATION</name>
        <value>8</value>
        <docblock>
          <description>This operation is used to send credentials to the endpoint so that
the user can be logged in over the current channel.</description>
          <long-description>&lt;p&gt;The credentials need to be Base64 encoded and stored in the&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;of the message.&lt;/p&gt;
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="90" package="Default">
        <name>LOGOUT_OPERATION</name>
        <value>9</value>
        <docblock>
          <description>This operation is used to log the user out of the current channel, and
will invalidate the server session if the channel is HTTP based.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="96" package="Default">
        <name>SESSION_INVALIDATE_OPERATION</name>
        <value>10</value>
        <docblock>
          <description>This operation is used to indicate that the client's subscription to a
remote destination has been invalidated.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="102" package="Default">
        <name>MULTI_SUBSCRIBE_OPERATION</name>
        <value>11</value>
        <docblock>
          <description>This operation is used by the MultiTopicConsumer to subscribe/unsubscribe
from multiple subtopics/selectors in the same message.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="107" package="Default">
        <name>DISCONNECT_OPERATION</name>
        <value>12</value>
        <docblock>
          <description>This operation is used to indicate that a channel has disconnected</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="112" package="Default">
        <name>UNKNOWN_OPERATION</name>
        <value>10000</value>
        <docblock>
          <description>This is the default operation for new CommandMessage instances.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="118" package="Default">
        <name>$operation</name>
        <default>self::UNKNOWN_OPERATION</default>
        <docblock>
          <description>The operation to execute for messages of this type</description>
          <long-description>
</long-description>
          <tag line="114" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Zend/Amf/Value/Messaging/AcknowledgeMessage.php" hash="da46f23b2ce2791823b1b874ddf42695" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: AcknowledgeMessage.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Value/Messaging/AsyncMessage.php</name>
    </include>
    <class final="false" abstract="false" line="38" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_Messaging_AcknowledgeMessage</name>
      <extends>\Zend_Amf_Value_Messaging_AsyncMessage</extends>
      <full_name>\Zend_Amf_Value_Messaging_AcknowledgeMessage</full_name>
      <docblock>
        <description>This is the type of message returned by the MessageBroker
to endpoints after the broker has routed an endpoint's message
to a service.</description>
        <long-description>&lt;p&gt;flex.messaging.messages.AcknowledgeMessage&lt;/p&gt;
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Value"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Create a new Acknowledge Message</description>
          <long-description>
</long-description>
          <tag line="40" name="param" description="" type="\unknown_type" variable="$message">
            <type by_reference="false">\unknown_type</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/MessageHeader.php" hash="7e373973b774d3b7e635c0eb9b4ddc5d" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: MessageHeader.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <notice line="72">Name of argument $data does not match with function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="false" line="34" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_MessageHeader</name>
      <extends/>
      <full_name>\Zend_Amf_Value_MessageHeader</full_name>
      <docblock>
        <description>Message Headers provide context for the processing of the
the AMF Packet and all subsequent Messages.</description>
        <long-description>&lt;p&gt;Multiple Message Headers may be included within an AMF Packet.&lt;/p&gt;
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="41" package="Default">
        <name>$name</name>
        <default/>
        <docblock>
          <description>Name of the header</description>
          <long-description>
</long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$mustRead</name>
        <default/>
        <docblock>
          <description>Flag if the data has to be parsed on return</description>
          <long-description>
</long-description>
          <tag line="43" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$length</name>
        <default/>
        <docblock>
          <description>Length of the data field</description>
          <long-description>
</long-description>
          <tag line="50" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$data</name>
        <default/>
        <docblock>
          <description>Data sent with the header name</description>
          <long-description>
</long-description>
          <tag line="57" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="72" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Used to create and store AMF Header data.</description>
          <long-description>
</long-description>
          <tag line="64" name="param" description="" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="64" name="param" description="" type="Boolean" variable="$mustRead">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag line="64" name="param" description="" type="\misc" variable="$content">
            <type by_reference="false">\misc</type>
          </tag>
          <tag line="64" name="param" description="" type="integer" variable="$length">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$mustRead</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$length</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/ByteArray.php" hash="bef37f991e29b549aa01c910b859775e" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: ByteArray.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="33">No short description for property $_data</critical>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_ByteArray</name>
      <extends/>
      <full_name>\Zend_Amf_Value_ByteArray</full_name>
      <docblock>
        <description>Wrapper class to store an AMF3 flash.utils.ByteArray</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_data</name>
        <default>''</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="33" name="var" description="ByteString Data" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="44" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Create a ByteArray</description>
          <long-description>
</long-description>
          <tag line="38" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="54" package="Default">
        <name>getData</name>
        <docblock>
          <description>Return the byte stream</description>
          <long-description>
</long-description>
          <tag line="49" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Value/TraitsInfo.php" hash="75554d4894f33abc1498dbf3ccec9c7b" package="Zend\Amf\Value">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Value"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: TraitsInfo.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="33">No short description for property $_className</critical>
      <critical line="38">No short description for property $_dynamic</critical>
      <critical line="43">No short description for property $_externalizable</critical>
      <critical line="48">No short description for property $_properties</critical>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Amf\Value">
      <name>Zend_Amf_Value_TraitsInfo</name>
      <extends/>
      <full_name>\Zend_Amf_Value_TraitsInfo</full_name>
      <docblock>
        <description>Zend_Amf_Value_TraitsInfo</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Value"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_className</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="33" name="var" description="Class name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$_dynamic</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="38" name="var" description="Whether or not this is a dynamic class" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_externalizable</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="43" name="var" description="Whether or not the class is externalizable" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_properties</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="48" name="var" description="Class properties" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Used to keep track of all class traits of an AMF3 object</description>
          <long-description>
</long-description>
          <tag line="53" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="param" description="" type="boolean" variable="$dynamic">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="53" name="param" description="" type="boolean" variable="$externalizable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="53" name="param" description="" type="boolean" variable="$properties">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
        <argument line="62">
          <name>$dynamic</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="62">
          <name>$externalizable</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="62">
          <name>$properties</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>isDynamic</name>
        <docblock>
          <description>Test if the class is a dynamic class</description>
          <long-description>
</long-description>
          <tag line="70" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="85" package="Default">
        <name>isExternalizable</name>
        <docblock>
          <description>Test if class is externalizable</description>
          <long-description>
</long-description>
          <tag line="80" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95" package="Default">
        <name>length</name>
        <docblock>
          <description>Return the number of properties in the class</description>
          <long-description>
</long-description>
          <tag line="90" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="105" package="Default">
        <name>getClassName</name>
        <docblock>
          <description>Return the class name</description>
          <long-description>
</long-description>
          <tag line="100" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="116" package="Default">
        <name>addProperty</name>
        <docblock>
          <description>Add an additional property</description>
          <long-description>
</long-description>
          <tag line="110" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="" type="\Zend_Amf_Value_TraitsInfo">
            <type by_reference="false">\Zend_Amf_Value_TraitsInfo</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="128" package="Default">
        <name>addAllProperties</name>
        <docblock>
          <description>Add all properties of the class.</description>
          <long-description>
</long-description>
          <tag line="122" name="param" description="" type="array" variable="$props">
            <type by_reference="false">array</type>
          </tag>
          <tag line="122" name="return" description="" type="\Zend_Amf_Value_TraitsInfo">
            <type by_reference="false">\Zend_Amf_Value_TraitsInfo</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$props</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>getProperty</name>
        <docblock>
          <description>Get the property at a given index</description>
          <long-description>
</long-description>
          <tag line="134" name="param" description="" type="int" variable="$index">
            <type by_reference="false">int</type>
          </tag>
          <tag line="134" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="150" package="Default">
        <name>getAllProperties</name>
        <docblock>
          <description>Return all properties of the class.</description>
          <long-description>
</long-description>
          <tag line="145" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Adobe/DbInspector.php" hash="d466900a85715cfbb5eb9bcf1966b42c" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: DbInspector.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <class final="false" abstract="false" line="30" namespace="default" package="Zend\Amf\Adobe">
      <name>Zend_Amf_Adobe_DbInspector</name>
      <extends/>
      <full_name>\Zend_Amf_Adobe_DbInspector</full_name>
      <docblock>
        <description>This class implements authentication against XML file with roles for Flex Builder.</description>
        <long-description>
</long-description>
        <tag line="22" name="package" description="Zend_Amf"/>
        <tag line="22" name="subpackage" description="Adobe"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" line="41" package="Default">
        <name>_connect</name>
        <docblock>
          <description>Connect to the database</description>
          <long-description>
</long-description>
          <tag line="33" name="param" description="Database adapter type for Zend_Db" type="string" variable="$dbType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="Adapter-specific connection settings" type="array|object" variable="$dbDescription">
            <type by_reference="false">array</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="33" name="return" description="" type="\Zend_Db_Adapter_Abstract">
            <type by_reference="false">\Zend_Db_Adapter_Abstract</type>
          </tag>
          <tag line="33" name="see" description="\Zend_Db::factory()" refers="\Zend_Db::factory()"/>
        </docblock>
        <argument line="41">
          <name>$dbType</name>
          <default/>
          <type/>
        </argument>
        <argument line="41">
          <name>$dbDescription</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="70" package="Default">
        <name>describeTable</name>
        <docblock>
          <description>Describe database object.</description>
          <long-description>&lt;p&gt;Usage example:
$inspector-&gt;describeTable('Pdo_Mysql',
    array(
        'host'     =&gt; '127.0.0.1',
        'username' =&gt; 'webuser',
        'password' =&gt; 'xxxxxxxx',
        'dbname'   =&gt; 'test'
    ),
    'mytable'
);&lt;/p&gt;
</long-description>
          <tag line="49" name="param" description="Database adapter type for Zend_Db" type="string" variable="$dbType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="param" description="Adapter-specific connection settings" type="array|object" variable="$dbDescription">
            <type by_reference="false">array</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="49" name="param" description="Table name" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="Table description" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="49" name="see" description="\Zend_Db::describeTable()" refers="\Zend_Db::describeTable()"/>
          <tag line="49" name="see" description="\Zend_Db::factory()" refers="\Zend_Db::factory()"/>
        </docblock>
        <argument line="70">
          <name>$dbType</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$dbDescription</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$tableName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="84" package="Default">
        <name>connect</name>
        <docblock>
          <description>Test database connection</description>
          <long-description>
</long-description>
          <tag line="76" name="param" description="Database adapter type for Zend_Db" type="string" variable="$dbType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="76" name="param" description="Adapter-specific connection settings" type="array|object" variable="$dbDescription">
            <type by_reference="false">array</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="76" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="76" name="see" description="\Zend_Db::factory()" refers="\Zend_Db::factory()"/>
        </docblock>
        <argument line="84">
          <name>$dbType</name>
          <default/>
          <type/>
        </argument>
        <argument line="84">
          <name>$dbDescription</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98" package="Default">
        <name>getTables</name>
        <docblock>
          <description>Get the list of database tables</description>
          <long-description>
</long-description>
          <tag line="91" name="param" description="Database adapter type for Zend_Db" type="string" variable="$dbType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="param" description="Adapter-specific connection settings" type="array|object" variable="$dbDescription">
            <type by_reference="false">array</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="91" name="return" description="List of the tables" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$dbType</name>
          <default/>
          <type/>
        </argument>
        <argument line="98">
          <name>$dbDescription</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Adobe/Introspector.php" hash="386a9828ef44695ec2a064dae883359f" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Introspector.php 25024 2012-07-30 15:08:15Z rob $"/>
    </docblock>
    <parse_markers>
      <critical line="50">No short description for property $_types</critical>
      <critical line="55">No short description for property $_typesMap</critical>
      <critical line="60">No short description for property $_xml</critical>
    </parse_markers>
    <include type="Require Once" line="23">
      <name>Zend/Amf/Parse/TypeLoader.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Reflection/Class.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Server/Reflection.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Amf\Adobe">
      <name>Zend_Amf_Adobe_Introspector</name>
      <extends/>
      <full_name>\Zend_Amf_Adobe_Introspector</full_name>
      <docblock>
        <description>This class implements a service for generating AMF service descriptions as XML.</description>
        <long-description>
</long-description>
        <tag line="31" name="package" description="Zend_Amf"/>
        <tag line="31" name="subpackage" description="Adobe"/>
        <tag line="31" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="31" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$_options</name>
        <default/>
        <docblock>
          <description>Options used:
- server: instance of Zend_Amf_Server to use
- directories: directories where class files may be looked up</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="Introspector options" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$_types</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="50" name="var" description="DOM element to store types" type="\DOMElement">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_typesMap</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="55" name="var" description="Map of the known types" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$_xml</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="60" name="var" description="XML document to store data" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="70" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="82" package="Default">
        <name>introspect</name>
        <docblock>
          <description>Create XML definition on an AMF service class</description>
          <long-description>
</long-description>
          <tag line="75" name="param" description="Service class name" type="string" variable="$serviceClass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="param" description="invocation options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="75" name="return" description="XML with service class introspection" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$serviceClass</name>
          <default/>
          <type/>
        </argument>
        <argument line="82">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121" package="Default">
        <name>initAcl</name>
        <docblock>
          <description>Authentication handler</description>
          <long-description>
</long-description>
          <tag line="115" name="param" description="" type="\Zend_Acl" variable="$acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
          <tag line="115" name="return" description="" type="\unknown_type">
            <type by_reference="false">\unknown_type</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$acl</name>
          <default/>
          <type>Zend_Acl</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="133" package="Default">
        <name>_addClassAttributes</name>
        <docblock>
          <description>Generate map of public class attributes</description>
          <long-description>
</long-description>
          <tag line="126" name="param" description="type name" type="string" variable="$typename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="param" description="target XML element" type="\DOMElement" variable="$typexml">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="126" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$typename</name>
          <default/>
          <type/>
        </argument>
        <argument line="133">
          <name>$typexml</name>
          <default/>
          <type>DOMElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="164" package="Default">
        <name>_addService</name>
        <docblock>
          <description>Build XML service description from reflection class</description>
          <long-description>
</long-description>
          <tag line="157" name="param" description="" type="\Zend_Server_Reflection_Class" variable="$refclass">
            <type by_reference="false">\Zend_Server_Reflection_Class</type>
          </tag>
          <tag line="157" name="param" description="target XML element" type="\DOMElement" variable="$target">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="157" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$refclass</name>
          <default/>
          <type>Zend_Server_Reflection_Class</type>
        </argument>
        <argument line="164">
          <name>$target</name>
          <default/>
          <type>DOMElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="211" package="Default">
        <name>_getPropertyType</name>
        <docblock>
          <description>Extract type of the property from DocBlock</description>
          <long-description>
</long-description>
          <tag line="205" name="param" description="reflection property object" type="\Zend_Reflection_Property" variable="$prop">
            <type by_reference="false">\Zend_Reflection_Property</type>
          </tag>
          <tag line="205" name="return" description="Property type" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$prop</name>
          <default/>
          <type>Zend_Reflection_Property</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="232" package="Default">
        <name>_getServicePath</name>
        <docblock>
          <description>Get the array of service directories</description>
          <long-description>
</long-description>
          <tag line="227" name="return" description="Service class directories" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="251" package="Default">
        <name>_phpTypeToAS</name>
        <docblock>
          <description>Map from PHP type name to AS type name</description>
          <long-description>
</long-description>
          <tag line="245" name="param" description="PHP type name" type="string" variable="$typename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="245" name="return" description="AS type name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="251">
          <name>$typename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="274" package="Default">
        <name>_registerType</name>
        <docblock>
          <description>Register new type on the system</description>
          <long-description>
</long-description>
          <tag line="268" name="param" description="type name" type="string" variable="$typename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="268" name="return" description="New type name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$typename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="314" package="Default">
        <name>_returnError</name>
        <docblock>
          <description>Return error with error message</description>
          <long-description>
</long-description>
          <tag line="308" name="param" description="Error message" type="string" variable="$msg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="308" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$msg</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Adobe/Auth.php" hash="f3c226f418af8352ea450de3726cdc16" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Auth.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="23">
      <name>Zend/Amf/Auth/Abstract.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Acl.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Auth/Result.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Amf\Adobe">
      <name>Zend_Amf_Adobe_Auth</name>
      <extends>\Zend_Amf_Auth_Abstract</extends>
      <full_name>\Zend_Amf_Adobe_Auth</full_name>
      <docblock>
        <description>This class implements authentication against XML file with roles for Flex Builder.</description>
        <long-description>
</long-description>
        <tag line="31" name="package" description="Zend_Amf"/>
        <tag line="31" name="subpackage" description="Adobe"/>
        <tag line="31" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="31" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_acl</name>
        <default/>
        <docblock>
          <description>ACL for authorization</description>
          <long-description>
</long-description>
          <tag line="42" name="var" description="" type="\Zend_Acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$_users</name>
        <default>array()</default>
        <docblock>
          <description>Username/password array</description>
          <long-description>
</long-description>
          <tag line="49" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="61" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Create auth adapter</description>
          <long-description>
</long-description>
          <tag line="56" name="param" description="File containing XML with users and roles" type="string" variable="$rolefile">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$rolefile</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="90" package="Default">
        <name>getAcl</name>
        <docblock>
          <description>Get ACL with roles from XML file</description>
          <long-description>
</long-description>
          <tag line="85" name="return" description="" type="\Zend_Acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="102" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Perform authentication</description>
          <long-description>
</long-description>
          <tag line="95" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="95" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
          <tag line="95" name="see" description="\Zend_Auth_Adapter_Interface#authenticate()" refers="\Zend_Auth_Adapter_Interface#authenticate()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Util/BinaryStream.php" hash="e72042d02676e1de5c1580332c0e74e1" package="Zend\Amf\Util">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Util"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: BinaryStream.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="33">No short description for property $_stream</critical>
      <critical line="38">No short description for property $_streamLength</critical>
      <critical line="43">No short description for property $_bigEndian</critical>
      <critical line="48">No short description for property $_needle</critical>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Amf\Util">
      <name>Zend_Amf_Util_BinaryStream</name>
      <extends/>
      <full_name>\Zend_Amf_Util_BinaryStream</full_name>
      <docblock>
        <description>Utility class to walk through a data stream byte by byte with conventional names</description>
        <long-description>
</long-description>
        <tag line="23" name="package" description="Zend_Amf"/>
        <tag line="23" name="subpackage" description="Util"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_stream</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="33" name="var" description="Byte stream" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$_streamLength</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="38" name="var" description="Length of stream" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_bigEndian</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="43" name="var" description="BigEndian encoding?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_needle</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="48" name="var" description="Current position in stream" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="63" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;Create a reference to a byte stream that is going to be parsed or created
by the methods in the class. Detect if the class should use big or
little Endian encoding.&lt;/p&gt;
</long-description>
          <tag line="53" name="param" description="use '' if creating a new stream or pass a string if reading." type="string" variable="$stream">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="81" package="Default">
        <name>getStream</name>
        <docblock>
          <description>Returns the current stream</description>
          <long-description>
</long-description>
          <tag line="76" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="94" package="Default">
        <name>readBytes</name>
        <docblock>
          <description>Read the number of bytes in a row for the length supplied.</description>
          <long-description>
</long-description>
          <tag line="86" name="todo" description="Should check that there are enough bytes left in the stream we are about to read."/>
          <tag line="86" name="param" description="" type="int" variable="$length">
            <type by_reference="false">int</type>
          </tag>
          <tag line="86" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="throws" description="for buffer underrun" type="\Zend_Amf_Exception">
            <type by_reference="false">\Zend_Amf_Exception</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>writeBytes</name>
        <docblock>
          <description>Write any length of bytes to the stream</description>
          <long-description>&lt;p&gt;Usually a string.&lt;/p&gt;
</long-description>
          <tag line="105" name="param" description="" type="string" variable="$bytes">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$bytes</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="124" package="Default">
        <name>readByte</name>
        <docblock>
          <description>Reads a signed byte</description>
          <long-description>
</long-description>
          <tag line="119" name="return" description="Value is in the range of -128 to 127." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>writeByte</name>
        <docblock>
          <description>Writes the passed string into a signed byte on the stream.</description>
          <long-description>
</long-description>
          <tag line="134" name="param" description="" type="string" variable="$stream">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151" package="Default">
        <name>readInt</name>
        <docblock>
          <description>Reads a signed 32-bit integer from the data stream.</description>
          <long-description>
</long-description>
          <tag line="146" name="return" description="Value is in the range of -2147483648 to 2147483647" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="162" package="Default">
        <name>writeInt</name>
        <docblock>
          <description>Write an the integer to the output stream as a 32 bit signed integer</description>
          <long-description>
</long-description>
          <tag line="156" name="param" description="" type="int" variable="$stream">
            <type by_reference="false">int</type>
          </tag>
          <tag line="156" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="173" package="Default">
        <name>readUtf</name>
        <docblock>
          <description>Reads a UTF-8 string from the data stream</description>
          <long-description>
</long-description>
          <tag line="168" name="return" description="A UTF-8 string produced by the byte representation of characters" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="185" package="Default">
        <name>writeUtf</name>
        <docblock>
          <description>Wite a UTF-8 string to the outputstream</description>
          <long-description>
</long-description>
          <tag line="179" name="param" description="" type="string" variable="$stream">
            <type by_reference="false">string</type>
          </tag>
          <tag line="179" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="198" package="Default">
        <name>readLongUtf</name>
        <docblock>
          <description>Read a long UTF string</description>
          <long-description>
</long-description>
          <tag line="193" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="210" package="Default">
        <name>writeLongUtf</name>
        <docblock>
          <description>Write a long UTF string to the buffer</description>
          <long-description>
</long-description>
          <tag line="204" name="param" description="" type="string" variable="$stream">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="221" package="Default">
        <name>readLong</name>
        <docblock>
          <description>Read a long numeric value</description>
          <long-description>
</long-description>
          <tag line="216" name="return" description="" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="232" package="Default">
        <name>writeLong</name>
        <docblock>
          <description>Write long numeric value to output stream</description>
          <long-description>
</long-description>
          <tag line="226" name="param" description="" type="int|string" variable="$stream">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="226" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="244" package="Default">
        <name>readUnsignedShort</name>
        <docblock>
          <description>Read a 16 bit unsigned short.</description>
          <long-description>
</long-description>
          <tag line="238" name="todo" description="This could use the unpack() w/ S,n, or v"/>
          <tag line="238" name="return" description="" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="256" package="Default">
        <name>readDouble</name>
        <docblock>
          <description>Reads an IEEE 754 double-precision floating point number from the data stream.</description>
          <long-description>
</long-description>
          <tag line="251" name="return" description="Floating point number" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="275" package="Default">
        <name>writeDouble</name>
        <docblock>
          <description>Writes an IEEE 754 double-precision floating point number from the data stream.</description>
          <long-description>
</long-description>
          <tag line="269" name="param" description="" type="string|double" variable="$stream">
            <type by_reference="false">string</type>
            <type by_reference="false">double</type>
          </tag>
          <tag line="269" name="return" description="" type="\Zend_Amf_Util_BinaryStream">
            <type by_reference="false">\Zend_Amf_Util_BinaryStream</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$stream</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Server.php" hash="350f3967236af28f0c1df5fb4d84fb8f" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Server.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="81">No short description for property $_production</critical>
      <critical line="104">No short description for property $_session</critical>
      <critical line="212">No short description for method setSession</critical>
      <notice line="302">Name of argument $params does not match with function Docblock</notice>
      <notice line="302">Argument $source is missing from the function Docblock</notice>
      <notice line="760">Name of argument $argv does not match with function Docblock</notice>
      <notice line="901">Argument $code is missing from the function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="23">
      <name>Zend/Server/Interface.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Server/Reflection.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="32">
      <name>Zend/Amf/Value/MessageBody.php</name>
    </include>
    <include type="Require Once" line="35">
      <name>Zend/Amf/Value/MessageHeader.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>Zend/Amf/Value/Messaging/CommandMessage.php</name>
    </include>
    <include type="Require Once" line="41">
      <name>Zend/Loader/PluginLoader.php</name>
    </include>
    <include type="Require Once" line="44">
      <name>Zend/Amf/Parse/TypeLoader.php</name>
    </include>
    <include type="Require Once" line="47">
      <name>Zend/Auth.php</name>
    </include>
    <class final="false" abstract="false" line="58" namespace="default" package="Zend\Amf\Server">
      <name>Zend_Amf_Server</name>
      <extends/>
      <full_name>\Zend_Amf_Server</full_name>
      <docblock>
        <description>An AMF gateway server implementation to allow the connection of the Adobe Flash Player to
Zend Framework</description>
        <long-description>
</long-description>
        <tag line="48" name="todo" description="Make the reflection methods cache and autoload."/>
        <tag line="48" name="package" description="Zend_Amf"/>
        <tag line="48" name="subpackage" description="Server"/>
        <tag line="48" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="48" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Server_Interface</implements>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_methods</name>
        <default>array()</default>
        <docblock>
          <description>Array of dispatchables</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$_classAllowed</name>
        <default>array()</default>
        <docblock>
          <description>Array of classes that can be called without being explicitly loaded</description>
          <long-description>&lt;p&gt;Keys are class names.&lt;/p&gt;
</long-description>
          <tag line="66" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$_loader</name>
        <default/>
        <docblock>
          <description>Loader for classes in added directories</description>
          <long-description>
</long-description>
          <tag line="75" name="var" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" package="Default">
        <name>$_production</name>
        <default>true</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="81" name="var" description="Production flag; whether or not to return exception messages" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Default">
        <name>$_request</name>
        <default>null</default>
        <docblock>
          <description>Request processed</description>
          <long-description>
</long-description>
          <tag line="86" name="var" description="" type="null|\Zend_Amf_Request">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="96" package="Default">
        <name>$_response</name>
        <default/>
        <docblock>
          <description>Class to use for responses</description>
          <long-description>
</long-description>
          <tag line="92" name="var" description="" type="null|\Zend_Amf_Response">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="102" package="Default">
        <name>$_table</name>
        <default>array()</default>
        <docblock>
          <description>Dispatch table of name =&gt; method pairs</description>
          <long-description>
</long-description>
          <tag line="98" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="108" package="Default">
        <name>$_session</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="104" name="var" description="session flag; whether or not to add a session to each response." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="114" package="Default">
        <name>$_sesionNamespace</name>
        <default>'zend_amf'</default>
        <docblock>
          <description>Namespace allows all AMF calls to not clobber other PHP session variables</description>
          <long-description>
</long-description>
          <tag line="110" name="var" description="default session namespace zend_amf" type="\Zend_Session_NameSpace">
            <type by_reference="false">\Zend_Session_NameSpace</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="120" package="Default">
        <name>$_sessionName</name>
        <default>'PHPSESSID'</default>
        <docblock>
          <description>Set the default session.name if php_</description>
          <long-description>
</long-description>
          <tag line="116" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="127" package="Default">
        <name>$_auth</name>
        <default/>
        <docblock>
          <description>Authentication handler object</description>
          <long-description>
</long-description>
          <tag line="122" name="var" description="" type="\Zend_Amf_Auth_Abstract">
            <type by_reference="false">\Zend_Amf_Auth_Abstract</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="133" package="Default">
        <name>$_acl</name>
        <default/>
        <docblock>
          <description>ACL handler object</description>
          <long-description>
</long-description>
          <tag line="128" name="var" description="" type="\Zend_Acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="137" package="Default">
        <name>__construct</name>
        <docblock>
          <description>The server constructor</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151" package="Default">
        <name>setAuth</name>
        <docblock>
          <description>Set authentication adapter</description>
          <long-description>&lt;p&gt;If the authentication adapter implements a "getAcl()" method, populate
the ACL of this instance with it (if none exists already).&lt;/p&gt;
</long-description>
          <tag line="142" name="param" description="" type="\Zend_Amf_Auth_Abstract" variable="$auth">
            <type by_reference="false">\Zend_Amf_Auth_Abstract</type>
          </tag>
          <tag line="142" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$auth</name>
          <default/>
          <type>Zend_Amf_Auth_Abstract</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="164" package="Default">
        <name>getAuth</name>
        <docblock>
          <description>Get authentication adapter</description>
          <long-description>
</long-description>
          <tag line="159" name="return" description="" type="\Zend_Amf_Auth_Abstract">
            <type by_reference="false">\Zend_Amf_Auth_Abstract</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="175" package="Default">
        <name>setAcl</name>
        <docblock>
          <description>Set ACL adapter</description>
          <long-description>
</long-description>
          <tag line="169" name="param" description="" type="\Zend_Acl" variable="$acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
          <tag line="169" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$acl</name>
          <default/>
          <type>Zend_Acl</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="185" package="Default">
        <name>getAcl</name>
        <docblock>
          <description>Get ACL adapter</description>
          <long-description>
</long-description>
          <tag line="180" name="return" description="" type="\Zend_Acl">
            <type by_reference="false">\Zend_Acl</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="196" package="Default">
        <name>setProduction</name>
        <docblock>
          <description>Set production flag</description>
          <long-description>
</long-description>
          <tag line="190" name="param" description="" type="bool" variable="$flag">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="190" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="207" package="Default">
        <name>isProduction</name>
        <docblock>
          <description>Whether or not the server is in production</description>
          <long-description>
</long-description>
          <tag line="202" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="216" package="Default">
        <name>setSession</name>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="212" name="param" description="of all incoming sessions defaults to Zend_Amf" type="\default" variable="$namespace">
            <type by_reference="false">\default</type>
          </tag>
          <tag line="212" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="216">
          <name>$namespace</name>
          <default>'Zend_Amf'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="228" package="Default">
        <name>isSession</name>
        <docblock>
          <description>Whether of not the server is using sessions</description>
          <long-description>
</long-description>
          <tag line="224" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="240" package="Default">
        <name>_checkAcl</name>
        <docblock>
          <description>Check if the ACL allows accessing the function or method</description>
          <long-description>
</long-description>
          <tag line="233" name="param" description="Object or class being accessed" type="string|object" variable="$object">
            <type by_reference="false">string</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="233" name="param" description="Function or method being accessed" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="return" description="" type="\unknown_type">
            <type by_reference="false">\unknown_type</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
        <argument line="240">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="284" package="Default">
        <name>getLoader</name>
        <docblock>
          <description>Get PluginLoader for the Server</description>
          <long-description>
</long-description>
          <tag line="279" name="return" description="" type="\Zend_Loader_PluginLoader">
            <type by_reference="false">\Zend_Loader_PluginLoader</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="302" package="Default">
        <name>_dispatch</name>
        <docblock>
          <description>Loads a remote class or method and executes the function and returns
the result</description>
          <long-description>
</long-description>
          <tag line="293" name="param" description="Is the method to execute" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="293" name="param" description="values for the method" type="mixed" variable="$param">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="293" name="return" description="$response the result of executing the method" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="293" name="throws" description="" type="\Zend_Amf_Server_Exception">
            <type by_reference="false">\Zend_Amf_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="302">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="302">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="302">
          <name>$source</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="387" package="Default">
        <name>_loadCommandMessage</name>
        <docblock>
          <description>Handles each of the 11 different command message types.</description>
          <long-description>&lt;p&gt;A command message is a flex.messaging.messages.CommandMessage&lt;/p&gt;
</long-description>
          <tag line="378" name="see" description="\Zend_Amf_Value_Messaging_CommandMessage" refers="\Zend_Amf_Value_Messaging_CommandMessage"/>
          <tag line="378" name="param" description="" type="\Zend_Amf_Value_Messaging_CommandMessage" variable="$message">
            <type by_reference="false">\Zend_Amf_Value_Messaging_CommandMessage</type>
          </tag>
          <tag line="378" name="return" description="" type="\Zend_Amf_Value_Messaging_AcknowledgeMessage">
            <type by_reference="false">\Zend_Amf_Value_Messaging_AcknowledgeMessage</type>
          </tag>
        </docblock>
        <argument line="387">
          <name>$message</name>
          <default/>
          <type>Zend_Amf_Value_Messaging_CommandMessage</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="434" package="Default">
        <name>_errorMessage</name>
        <docblock>
          <description>Create appropriate error message</description>
          <long-description>
</long-description>
          <tag line="423" name="param" description="Current AMF encoding" type="int" variable="$objectEncoding">
            <type by_reference="false">int</type>
          </tag>
          <tag line="423" name="param" description="Message that was being processed when error happened" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="423" name="param" description="Error description" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="423" name="param" description="Detailed data about the error" type="mixed" variable="$detail">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="423" name="param" description="Error code" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="423" name="param" description="Error line" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="423" name="return" description="" type="\Zend_Amf_Value_Messaging_ErrorMessage|array">
            <type by_reference="false">\Zend_Amf_Value_Messaging_ErrorMessage</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="434">
          <name>$objectEncoding</name>
          <default/>
          <type/>
        </argument>
        <argument line="434">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="434">
          <name>$description</name>
          <default/>
          <type/>
        </argument>
        <argument line="434">
          <name>$detail</name>
          <default/>
          <type/>
        </argument>
        <argument line="434">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="434">
          <name>$line</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="463" package="Default">
        <name>_handleAuth</name>
        <docblock>
          <description>Handle AMF authentication</description>
          <long-description>
</long-description>
          <tag line="456" name="param" description="" type="string" variable="$userid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="456" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="456" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$userid</name>
          <default/>
          <type/>
        </argument>
        <argument line="463">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="495" package="Default">
        <name>_handle</name>
        <docblock>
          <description>Takes the deserialized AMF request and performs any operations.</description>
          <long-description>
</long-description>
          <tag line="486" name="todo" description="should implement and SPL observer pattern for custom AMF headers"/>
          <tag line="486" name="todo" description="DescribeService support"/>
          <tag line="486" name="param" description="" type="\Zend_Amf_Request" variable="$request">
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
          <tag line="486" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
          <tag line="486" name="throws" description="" type="\Zend_Amf_server_Exception|\Exception">
            <type by_reference="false">\Zend_Amf_server_Exception</type>
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="495">
          <name>$request</name>
          <default/>
          <type>Zend_Amf_Request</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="641" package="Default">
        <name>handle</name>
        <docblock>
          <description>Handle an AMF call from the gateway.</description>
          <long-description>
</long-description>
          <tag line="635" name="param" description="Optional" type="null|\Zend_Amf_Request" variable="$request">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
          <tag line="635" name="return" description="" type="\Zend_Amf_Response">
            <type by_reference="false">\Zend_Amf_Response</type>
          </tag>
        </docblock>
        <argument line="641">
          <name>$request</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="678" package="Default">
        <name>setRequest</name>
        <docblock>
          <description>Set request object</description>
          <long-description>
</long-description>
          <tag line="672" name="param" description="" type="string|\Zend_Amf_Request" variable="$request">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
          <tag line="672" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="678">
          <name>$request</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="699" package="Default">
        <name>getRequest</name>
        <docblock>
          <description>Return currently registered request object</description>
          <long-description>
</long-description>
          <tag line="694" name="return" description="" type="null|\Zend_Amf_Request">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="715" package="Default">
        <name>setResponse</name>
        <docblock>
          <description>Public access method to private Zend_Amf_Server_Response reference</description>
          <long-description>
</long-description>
          <tag line="709" name="param" description="" type="string|\Zend_Amf_Server_Response" variable="$response">
            <type by_reference="false">string</type>
            <type by_reference="false">\Zend_Amf_Server_Response</type>
          </tag>
          <tag line="709" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="715">
          <name>$response</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="736" package="Default">
        <name>getResponse</name>
        <docblock>
          <description>get a reference to the Zend_Amf_response instance</description>
          <long-description>
</long-description>
          <tag line="731" name="return" description="" type="\Zend_Amf_Server_Response">
            <type by_reference="false">\Zend_Amf_Server_Response</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="760" package="Default">
        <name>setClass</name>
        <docblock>
          <description>Attach a class or object to the server</description>
          <long-description>&lt;p&gt;Class may be either a class name or an instantiated object. Reflection
is done on the class or object to determine the available public
methods, and each is attached to the server as and available method. If
a $namespace has been provided, that namespace is used to prefix
AMF service call.&lt;/p&gt;
</long-description>
          <tag line="745" name="param" description="" type="string|object" variable="$class">
            <type by_reference="false">string</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="745" name="param" description="Optional" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="745" name="param" description="Optional arguments to pass to a method" type="mixed" variable="$arg">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="745" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
          <tag line="745" name="throws" description="on invalid input" type="\Zend_Amf_Server_Exception">
            <type by_reference="false">\Zend_Amf_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="760">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="760">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="760">
          <name>$argv</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="801" package="Default">
        <name>addFunction</name>
        <docblock>
          <description>Attach a function to the server</description>
          <long-description>&lt;p&gt;Additional arguments to pass to the function at dispatch may be passed;
any arguments following the namespace will be aggregated and passed at
dispatch time.&lt;/p&gt;
</long-description>
          <tag line="789" name="param" description="Valid callback" type="string|array" variable="$function">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="789" name="param" description="Optional namespace prefix" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="789" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
          <tag line="789" name="throws" description="" type="\Zend_Amf_Server_Exception">
            <type by_reference="false">\Zend_Amf_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="801">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
        <argument line="801">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="833" package="Default">
        <name>addDirectory</name>
        <docblock>
          <description>Creates an array of directories in which services can reside.</description>
          <long-description>&lt;p&gt;TODO: add support for prefixes?&lt;/p&gt;
</long-description>
          <tag line="827" name="param" description="" type="string" variable="$dir">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="833">
          <name>$dir</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="843" package="Default">
        <name>getDirectory</name>
        <docblock>
          <description>Returns an array of directories that can hold services.</description>
          <long-description>
</long-description>
          <tag line="838" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="856" package="Default">
        <name>_buildDispatchTable</name>
        <docblock>
          <description>(Re)Build the dispatch table</description>
          <long-description>&lt;p&gt;The dispatch table consists of a an array of method name =&gt;
Zend_Server_Reflection_Function_Abstract pairs&lt;/p&gt;
</long-description>
          <tag line="848" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="901" package="Default">
        <name>fault</name>
        <docblock>
          <description>Raise a server fault</description>
          <long-description>&lt;p&gt;Unimplemented&lt;/p&gt;
</long-description>
          <tag line="893" name="param" description="" type="string|\Exception" variable="$fault">
            <type by_reference="false">string</type>
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="893" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="901">
          <name>$fault</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="901">
          <name>$code</name>
          <default>404</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="913" package="Default">
        <name>getFunctions</name>
        <docblock>
          <description>Returns a list of registered methods</description>
          <long-description>&lt;p&gt;Returns an array of dispatchables (Zend_Server_Reflection_Function,
_Method, and _Class items).&lt;/p&gt;
</long-description>
          <tag line="905" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="926" package="Default">
        <name>setPersistence</name>
        <docblock>
          <description>Set server persistence</description>
          <long-description>&lt;p&gt;Unimplemented&lt;/p&gt;
</long-description>
          <tag line="918" name="param" description="" type="mixed" variable="$mode">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="918" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="926">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="938" package="Default">
        <name>loadFunctions</name>
        <docblock>
          <description>Load server definition</description>
          <long-description>&lt;p&gt;Unimplemented&lt;/p&gt;
</long-description>
          <tag line="930" name="param" description="" type="array" variable="$definition">
            <type by_reference="false">array</type>
          </tag>
          <tag line="930" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="938">
          <name>$definition</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="949" package="Default">
        <name>setClassMap</name>
        <docblock>
          <description>Map ActionScript classes to PHP classes</description>
          <long-description>
</long-description>
          <tag line="942" name="param" description="" type="string" variable="$asClass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="942" name="param" description="" type="string" variable="$phpClass">
            <type by_reference="false">string</type>
          </tag>
          <tag line="942" name="return" description="" type="\Zend_Amf_Server">
            <type by_reference="false">\Zend_Amf_Server</type>
          </tag>
        </docblock>
        <argument line="949">
          <name>$asClass</name>
          <default/>
          <type/>
        </argument>
        <argument line="949">
          <name>$phpClass</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="963" package="Default">
        <name>listMethods</name>
        <docblock>
          <description>List all available methods</description>
          <long-description>&lt;p&gt;Returns an array of method names.&lt;/p&gt;
</long-description>
          <tag line="956" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="978" package="Default">
        <name>_castParameters</name>
        <docblock>
          <description>Cast parameters</description>
          <long-description>&lt;p&gt;Takes the provided parameters from the request, and attempts to cast them
to objects, if the prototype defines any as explicit object types&lt;/p&gt;
</long-description>
          <tag line="968" name="param" description="" type="\Reflection" variable="$reflectionMethod">
            <type by_reference="false">\Reflection</type>
          </tag>
          <tag line="968" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="968" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="978">
          <name>$reflectionMethod</name>
          <default/>
          <type/>
        </argument>
        <argument line="978">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Response/Http.php" hash="2b02f49d94a7b2008dd3ee3f57ed27e5" package="Zend\Amf\Response">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="subpackage" description="Response"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Http.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <error line="57">No DocBlock was found for Method isIeOverSsl</error>
    </parse_markers>
    <include type="Require Once" line="24">
      <name>Zend/Amf/Response.php</name>
    </include>
    <class final="false" abstract="false" line="34" namespace="default" package="Zend\Amf\Response">
      <name>Zend_Amf_Response_Http</name>
      <extends>\Zend_Amf_Response</extends>
      <full_name>\Zend_Amf_Response_Http</full_name>
      <docblock>
        <description>Creates the proper http headers and send the serialized AMF stream to standard out.</description>
        <long-description>
</long-description>
        <tag line="26" name="package" description="Zend_Amf"/>
        <tag line="26" name="subpackage" description="Response"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="41" package="Default">
        <name>getResponse</name>
        <docblock>
          <description>Create the application response header for AMF and sends the serialized AMF string</description>
          <long-description>
</long-description>
          <tag line="36" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="57" package="Default">
        <name>isIeOverSsl</name>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Auth/Abstract.php" hash="ce9b1f2b40669d9ebfdda682dc0453a0" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Abstract.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <error line="35">No DocBlock was found for Property $_username</error>
      <error line="36">No DocBlock was found for Property $_password</error>
      <error line="38">No DocBlock was found for Method setCredentials</error>
    </parse_markers>
    <include type="Require Once" line="23">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <class final="false" abstract="true" line="33" namespace="default" package="Zend\Amf\Auth">
      <name>Zend_Amf_Auth_Abstract</name>
      <extends/>
      <full_name>\Zend_Amf_Auth_Abstract</full_name>
      <docblock>
        <description>Base abstract class for AMF authentication implementation</description>
        <long-description>
</long-description>
        <tag line="25" name="package" description="Zend_Amf"/>
        <tag line="25" name="subpackage" description="Auth"/>
        <tag line="25" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="25" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$_username</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_password</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="38" package="Default">
        <name>setCredentials</name>
        <argument line="38">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="38">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Amf/Request.php" hash="cc647a61e1ffe1d5546472a8b03758b9" package="Zend\Amf">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Amf"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Request.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="48">No short description for property $_clientType</critical>
      <critical line="53">No short description for property $_bodies</critical>
      <critical line="58">No short description for property $_headers</critical>
      <critical line="63">No short description for property $_objectEncoding</critical>
      <critical line="68">No short description for property $_inputStream</critical>
      <critical line="73">No short description for property $_deserializer</critical>
    </parse_markers>
    <include type="Require Once" line="23">
      <name>Zend/Amf/Parse/InputStream.php</name>
    </include>
    <include type="Require Once" line="26">
      <name>Zend/Amf/Parse/Amf0/Deserializer.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Amf/Constants.php</name>
    </include>
    <include type="Require Once" line="32">
      <name>Zend/Amf/Value/MessageHeader.php</name>
    </include>
    <include type="Require Once" line="35">
      <name>Zend/Amf/Value/MessageBody.php</name>
    </include>
    <class final="false" abstract="false" line="46" namespace="default" package="Zend\Amf">
      <name>Zend_Amf_Request</name>
      <extends/>
      <full_name>\Zend_Amf_Request</full_name>
      <docblock>
        <description>Handle the incoming AMF request by deserializing the data to php object
types and storing the data for Zend_Amf_Server to handle for processing.</description>
        <long-description>
</long-description>
        <tag line="37" name="todo" description="Currently not checking if the object needs to be Type Mapped to a server object."/>
        <tag line="37" name="package" description="Zend_Amf"/>
        <tag line="37" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="37" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_clientType</name>
        <default>0</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="48" name="var" description="AMF client type (AMF0, AMF3)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$_bodies</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="53" name="var" description="Message bodies" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$_headers</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="58" name="var" description="Message headers" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" package="Default">
        <name>$_objectEncoding</name>
        <default>0</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="63" name="var" description="Message encoding to use for objects in response" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$_inputStream</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="68" name="var" description="" type="\Zend_Amf_Parse_InputStream">
            <type by_reference="false">\Zend_Amf_Parse_InputStream</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="76" package="Default">
        <name>$_deserializer</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="73" name="var" description="" type="\Zend_Amf_Parse_AMF0_Deserializer">
            <type by_reference="false">\Zend_Amf_Parse_AMF0_Deserializer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$_time</name>
        <default/>
        <docblock>
          <description>Time of the request</description>
          <long-description>
</long-description>
          <tag line="78" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="90" package="Default">
        <name>initialize</name>
        <docblock>
          <description>Prepare the AMF InputStream for parsing.</description>
          <long-description>
</long-description>
          <tag line="84" name="param" description="" type="string" variable="$request">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="" type="\Zend_Amf_Request">
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$request</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="104" package="Default">
        <name>readMessage</name>
        <docblock>
          <description>Takes the raw AMF input stream and converts it into valid PHP objects</description>
          <long-description>
</long-description>
          <tag line="98" name="param" description="Zend_Amf_Parse_InputStream" type="" variable="$stream"/>
          <tag line="98" name="return" description="" type="\Zend_Amf_Request">
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$stream</name>
          <default/>
          <type>Zend_Amf_Parse_InputStream</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144" package="Default">
        <name>readHeader</name>
        <docblock>
          <description>Deserialize a message header from the input stream.</description>
          <long-description>&lt;p&gt;A message header is structured as:
- NAME String
- MUST UNDERSTAND Boolean
- LENGTH Int
- DATA Object&lt;/p&gt;
</long-description>
          <tag line="133" name="return" description="" type="\Zend_Amf_Value_MessageHeader">
            <type by_reference="false">\Zend_Amf_Value_MessageHeader</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>readBody</name>
        <docblock>
          <description>Deserialize a message body from the input stream</description>
          <long-description>
</long-description>
          <tag line="161" name="return" description="" type="\Zend_Amf_Value_MessageBody">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="203" package="Default">
        <name>getAmfBodies</name>
        <docblock>
          <description>Return an array of the body objects that were found in the amf request.</description>
          <long-description>
</long-description>
          <tag line="198" name="return" description="{target, response, length, content}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="214" package="Default">
        <name>addAmfBody</name>
        <docblock>
          <description>Accessor to private array of message bodies.</description>
          <long-description>
</long-description>
          <tag line="208" name="param" description="" type="\Zend_Amf_Value_MessageBody" variable="$message">
            <type by_reference="false">\Zend_Amf_Value_MessageBody</type>
          </tag>
          <tag line="208" name="return" description="" type="\Zend_Amf_Request">
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$message</name>
          <default/>
          <type>Zend_Amf_Value_MessageBody</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="225" package="Default">
        <name>getAmfHeaders</name>
        <docblock>
          <description>Return an array of headers that were found in the amf request.</description>
          <long-description>
</long-description>
          <tag line="220" name="return" description="{operation, mustUnderstand, length, param}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="235" package="Default">
        <name>getObjectEncoding</name>
        <docblock>
          <description>Return the either 0 or 3 for respect AMF version</description>
          <long-description>
</long-description>
          <tag line="230" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="246" package="Default">
        <name>setObjectEncoding</name>
        <docblock>
          <description>Set the object response encoding</description>
          <long-description>
</long-description>
          <tag line="240" name="param" description="" type="mixed" variable="$int">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="240" name="return" description="" type="\Zend_Amf_Request">
            <type by_reference="false">\Zend_Amf_Request</type>
          </tag>
        </docblock>
        <argument line="246">
          <name>$int</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Definition.php" hash="ac1eda309a7ae3b6069694b9cc856382" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Definition.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="33">No short description for property $_methods</critical>
      <critical line="38">No short description for property $_overwriteExistingMethods</critical>
    </parse_markers>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Server">
      <name>Zend_Server_Definition</name>
      <extends/>
      <full_name>\Zend_Server_Definition</full_name>
      <docblock>
        <description>Server methods metadata</description>
        <long-description>
</long-description>
        <tag line="22" name="todo" description="Implement iterator"/>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Server"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Countable</implements>
      <implements>\Iterator</implements>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$_methods</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="33" name="var" description="Array of Zend_Server_Method_Definition objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$_overwriteExistingMethods</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="38" name="var" description="Whether or not overwriting existing methods is allowed" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="49" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="43" name="param" description="" type="null|array" variable="$methods">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$methods</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="62" package="Default">
        <name>setOverwriteExistingMethods</name>
        <docblock>
          <description>Set flag indicating whether or not overwriting existing methods is allowed</description>
          <long-description>
</long-description>
          <tag line="56" name="param" description="" type="mixed" variable="$flag">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="76" package="Default">
        <name>addMethod</name>
        <docblock>
          <description>Add method to definition</description>
          <long-description>
</long-description>
          <tag line="68" name="param" description="" type="array|\Zend_Server_Method_Definition" variable="$method">
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
          <tag line="68" name="param" description="" type="null|string" variable="$name">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
          <tag line="68" name="throws" description="if duplicate or invalid method provided" type="\Zend_Server_Exception">
            <type by_reference="false">\Zend_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="76">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>addMethods</name>
        <docblock>
          <description>Add multiple methods</description>
          <long-description>
</long-description>
          <tag line="107" name="param" description="Array of Zend_Server_Method_Definition objects or arrays" type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$methods</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="127" package="Default">
        <name>setMethods</name>
        <docblock>
          <description>Set all methods at once (overwrite)</description>
          <long-description>
</long-description>
          <tag line="121" name="param" description="Array of Zend_Server_Method_Definition objects or arrays" type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$methods</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>hasMethod</name>
        <docblock>
          <description>Does the definition have the given method?</description>
          <long-description>
</long-description>
          <tag line="134" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151" package="Default">
        <name>getMethod</name>
        <docblock>
          <description>Get a given method definition</description>
          <long-description>
</long-description>
          <tag line="145" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="return" description="" type="null|\Zend_Server_Method_Definition">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="164" package="Default">
        <name>getMethods</name>
        <docblock>
          <description>Get all method definitions</description>
          <long-description>
</long-description>
          <tag line="159" name="return" description="Array of Zend_Server_Method_Definition objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="175" package="Default">
        <name>removeMethod</name>
        <docblock>
          <description>Remove a method definition</description>
          <long-description>
</long-description>
          <tag line="169" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="169" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="188" package="Default">
        <name>clearMethods</name>
        <docblock>
          <description>Clear all method definitions</description>
          <long-description>
</long-description>
          <tag line="183" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="199" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Cast definition to an array</description>
          <long-description>
</long-description>
          <tag line="194" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="213" package="Default">
        <name>count</name>
        <docblock>
          <description>Countable: count of methods</description>
          <long-description>
</long-description>
          <tag line="208" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="223" package="Default">
        <name>current</name>
        <docblock>
          <description>Iterator: current item</description>
          <long-description>
</long-description>
          <tag line="218" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="233" package="Default">
        <name>key</name>
        <docblock>
          <description>Iterator: current item key</description>
          <long-description>
</long-description>
          <tag line="228" name="return" description="" type="int|string">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="243" package="Default">
        <name>next</name>
        <docblock>
          <description>Iterator: advance to next method</description>
          <long-description>
</long-description>
          <tag line="238" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="253" package="Default">
        <name>rewind</name>
        <docblock>
          <description>Iterator: return to first method</description>
          <long-description>
</long-description>
          <tag line="248" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263" package="Default">
        <name>valid</name>
        <docblock>
          <description>Iterator: is the current index valid?</description>
          <long-description>
</long-description>
          <tag line="258" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Exception.php" hash="ece3f804041f24a1f54b85f4da27a71a" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="33" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Server_Exception</full_name>
      <docblock>
        <description>Zend_Server_Reflection exceptions</description>
        <long-description>
</long-description>
        <tag line="26" name="package" description="Zend_Server"/>
        <tag line="26" name="subpackage" description="Reflection"/>
        <tag line="26" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Server/Reflection.php" hash="fabd9c3edb41666561a8755efd6a82ed" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/Function.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Server/Reflection/Class.php</name>
    </include>
    <class final="false" abstract="false" line="41" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection</name>
      <extends/>
      <full_name>\Zend_Server_Reflection</full_name>
      <docblock>
        <description>Reflection for determining method signatures to use with server classes</description>
        <long-description>
</long-description>
        <tag line="31" name="category" description="Zend"/>
        <tag line="31" name="package" description="Zend_Server"/>
        <tag line="31" name="subpackage" description="Reflection"/>
        <tag line="31" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="31" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="31" name="version" description="$Id: Reflection.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" line="60" package="Default">
        <name>reflectClass</name>
        <docblock>
          <description>Perform class reflection to create dispatch signatures</description>
          <long-description>&lt;p&gt;Creates a {@link Zend_Server_Reflection_Class} object for the class or
object provided.&lt;/p&gt;

&lt;p&gt;If extra arguments should be passed to dispatchable methods, these may
be provided as an array to $argv.&lt;/p&gt;
</long-description>
          <tag line="43" name="param" description="Class name or object" type="string|object" variable="$class">
            <type by_reference="false">string</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="43" name="param" description="Optional arguments to be used during the method call" type="null|array" variable="$argv">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="param" description="Optional namespace with which to prefix the method name (used for the signature key). Primarily to avoid collisions, also for XmlRpc namespacing" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="\Zend_Server_Reflection_Class">
            <type by_reference="false">\Zend_Server_Reflection_Class</type>
          </tag>
          <tag line="43" name="throws" description="" type="\Zend_Server_Reflection_Exception">
            <type by_reference="false">\Zend_Server_Reflection_Exception</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="60">
          <name>$argv</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="60">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="96" package="Default">
        <name>reflectFunction</name>
        <docblock>
          <description>Perform function reflection to create dispatch signatures</description>
          <long-description>&lt;p&gt;Creates dispatch prototypes for a function. It returns a
{@link Zend_Server_Reflection_Function} object.&lt;/p&gt;

&lt;p&gt;If extra arguments should be passed to the dispatchable function, these
may be provided as an array to $argv.&lt;/p&gt;
</long-description>
          <tag line="79" name="param" description="Function name" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="Optional arguments to be used during the method call" type="null|array" variable="$argv">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="Optional namespace with which to prefix the function name (used for the signature key). Primarily to avoid collisions, also for XmlRpc namespacing" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="return" description="" type="\Zend_Server_Reflection_Function">
            <type by_reference="false">\Zend_Server_Reflection_Function</type>
          </tag>
          <tag line="79" name="throws" description="" type="\Zend_Server_Reflection_Exception">
            <type by_reference="false">\Zend_Server_Reflection_Exception</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
        <argument line="96">
          <name>$argv</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="96">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Cache.php" hash="af3374385c231b613efe9adf975ecc3b" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Cache.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="32">No short description for property $_skipMethods</critical>
    </parse_markers>
    <class final="false" abstract="false" line="30" namespace="default" package="Zend\Server">
      <name>Zend_Server_Cache</name>
      <extends/>
      <full_name>\Zend_Server_Cache</full_name>
      <docblock>
        <description>Zend_Server_Cache: cache server definitions</description>
        <long-description>
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Server"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="35" package="Default">
        <name>$_skipMethods</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="32" name="var" description="Methods to skip when caching server" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="50" package="Default">
        <name>save</name>
        <docblock>
          <description>Cache a file containing the dispatch list.</description>
          <long-description>&lt;p&gt;Serializes the server definition stores the information
in $filename.&lt;/p&gt;

&lt;p&gt;Returns false on any error (typically, inability to write to file), true
on success.&lt;/p&gt;
</long-description>
          <tag line="37" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="\Zend_Server_Interface" variable="$server">
            <type by_reference="false">\Zend_Server_Interface</type>
          </tag>
          <tag line="37" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$server</name>
          <default/>
          <type>Zend_Server_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="109" package="Default">
        <name>get</name>
        <docblock>
          <description>Load server definition from a file</description>
          <long-description>&lt;p&gt;Unserializes a stored server definition from $filename. Returns false if
it fails in any way, true on success.&lt;/p&gt;

&lt;p&gt;Useful to prevent needing to build the server definition on each
request. Sample usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!Zend_Server_Cache::get($filename, $server)) {
    require_once 'Some/Service/Class.php';
    require_once 'Another/Service/Class.php';

    // Attach Some_Service_Class with namespace 'some'
    $server-&gt;attach('Some_Service_Class', 'some');

    // Attach Another_Service_Class with namespace 'another'
    $server-&gt;attach('Another_Service_Class', 'another');

    Zend_Server_Cache::save($filename, $server);
}

$response = $server-&gt;handle();
echo $response;
&lt;/code&gt;&lt;/pre&gt;
</long-description>
          <tag line="78" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="" type="\Zend_Server_Interface" variable="$server">
            <type by_reference="false">\Zend_Server_Interface</type>
          </tag>
          <tag line="78" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$server</name>
          <default/>
          <type>Zend_Server_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="138" package="Default">
        <name>delete</name>
        <docblock>
          <description>Remove a cache file</description>
          <long-description>
</long-description>
          <tag line="132" name="param" description="" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Method/Callback.php" hash="f669c957f430e44bc2a2bba92fef26f4" package="Zend\Server\Method">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="subpackage" description="Method"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Callback.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $_class</critical>
      <critical line="39">No short description for property $_function</critical>
      <critical line="44">No short description for property $_method</critical>
      <critical line="49">No short description for property $_type</critical>
      <critical line="54">No short description for property $_types</critical>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Server\Method">
      <name>Zend_Server_Method_Callback</name>
      <extends/>
      <full_name>\Zend_Server_Method_Callback</full_name>
      <docblock>
        <description>Method callback metadata</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Server"/>
        <tag line="23" name="subpackage" description="Method"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_class</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="Class name for class method callback" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$_function</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="39" name="var" description="Function name for function callback" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_method</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="44" name="var" description="Method name for class method callback" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_type</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="49" name="var" description="Callback type" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$_types</name>
        <default>array('function'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="54" name="var" description="Valid callback types" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="59" name="param" description="" type="null|array" variable="$options">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="78" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Set object state from array of options</description>
          <long-description>
</long-description>
          <tag line="72" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95" package="Default">
        <name>setClass</name>
        <docblock>
          <description>Set callback class</description>
          <long-description>
</long-description>
          <tag line="89" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="109" package="Default">
        <name>getClass</name>
        <docblock>
          <description>Get callback class</description>
          <long-description>
</long-description>
          <tag line="104" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="120" package="Default">
        <name>setFunction</name>
        <docblock>
          <description>Set callback function</description>
          <long-description>
</long-description>
          <tag line="114" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="132" package="Default">
        <name>getFunction</name>
        <docblock>
          <description>Get callback function</description>
          <long-description>
</long-description>
          <tag line="127" name="return" description="" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="143" package="Default">
        <name>setMethod</name>
        <docblock>
          <description>Set callback class method</description>
          <long-description>
</long-description>
          <tag line="137" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>getMethod</name>
        <docblock>
          <description>Get callback class  method</description>
          <long-description>
</long-description>
          <tag line="149" name="return" description="" type="null|string">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166" package="Default">
        <name>setType</name>
        <docblock>
          <description>Set callback type</description>
          <long-description>
</long-description>
          <tag line="159" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
          <tag line="159" name="throws" description="" type="\Zend_Server_Exception">
            <type by_reference="false">\Zend_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="181" package="Default">
        <name>getType</name>
        <docblock>
          <description>Get callback type</description>
          <long-description>
</long-description>
          <tag line="176" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="191" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Cast callback to array</description>
          <long-description>
</long-description>
          <tag line="186" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Method/Definition.php" hash="ebeb8d559e3c25ca142ba5ff43d415b4" package="Zend\Server\Method">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="subpackage" description="Method"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Definition.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $_callback</critical>
      <critical line="39">No short description for property $_invokeArguments</critical>
      <critical line="44">No short description for property $_methodHelp</critical>
      <critical line="49">No short description for property $_name</critical>
      <critical line="54">No short description for property $_object</critical>
      <critical line="59">No short description for property $_prototypes</critical>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Server\Method">
      <name>Zend_Server_Method_Definition</name>
      <extends/>
      <full_name>\Zend_Server_Method_Definition</full_name>
      <docblock>
        <description>Method definition metadata</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Server"/>
        <tag line="23" name="subpackage" description="Method"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_callback</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$_invokeArguments</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_methodHelp</name>
        <default>''</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_name</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$_object</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="54" name="var" description="" type="null|object">
            <type by_reference="false">null</type>
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$_prototypes</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="59" name="var" description="Array of Zend_Server_Method_Prototype objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="70" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="64" name="param" description="" type="null|array" variable="$options">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="83" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Set object state from options</description>
          <long-description>
</long-description>
          <tag line="77" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="77" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="100" package="Default">
        <name>setName</name>
        <docblock>
          <description>Set method name</description>
          <long-description>
</long-description>
          <tag line="94" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="111" package="Default">
        <name>getName</name>
        <docblock>
          <description>Get method name</description>
          <long-description>
</long-description>
          <tag line="106" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="122" package="Default">
        <name>setCallback</name>
        <docblock>
          <description>Set method callback</description>
          <long-description>
</long-description>
          <tag line="116" name="param" description="" type="array|\Zend_Server_Method_Callback" variable="$callback">
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
          <tag line="116" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>getCallback</name>
        <docblock>
          <description>Get method callback</description>
          <long-description>
</long-description>
          <tag line="135" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151" package="Default">
        <name>addPrototype</name>
        <docblock>
          <description>Add prototype to method definition</description>
          <long-description>
</long-description>
          <tag line="145" name="param" description="" type="array|\Zend_Server_Method_Prototype" variable="$prototype">
            <type by_reference="false">array</type>
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
          <tag line="145" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$prototype</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="170" package="Default">
        <name>addPrototypes</name>
        <docblock>
          <description>Add multiple prototypes at once</description>
          <long-description>
</long-description>
          <tag line="164" name="param" description="Array of Zend_Server_Method_Prototype objects or arrays" type="array" variable="$prototypes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="164" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$prototypes</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="184" package="Default">
        <name>setPrototypes</name>
        <docblock>
          <description>Set all prototypes at once (overwrites)</description>
          <long-description>
</long-description>
          <tag line="178" name="param" description="Array of Zend_Server_Method_Prototype objects or arrays" type="array" variable="$prototypes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="178" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$prototypes</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="196" package="Default">
        <name>getPrototypes</name>
        <docblock>
          <description>Get all prototypes</description>
          <long-description>
</long-description>
          <tag line="191" name="return" description="$prototypes Array of Zend_Server_Method_Prototype objects or arrays" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="207" package="Default">
        <name>setMethodHelp</name>
        <docblock>
          <description>Set method help</description>
          <long-description>
</long-description>
          <tag line="201" name="param" description="" type="string" variable="$methodHelp">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$methodHelp</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="218" package="Default">
        <name>getMethodHelp</name>
        <docblock>
          <description>Get method help</description>
          <long-description>
</long-description>
          <tag line="213" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="229" package="Default">
        <name>setObject</name>
        <docblock>
          <description>Set object to use with method calls</description>
          <long-description>
</long-description>
          <tag line="223" name="param" description="" type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="223" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="244" package="Default">
        <name>getObject</name>
        <docblock>
          <description>Get object to use with method calls</description>
          <long-description>
</long-description>
          <tag line="239" name="return" description="" type="null|object">
            <type by_reference="false">null</type>
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="255" package="Default">
        <name>setInvokeArguments</name>
        <docblock>
          <description>Set invoke arguments</description>
          <long-description>
</long-description>
          <tag line="249" name="param" description="" type="array" variable="$invokeArguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="249" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$invokeArguments</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="266" package="Default">
        <name>getInvokeArguments</name>
        <docblock>
          <description>Retrieve invoke arguments</description>
          <long-description>
</long-description>
          <tag line="261" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="276" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Serialize to array</description>
          <long-description>
</long-description>
          <tag line="271" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Method/Prototype.php" hash="57820c3ce56358e0b981ebd7e080ca0e" package="Zend\Server\Method">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="subpackage" description="Method"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Prototype.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $_returnType</critical>
      <critical line="39">No short description for property $_parameterNameMap</critical>
      <critical line="44">No short description for property $_parameters</critical>
      <notice line="113">Name of argument $parameters does not match with function Docblock</notice>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Server\Method">
      <name>Zend_Server_Method_Prototype</name>
      <extends/>
      <full_name>\Zend_Server_Method_Prototype</full_name>
      <docblock>
        <description>Method prototype metadata</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Server"/>
        <tag line="23" name="subpackage" description="Method"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_returnType</name>
        <default>'void'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="Return type" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$_parameterNameMap</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="39" name="var" description="Map parameter names to parameter index" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_parameters</name>
        <default>array()</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="44" name="var" description="Method parameters" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="55" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="49" name="param" description="" type="null|array" variable="$options">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="49" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="68" package="Default">
        <name>setReturnType</name>
        <docblock>
          <description>Set return value</description>
          <long-description>
</long-description>
          <tag line="62" name="param" description="" type="string" variable="$returnType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="\Zend_Server_Method_Prototype">
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$returnType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="79" package="Default">
        <name>getReturnType</name>
        <docblock>
          <description>Retrieve return type</description>
          <long-description>
</long-description>
          <tag line="74" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="90" package="Default">
        <name>addParameter</name>
        <docblock>
          <description>Add a parameter</description>
          <long-description>
</long-description>
          <tag line="84" name="param" description="" type="string" variable="$parameter">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="" type="\Zend_Server_Method_Prototype">
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$parameter</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>addParameters</name>
        <docblock>
          <description>Add parameters</description>
          <long-description>
</long-description>
          <tag line="107" name="param" description="" type="array" variable="$parameter">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="return" description="" type="\Zend_Server_Method_Prototype">
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$parameters</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="127" package="Default">
        <name>setParameters</name>
        <docblock>
          <description>Set parameters</description>
          <long-description>
</long-description>
          <tag line="121" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="return" description="" type="\Zend_Server_Method_Prototype">
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$parameters</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>getParameters</name>
        <docblock>
          <description>Retrieve parameters as list of types</description>
          <long-description>
</long-description>
          <tag line="135" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154" package="Default">
        <name>getParameterObjects</name>
        <docblock>
          <description>Get parameter objects</description>
          <long-description>
</long-description>
          <tag line="149" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="165" package="Default">
        <name>getParameter</name>
        <docblock>
          <description>Retrieve a single parameter by name or index</description>
          <long-description>
</long-description>
          <tag line="159" name="param" description="" type="string|int" variable="$index">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="159" name="return" description="" type="null|\Zend_Server_Method_Parameter">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="185" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Set object state from array</description>
          <long-description>
</long-description>
          <tag line="179" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="179" name="return" description="" type="\Zend_Server_Method_Prototype">
            <type by_reference="false">\Zend_Server_Method_Prototype</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="201" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Serialize to array</description>
          <long-description>
</long-description>
          <tag line="196" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Method/Parameter.php" hash="9b71ae35d11e14827925a7416c7b72fe" package="Zend\Server\Method">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="subpackage" description="Method"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Parameter.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="34">No short description for property $_defaultValue</critical>
      <critical line="39">No short description for property $_description</critical>
      <critical line="44">No short description for property $_name</critical>
      <critical line="49">No short description for property $_optional</critical>
      <critical line="54">No short description for property $_type</critical>
    </parse_markers>
    <class final="false" abstract="false" line="32" namespace="default" package="Zend\Server\Method">
      <name>Zend_Server_Method_Parameter</name>
      <extends/>
      <full_name>\Zend_Server_Method_Parameter</full_name>
      <docblock>
        <description>Method parameter metadata</description>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Server"/>
        <tag line="23" name="subpackage" description="Method"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_defaultValue</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="34" name="var" description="Default parameter value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$_description</name>
        <default>''</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="39" name="var" description="Parameter description" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$_name</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="44" name="var" description="Parameter variable name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_optional</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="49" name="var" description="Is parameter optional?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$_type</name>
        <default>'mixed'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="54" name="var" description="Parameter type" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="59" name="param" description="" type="null|array" variable="$options">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="78" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Set object state from array of options</description>
          <long-description>
</long-description>
          <tag line="72" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95" package="Default">
        <name>setDefaultValue</name>
        <docblock>
          <description>Set default value</description>
          <long-description>
</long-description>
          <tag line="89" name="param" description="" type="mixed" variable="$defaultValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="89" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$defaultValue</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="106" package="Default">
        <name>getDefaultValue</name>
        <docblock>
          <description>Retrieve default value</description>
          <long-description>
</long-description>
          <tag line="101" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="117" package="Default">
        <name>setDescription</name>
        <docblock>
          <description>Set description</description>
          <long-description>
</long-description>
          <tag line="111" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$description</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="128" package="Default">
        <name>getDescription</name>
        <docblock>
          <description>Retrieve description</description>
          <long-description>
</long-description>
          <tag line="123" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="139" package="Default">
        <name>setName</name>
        <docblock>
          <description>Set name</description>
          <long-description>
</long-description>
          <tag line="133" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="150" package="Default">
        <name>getName</name>
        <docblock>
          <description>Retrieve name</description>
          <long-description>
</long-description>
          <tag line="145" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="161" package="Default">
        <name>setOptional</name>
        <docblock>
          <description>Set optional flag</description>
          <long-description>
</long-description>
          <tag line="155" name="param" description="" type="bool" variable="$flag">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="155" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="172" package="Default">
        <name>isOptional</name>
        <docblock>
          <description>Is the parameter optional?</description>
          <long-description>
</long-description>
          <tag line="167" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="183" package="Default">
        <name>setType</name>
        <docblock>
          <description>Set parameter type</description>
          <long-description>
</long-description>
          <tag line="177" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="return" description="" type="\Zend_Server_Method_Parameter">
            <type by_reference="false">\Zend_Server_Method_Parameter</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="194" package="Default">
        <name>getType</name>
        <docblock>
          <description>Retrieve parameter type</description>
          <long-description>
</long-description>
          <tag line="189" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="204" package="Default">
        <name>toArray</name>
        <docblock>
          <description>Cast to array</description>
          <long-description>
</long-description>
          <tag line="199" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Interface.php" hash="16b6e2a950b57302ee74685cae1a760c" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <notice line="108">Name of argument $definition does not match with function Docblock</notice>
    </parse_markers>
    <interface namespace="default" line="30" package="Zend\Server">
      <name>Zend_Server_Interface</name>
      <extends/>
      <full_name>\Zend_Server_Interface</full_name>
      <docblock>
        <description>Zend_Server_Interface</description>
        <long-description>
</long-description>
        <tag line="21" name="category" description="Zend"/>
        <tag line="21" name="package" description="Zend_Server"/>
        <tag line="21" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="21" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="21" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="44" package="Default">
        <name>addFunction</name>
        <docblock>
          <description>Attach a function as a server method</description>
          <long-description>&lt;p&gt;Namespacing is primarily for xmlrpc, but may be used with other
implementations to prevent naming collisions.&lt;/p&gt;
</long-description>
          <tag line="32" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="Optional array of arguments to pass to callbacks at dispatch." type="null|array" variable="">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>setClass</name>
        <docblock>
          <description>Attach a class to a server</description>
          <long-description>&lt;p&gt;The individual implementations should probably allow passing a variable
number of arguments in, so that developers may define custom runtime
arguments to pass to server methods.&lt;/p&gt;

&lt;p&gt;Namespacing is primarily for xmlrpc, but could be used for other
implementations as well.&lt;/p&gt;
</long-description>
          <tag line="46" name="param" description="Class name or object instance to examine and attach to the server." type="mixed" variable="$class">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="46" name="param" description="Optional namespace with which to prepend method names in the dispatch table. methods in the class will be valid callbacks." type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="Optional array of arguments to pass to callbacks at dispatch." type="null|array" variable="$argv">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$namespace</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="65">
          <name>$argv</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="74" package="Default">
        <name>fault</name>
        <docblock>
          <description>Generate a server fault</description>
          <long-description>
</long-description>
          <tag line="67" name="param" description="" type="mixed" variable="$fault">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="67" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$fault</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="74">
          <name>$code</name>
          <default>404</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="86" package="Default">
        <name>handle</name>
        <docblock>
          <description>Handle a request</description>
          <long-description>&lt;p&gt;Requests may be passed in, or the server may automagically determine the
request based on defaults. Dispatches server request to appropriate
method and returns a response&lt;/p&gt;
</long-description>
          <tag line="76" name="param" description="" type="mixed" variable="$request">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$request</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="98" package="Default">
        <name>getFunctions</name>
        <docblock>
          <description>Return a server definition array</description>
          <long-description>&lt;p&gt;Returns a server definition array as created using
{@link * Zend_Server_Reflection}. Can be used for server introspection,
documentation, or persistence.&lt;/p&gt;
</long-description>
          <tag line="88" name="access" description="public"/>
          <tag line="88" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="108" package="Default">
        <name>loadFunctions</name>
        <docblock>
          <description>Load server definition</description>
          <long-description>&lt;p&gt;Used for persistence; loads a construct as returned by {@link getFunctions()}.&lt;/p&gt;
</long-description>
          <tag line="100" name="param" description="" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$definition</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="117" package="Default">
        <name>setPersistence</name>
        <docblock>
          <description>Set server persistence</description>
          <long-description>
</long-description>
          <tag line="110" name="todo" description="Determine how to implement this"/>
          <tag line="110" name="param" description="" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="110" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$mode</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Zend/Server/Reflection/Node.php" hash="81192412827b3ef2dc8a3556c56744e1" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <class final="false" abstract="false" line="31" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Node</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_Node</full_name>
      <docblock>
        <description>Node Tree class for Zend_Server reflection operations</description>
        <long-description>
</long-description>
        <tag line="21" name="category" description="Zend"/>
        <tag line="21" name="package" description="Zend_Server"/>
        <tag line="21" name="subpackage" description="Reflection"/>
        <tag line="21" name="version" description="$Id: Node.php 24593 2012-01-05 20:35:02Z matthew $"/>
        <tag line="21" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="21" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$_value</name>
        <default>null</default>
        <docblock>
          <description>Node value</description>
          <long-description>
</long-description>
          <tag line="33" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_children</name>
        <default>array()</default>
        <docblock>
          <description>Array of child nodes (if any)</description>
          <long-description>
</long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$_parent</name>
        <default>null</default>
        <docblock>
          <description>Parent node (if any)</description>
          <long-description>
</long-description>
          <tag line="45" name="var" description="" type="\Zend_Server_Reflection_Node">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="58" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="51" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="Optional" type="\Zend_Server_Reflection_Node" variable="$parent">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
          <tag line="51" name="return" description="" type="\Zend_Server_Reflection_Node">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$parent</name>
          <default>null</default>
          <type>Zend_Server_Reflection_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="76" package="Default">
        <name>setParent</name>
        <docblock>
          <description>Set parent node</description>
          <long-description>
</long-description>
          <tag line="68" name="param" description="" type="\Zend_Server_Reflection_Node" variable="$node">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
          <tag line="68" name="param" description="Whether or not the child node is newly created and should always be attached" type="boolean" variable="$new">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="68" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$node</name>
          <default/>
          <type>Zend_Server_Reflection_Node</type>
        </argument>
        <argument line="76">
          <name>$new</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="93" package="Default">
        <name>createChild</name>
        <docblock>
          <description>Create and attach a new child node</description>
          <long-description>
</long-description>
          <tag line="86" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="access" description="public"/>
          <tag line="86" name="return" description="New child node" type="\Zend_Server_Reflection_Node">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="106" package="Default">
        <name>attachChild</name>
        <docblock>
          <description>Attach a child node</description>
          <long-description>
</long-description>
          <tag line="100" name="param" description="" type="\Zend_Server_Reflection_Node" variable="$node">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$node</name>
          <default/>
          <type>Zend_Server_Reflection_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="120" package="Default">
        <name>getChildren</name>
        <docblock>
          <description>Return an array of all child nodes</description>
          <long-description>
</long-description>
          <tag line="115" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="130" package="Default">
        <name>hasChildren</name>
        <docblock>
          <description>Does this node have children?</description>
          <long-description>
</long-description>
          <tag line="125" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140" package="Default">
        <name>getParent</name>
        <docblock>
          <description>Return the parent node</description>
          <long-description>
</long-description>
          <tag line="135" name="return" description="" type="null|\Zend_Server_Reflection_Node">
            <type by_reference="false">null</type>
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="150" package="Default">
        <name>getValue</name>
        <docblock>
          <description>Return the node's current value</description>
          <long-description>
</long-description>
          <tag line="145" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="161" package="Default">
        <name>setValue</name>
        <docblock>
          <description>Set the node value</description>
          <long-description>
</long-description>
          <tag line="155" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="155" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="175" package="Default">
        <name>getEndPoints</name>
        <docblock>
          <description>Retrieve the bottommost nodes of this node's tree</description>
          <long-description>&lt;p&gt;Retrieves the bottommost nodes of the tree by recursively calling
getEndPoints() on all children. If a child is null, it returns the parent
as an end point.&lt;/p&gt;
</long-description>
          <tag line="166" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Class.php" hash="84b6219f5707abc49ebe8a34a2e4e94c" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/Method.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Class</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_Class</full_name>
      <docblock>
        <description>Class/Object reflection</description>
        <long-description>&lt;p&gt;Proxies calls to a ReflectionClass object, and decorates getMethods() by
creating its own list of {@link Zend_Server_Reflection_Method}s.&lt;/p&gt;
</long-description>
        <tag line="26" name="category" description="Zend"/>
        <tag line="26" name="package" description="Zend_Server"/>
        <tag line="26" name="subpackage" description="Reflection"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="26" name="version" description="$Id: Class.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_config</name>
        <default>array()</default>
        <docblock>
          <description>Optional configuration parameters; accessible via {@link __get} and
{@link __set()}</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$_methods</name>
        <default>array()</default>
        <docblock>
          <description>Array of {@link Zend_Server_Reflection_Method}s</description>
          <long-description>
</long-description>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_namespace</name>
        <default>null</default>
        <docblock>
          <description>Namespace</description>
          <long-description>
</long-description>
          <tag line="54" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_reflection</name>
        <default/>
        <docblock>
          <description>ReflectionClass object</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="\ReflectionClass">
            <type by_reference="false">\ReflectionClass</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="77" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;Create array of dispatchable methods, each a
{@link Zend_Server_Reflection_Method}. Sets reflection object property.&lt;/p&gt;
</long-description>
          <tag line="66" name="param" description="" type="\ReflectionClass" variable="$reflection">
            <type by_reference="false">\ReflectionClass</type>
          </tag>
          <tag line="66" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="param" description="" type="mixed" variable="$argv">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="66" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$reflection</name>
          <default/>
          <type>ReflectionClass</type>
        </argument>
        <argument line="77">
          <name>$namespace</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="77">
          <name>$argv</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="102" package="Default">
        <name>__call</name>
        <docblock>
          <description>Proxy reflection calls</description>
          <long-description>
</long-description>
          <tag line="95" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="95" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="102">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121" package="Default">
        <name>__get</name>
        <docblock>
          <description>Retrieve configuration parameters</description>
          <long-description>&lt;p&gt;Values are retrieved by key from {@link $_config}. Returns null if no
value found.&lt;/p&gt;
</long-description>
          <tag line="112" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="139" package="Default">
        <name>__set</name>
        <docblock>
          <description>Set configuration parameters</description>
          <long-description>&lt;p&gt;Values are stored by $key in {@link $_config}.&lt;/p&gt;
</long-description>
          <tag line="130" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="139">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="150" package="Default">
        <name>getMethods</name>
        <docblock>
          <description>Return array of dispatchable {@link Zend_Server_Reflection_Method}s.</description>
          <long-description>
</long-description>
          <tag line="144" name="access" description="public"/>
          <tag line="144" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="160" package="Default">
        <name>getNamespace</name>
        <docblock>
          <description>Get namespace for this class</description>
          <long-description>
</long-description>
          <tag line="155" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="171" package="Default">
        <name>setNamespace</name>
        <docblock>
          <description>Set namespace for this class</description>
          <long-description>
</long-description>
          <tag line="165" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="165" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="194" package="Default">
        <name>__wakeup</name>
        <docblock>
          <description>Wakeup from serialization</description>
          <long-description>&lt;p&gt;Reflection needs explicit instantiation to work correctly. Re-instantiate
reflection object on wakeup.&lt;/p&gt;
</long-description>
          <tag line="186" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Exception.php" hash="d7c6913dd42be33ed4d1ffc18fa748cf" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="36" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Exception</name>
      <extends>\Zend_Server_Exception</extends>
      <full_name>\Zend_Server_Reflection_Exception</full_name>
      <docblock>
        <description>Zend_Server_Reflection exceptions</description>
        <long-description>
</long-description>
        <tag line="26" name="category" description="Zend"/>
        <tag line="26" name="package" description="Zend_Server"/>
        <tag line="26" name="subpackage" description="Reflection"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="26" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Function/Abstract.php" hash="a035a52b9ca0f44f6fc44092b1b4b502" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="55">No short description for property $_reflection</critical>
      <error line="99">No DocBlock was found for Property $_return</error>
      <error line="100">No DocBlock was found for Property $_returnDesc</error>
      <error line="101">No DocBlock was found for Property $_paramDesc</error>
      <error line="102">No DocBlock was found for Property $_sigParams</error>
      <error line="103">No DocBlock was found for Property $_sigParamsDepth</error>
      <notice line="110">Argument $namespace is missing from the function Docblock</notice>
      <notice line="110">Argument $argv is missing from the function Docblock</notice>
      <notice line="200">Name of argument $paramTypes does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/Node.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Server/Reflection/Parameter.php</name>
    </include>
    <include type="Require Once" line="34">
      <name>Zend/Server/Reflection/Prototype.php</name>
    </include>
    <class final="false" abstract="true" line="53" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Function_Abstract</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_Function_Abstract</full_name>
      <docblock>
        <description>Function/Method Reflection</description>
        <long-description>&lt;p&gt;Decorates a ReflectionFunction. Allows setting and retrieving an alternate
'service' name (i.e., the name to be used when calling via a service),
setting and retrieving the description (originally set using the docblock
contents), retrieving the callback and callback type, retrieving additional
method invocation arguments, and retrieving the
method {@link Zend_Server_Reflection_Prototype prototypes}.&lt;/p&gt;
</long-description>
        <tag line="36" name="category" description="Zend"/>
        <tag line="36" name="package" description="Zend_Server"/>
        <tag line="36" name="subpackage" description="Reflection"/>
        <tag line="36" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="36" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="36" name="version" description="$Id: Abstract.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_reflection</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="55" name="var" description="" type="\ReflectionFunction">
            <type by_reference="false">\ReflectionFunction</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_argv</name>
        <default>array()</default>
        <docblock>
          <description>Additional arguments to pass to method on invocation</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$_config</name>
        <default>array()</default>
        <docblock>
          <description>Used to store extra configuration for the method (typically done by the
server class, e.g., to indicate whether or not to instantiate a class).</description>
          <long-description>&lt;p&gt;Associative array; access is as properties via {@link __get()} and
{@link __set()}&lt;/p&gt;
</long-description>
          <tag line="66" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$_class</name>
        <default/>
        <docblock>
          <description>Declaring class (needed for when serialization occurs)</description>
          <long-description>
</long-description>
          <tag line="75" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="85" package="Default">
        <name>$_description</name>
        <default>''</default>
        <docblock>
          <description>Function/method description</description>
          <long-description>
</long-description>
          <tag line="81" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="91" package="Default">
        <name>$_namespace</name>
        <default/>
        <docblock>
          <description>Namespace with which to prefix function/method name</description>
          <long-description>
</long-description>
          <tag line="87" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="97" package="Default">
        <name>$_prototypes</name>
        <default>array()</default>
        <docblock>
          <description>Prototypes</description>
          <long-description>
</long-description>
          <tag line="93" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="99" package="Default">
        <name>$_return</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="100" package="Default">
        <name>$_returnDesc</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="101" package="Default">
        <name>$_paramDesc</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="102" package="Default">
        <name>$_sigParams</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="private" line="103" package="Default">
        <name>$_sigParamsDepth</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="110" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="105" name="param" description="" type="\ReflectionFunction" variable="$r">
            <type by_reference="false">\ReflectionFunction</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$r</name>
          <default/>
          <type>Reflector</type>
        </argument>
        <argument line="110">
          <name>$namespace</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="110">
          <name>$argv</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="153" package="Default">
        <name>_addTree</name>
        <docblock>
          <description>Create signature node tree</description>
          <long-description>&lt;p&gt;Recursive method to build the signature node tree. Increments through
each array in {@link $_sigParams}, adding every value of the next level
to the current value (unless the current value is null).&lt;/p&gt;
</long-description>
          <tag line="142" name="param" description="" type="\Zend_Server_Reflection_Node" variable="$parent">
            <type by_reference="false">\Zend_Server_Reflection_Node</type>
          </tag>
          <tag line="142" name="param" description="" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
          <tag line="142" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$parent</name>
          <default/>
          <type>Zend_Server_Reflection_Node</type>
        </argument>
        <argument line="153">
          <name>$level</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="176" package="Default">
        <name>_buildTree</name>
        <docblock>
          <description>Build the signature tree</description>
          <long-description>&lt;p&gt;Builds a signature tree starting at the return values and descending
through each method argument. Returns an array of
{@link Zend_Server_Reflection_Node}s.&lt;/p&gt;
</long-description>
          <tag line="167" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="200" package="Default">
        <name>_buildSignatures</name>
        <docblock>
          <description>Build method signatures</description>
          <long-description>&lt;p&gt;Builds method signatures using the array of return types and the array of
parameters types&lt;/p&gt;
</long-description>
          <tag line="188" name="param" description="Array of return types" type="array" variable="$return">
            <type by_reference="false">array</type>
          </tag>
          <tag line="188" name="param" description="Return value description" type="string" variable="$returnDesc">
            <type by_reference="false">string</type>
          </tag>
          <tag line="188" name="param" description="Array of arguments (each an array of types)" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="188" name="param" description="Array of parameter descriptions" type="array" variable="$paramDesc">
            <type by_reference="false">array</type>
          </tag>
          <tag line="188" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$return</name>
          <default/>
          <type/>
        </argument>
        <argument line="200">
          <name>$returnDesc</name>
          <default/>
          <type/>
        </argument>
        <argument line="200">
          <name>$paramTypes</name>
          <default/>
          <type/>
        </argument>
        <argument line="200">
          <name>$paramDesc</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="259" package="Default">
        <name>_reflect</name>
        <docblock>
          <description>Use code reflection to create method signatures</description>
          <long-description>&lt;p&gt;Determines the method help/description text from the function DocBlock
comment. Determines method signatures using a combination of
ReflectionFunction and parsing of DocBlock @param and @return values.&lt;/p&gt;
</long-description>
          <tag line="249" name="param" description="" type="\ReflectionFunction" variable="$function">
            <type by_reference="false">\ReflectionFunction</type>
          </tag>
          <tag line="249" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="377" package="Default">
        <name>__call</name>
        <docblock>
          <description>Proxy reflection calls</description>
          <long-description>
</long-description>
          <tag line="370" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="370" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="370" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="377">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="377">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="396" package="Default">
        <name>__get</name>
        <docblock>
          <description>Retrieve configuration parameters</description>
          <long-description>&lt;p&gt;Values are retrieved by key from {@link $_config}. Returns null if no
value found.&lt;/p&gt;
</long-description>
          <tag line="387" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="387" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="396">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="414" package="Default">
        <name>__set</name>
        <docblock>
          <description>Set configuration parameters</description>
          <long-description>&lt;p&gt;Values are stored by $key in {@link $_config}.&lt;/p&gt;
</long-description>
          <tag line="405" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="405" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="405" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="414">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="414">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="425" package="Default">
        <name>setNamespace</name>
        <docblock>
          <description>Set method's namespace</description>
          <long-description>
</long-description>
          <tag line="419" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="419" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="425">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="445" package="Default">
        <name>getNamespace</name>
        <docblock>
          <description>Return method's namespace</description>
          <long-description>
</long-description>
          <tag line="440" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="456" package="Default">
        <name>setDescription</name>
        <docblock>
          <description>Set the description</description>
          <long-description>
</long-description>
          <tag line="450" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="450" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="456">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="471" package="Default">
        <name>getDescription</name>
        <docblock>
          <description>Retrieve the description</description>
          <long-description>
</long-description>
          <tag line="466" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="482" package="Default">
        <name>getPrototypes</name>
        <docblock>
          <description>Retrieve all prototypes as array of
{@link Zend_Server_Reflection_Prototype Zend_Server_Reflection_Prototypes}</description>
          <long-description>
</long-description>
          <tag line="476" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="492" package="Default">
        <name>getInvokeArguments</name>
        <docblock>
          <description>Retrieve additional invocation arguments</description>
          <long-description>
</long-description>
          <tag line="487" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="505" package="Default">
        <name>__wakeup</name>
        <docblock>
          <description>Wakeup from serialization</description>
          <long-description>&lt;p&gt;Reflection needs explicit instantiation to work correctly. Re-instantiate
reflection object on wakeup.&lt;/p&gt;
</long-description>
          <tag line="497" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/ReturnValue.php" hash="f0294ba121440cd9cf22f8d404d6f37f" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <class final="false" abstract="false" line="33" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_ReturnValue</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_ReturnValue</full_name>
      <docblock>
        <description>Return value reflection</description>
        <long-description>&lt;p&gt;Stores the return value type and description&lt;/p&gt;
</long-description>
        <tag line="21" name="category" description="Zend"/>
        <tag line="21" name="package" description="Zend_Server"/>
        <tag line="21" name="subpackage" description="Reflection"/>
        <tag line="21" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="21" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="21" name="version" description="$Id: ReturnValue.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$_type</name>
        <default/>
        <docblock>
          <description>Return value type</description>
          <long-description>
</long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$_description</name>
        <default/>
        <docblock>
          <description>Return value description</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="53" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="47" name="param" description="Return value type" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="Return value type" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$type</name>
          <default>'mixed'</default>
          <type/>
        </argument>
        <argument line="53">
          <name>$description</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="64" package="Default">
        <name>getType</name>
        <docblock>
          <description>Retrieve parameter type</description>
          <long-description>
</long-description>
          <tag line="59" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="75" package="Default">
        <name>setType</name>
        <docblock>
          <description>Set parameter type</description>
          <long-description>
</long-description>
          <tag line="69" name="param" description="" type="string|null" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="69" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="90" package="Default">
        <name>getDescription</name>
        <docblock>
          <description>Retrieve parameter description</description>
          <long-description>
</long-description>
          <tag line="85" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="101" package="Default">
        <name>setDescription</name>
        <docblock>
          <description>Set parameter description</description>
          <long-description>
</long-description>
          <tag line="95" name="param" description="" type="string|null" variable="$description">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="95" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$description</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Method.php" hash="fde6e479b49a00f940f7869e8f0b7973" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/Function/Abstract.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Method</name>
      <extends>\Zend_Server_Reflection_Function_Abstract</extends>
      <full_name>\Zend_Server_Reflection_Method</full_name>
      <docblock>
        <description>Method Reflection</description>
        <long-description>
</long-description>
        <tag line="26" name="uses" description="\Zend_Server_Reflection_Function_Abstract" refers="\Zend_Server_Reflection_Function_Abstract"/>
        <tag line="26" name="category" description="Zend"/>
        <tag line="26" name="package" description="Zend_Server"/>
        <tag line="26" name="subpackage" description="Reflection"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="26" name="version" description="$Id: Method.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_class</name>
        <default/>
        <docblock>
          <description>Parent class name</description>
          <long-description>
</long-description>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$_classReflection</name>
        <default/>
        <docblock>
          <description>Parent class reflection</description>
          <long-description>
</long-description>
          <tag line="45" name="var" description="" type="\Zend_Server_Reflection_Class">
            <type by_reference="false">\Zend_Server_Reflection_Class</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="60" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="51" name="param" description="" type="\Zend_Server_Reflection_Class" variable="$class">
            <type by_reference="false">\Zend_Server_Reflection_Class</type>
          </tag>
          <tag line="51" name="param" description="" type="\ReflectionMethod" variable="$r">
            <type by_reference="false">\ReflectionMethod</type>
          </tag>
          <tag line="51" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="param" description="" type="array" variable="$argv">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$class</name>
          <default/>
          <type>Zend_Server_Reflection_Class</type>
        </argument>
        <argument line="60">
          <name>$r</name>
          <default/>
          <type>ReflectionMethod</type>
        </argument>
        <argument line="60">
          <name>$namespace</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="60">
          <name>$argv</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="91" package="Default">
        <name>getDeclaringClass</name>
        <docblock>
          <description>Return the reflection for the class that defines this method</description>
          <long-description>
</long-description>
          <tag line="86" name="return" description="" type="\Zend_Server_Reflection_Class">
            <type by_reference="false">\Zend_Server_Reflection_Class</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="104" package="Default">
        <name>__wakeup</name>
        <docblock>
          <description>Wakeup from serialization</description>
          <long-description>&lt;p&gt;Reflection needs explicit instantiation to work correctly. Re-instantiate
reflection object on wakeup.&lt;/p&gt;
</long-description>
          <tag line="96" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Prototype.php" hash="ac39eace6e041c1914cfe140e3d12135" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/ReturnValue.php</name>
    </include>
    <include type="Require Once" line="29">
      <name>Zend/Server/Reflection/Parameter.php</name>
    </include>
    <class final="false" abstract="false" line="43" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Prototype</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_Prototype</full_name>
      <docblock>
        <description>Method/Function prototypes</description>
        <long-description>&lt;p&gt;Contains accessors for the return value and all method arguments.&lt;/p&gt;
</long-description>
        <tag line="31" name="category" description="Zend"/>
        <tag line="31" name="package" description="Zend_Server"/>
        <tag line="31" name="subpackage" description="Reflection"/>
        <tag line="31" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="31" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="31" name="version" description="$Id: Prototype.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="52" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="45" name="param" description="" type="\Zend_Server_Reflection_ReturnValue" variable="$return">
            <type by_reference="false">\Zend_Server_Reflection_ReturnValue</type>
          </tag>
          <tag line="45" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$return</name>
          <default/>
          <type>Zend_Server_Reflection_ReturnValue</type>
        </argument>
        <argument line="52">
          <name>$params</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="78" package="Default">
        <name>getReturnType</name>
        <docblock>
          <description>Retrieve return type</description>
          <long-description>
</long-description>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="89" package="Default">
        <name>getReturnValue</name>
        <docblock>
          <description>Retrieve the return value object</description>
          <long-description>
</long-description>
          <tag line="83" name="access" description="public"/>
          <tag line="83" name="return" description="" type="\Zend_Server_Reflection_ReturnValue">
            <type by_reference="false">\Zend_Server_Reflection_ReturnValue</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="99" package="Default">
        <name>getParameters</name>
        <docblock>
          <description>Retrieve method parameters</description>
          <long-description>
</long-description>
          <tag line="94" name="return" description="Array of {@link Zend_Server_Reflection_Parameter}s" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Parameter.php" hash="c3329b25664defe347b569658dd6ba68" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="35">No short description for property $_reflection</critical>
    </parse_markers>
    <class final="false" abstract="false" line="33" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Parameter</name>
      <extends/>
      <full_name>\Zend_Server_Reflection_Parameter</full_name>
      <docblock>
        <description>Parameter Reflection</description>
        <long-description>&lt;p&gt;Decorates a ReflectionParameter to allow setting the parameter type&lt;/p&gt;
</long-description>
        <tag line="21" name="category" description="Zend"/>
        <tag line="21" name="package" description="Zend_Server"/>
        <tag line="21" name="subpackage" description="Reflection"/>
        <tag line="21" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="21" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="21" name="version" description="$Id: Parameter.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$_reflection</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="35" name="var" description="" type="\ReflectionParameter">
            <type by_reference="false">\ReflectionParameter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$_position</name>
        <default/>
        <docblock>
          <description>Parameter position</description>
          <long-description>
</long-description>
          <tag line="40" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$_type</name>
        <default/>
        <docblock>
          <description>Parameter type</description>
          <long-description>
</long-description>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$_description</name>
        <default/>
        <docblock>
          <description>Parameter description</description>
          <long-description>
</long-description>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="58" name="param" description="" type="\ReflectionParameter" variable="$r">
            <type by_reference="false">\ReflectionParameter</type>
          </tag>
          <tag line="58" name="param" description="Parameter type" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="Parameter description" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$r</name>
          <default/>
          <type>ReflectionParameter</type>
        </argument>
        <argument line="65">
          <name>$type</name>
          <default>'mixed'</default>
          <type/>
        </argument>
        <argument line="65">
          <name>$description</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="79" package="Default">
        <name>__call</name>
        <docblock>
          <description>Proxy reflection calls</description>
          <long-description>
</long-description>
          <tag line="72" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$method</name>
          <default/>
          <type/>
        </argument>
        <argument line="79">
          <name>$args</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="94" package="Default">
        <name>getType</name>
        <docblock>
          <description>Retrieve parameter type</description>
          <long-description>
</long-description>
          <tag line="89" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="105" package="Default">
        <name>setType</name>
        <docblock>
          <description>Set parameter type</description>
          <long-description>
</long-description>
          <tag line="99" name="param" description="" type="string|null" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="120" package="Default">
        <name>getDescription</name>
        <docblock>
          <description>Retrieve parameter description</description>
          <long-description>
</long-description>
          <tag line="115" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="131" package="Default">
        <name>setDescription</name>
        <docblock>
          <description>Set parameter description</description>
          <long-description>
</long-description>
          <tag line="125" name="param" description="" type="string|null" variable="$description">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="125" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$description</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="147" package="Default">
        <name>setPosition</name>
        <docblock>
          <description>Set parameter position</description>
          <long-description>
</long-description>
          <tag line="141" name="param" description="" type="int" variable="$index">
            <type by_reference="false">int</type>
          </tag>
          <tag line="141" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="157" package="Default">
        <name>getPosition</name>
        <docblock>
          <description>Return parameter position</description>
          <long-description>
</long-description>
          <tag line="152" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Server/Reflection/Function.php" hash="798a1dc71417fda59f1372fea8174b40" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <include type="Require Once" line="24">
      <name>Zend/Server/Reflection/Function/Abstract.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Server\Reflection">
      <name>Zend_Server_Reflection_Function</name>
      <extends>\Zend_Server_Reflection_Function_Abstract</extends>
      <full_name>\Zend_Server_Reflection_Function</full_name>
      <docblock>
        <description>Function Reflection</description>
        <long-description>
</long-description>
        <tag line="26" name="uses" description="\Zend_Server_Reflection_Function_Abstract" refers="\Zend_Server_Reflection_Function_Abstract"/>
        <tag line="26" name="category" description="Zend"/>
        <tag line="26" name="package" description="Zend_Server"/>
        <tag line="26" name="subpackage" description="Reflection"/>
        <tag line="26" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="26" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="26" name="version" description="$Id: Function.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Server/Abstract.php" hash="e98e7f4400b1188cc372c81ab021523f" package="Zend\Server">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Server"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
    </docblock>
    <parse_markers>
      <critical line="60">No short description for property $magic_methods</critical>
      <critical line="79">No short description for property $_overwriteExistingMethods</critical>
      <critical line="84">No short description for property $_table</critical>
      <notice line="124">Name of argument $value does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="22">
      <name>Zend/Server/Interface.php</name>
    </include>
    <include type="Require Once" line="27">
      <name>Zend/Server/Definition.php</name>
    </include>
    <include type="Require Once" line="32">
      <name>Zend/Server/Method/Definition.php</name>
    </include>
    <include type="Require Once" line="37">
      <name>Zend/Server/Method/Callback.php</name>
    </include>
    <include type="Require Once" line="42">
      <name>Zend/Server/Method/Prototype.php</name>
    </include>
    <include type="Require Once" line="47">
      <name>Zend/Server/Method/Parameter.php</name>
    </include>
    <class final="false" abstract="true" line="58" namespace="default" package="Zend\Server">
      <name>Zend_Server_Abstract</name>
      <extends/>
      <full_name>\Zend_Server_Abstract</full_name>
      <docblock>
        <description>Zend_Server_Abstract</description>
        <long-description>
</long-description>
        <tag line="49" name="category" description="Zend"/>
        <tag line="49" name="package" description="Zend_Server"/>
        <tag line="49" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="49" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="49" name="version" description="$Id: Abstract.php 24593 2012-01-05 20:35:02Z matthew $"/>
      </docblock>
      <implements>\Zend_Server_Interface</implements>
      <property final="false" static="true" visibility="protected" line="64" package="Default">
        <name>$magic_methods</name>
        <default>array(
        '__call'</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="60" name="deprecated" description=""/>
          <tag line="60" name="var" description="List of PHP magic methods (lowercased)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$_overwriteExistingMethods</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="79" name="var" description="Flag; whether or not overwriting existing methods is allowed" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="87" package="Default">
        <name>$_table</name>
        <default/>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="84" name="var" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="96" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>&lt;p&gt;Setup server description&lt;/p&gt;
</long-description>
          <tag line="89" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="109" package="Default">
        <name>getFunctions</name>
        <docblock>
          <description>Returns a list of registered methods</description>
          <long-description>&lt;p&gt;Returns an array of method definitions.&lt;/p&gt;
</long-description>
          <tag line="102" name="return" description="" type="\Zend_Server_Definition">
            <type by_reference="false">\Zend_Server_Definition</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="124" package="Default">
        <name>lowerCase</name>
        <docblock>
          <description>Lowercase a string</description>
          <long-description>&lt;p&gt;Lowercase's a string by reference&lt;/p&gt;
</long-description>
          <tag line="114" name="deprecated" description=""/>
          <tag line="114" name="param" description="value" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="return" description="Lower cased string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="124">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="136" package="Default">
        <name>_buildCallback</name>
        <docblock>
          <description>Build callback for method signature</description>
          <long-description>
</long-description>
          <tag line="130" name="param" description="" type="\Zend_Server_Reflection_Function_Abstract" variable="$reflection">
            <type by_reference="false">\Zend_Server_Reflection_Function_Abstract</type>
          </tag>
          <tag line="130" name="return" description="" type="\Zend_Server_Method_Callback">
            <type by_reference="false">\Zend_Server_Method_Callback</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$reflection</name>
          <default/>
          <type>Zend_Server_Reflection_Function_Abstract</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="158" package="Default">
        <name>_buildSignature</name>
        <docblock>
          <description>Build a method signature</description>
          <long-description>
</long-description>
          <tag line="150" name="param" description="" type="\Zend_Server_Reflection_Function_Abstract" variable="$reflection">
            <type by_reference="false">\Zend_Server_Reflection_Function_Abstract</type>
          </tag>
          <tag line="150" name="param" description="" type="null|string|object" variable="$class">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
            <type by_reference="false">object</type>
          </tag>
          <tag line="150" name="return" description="" type="\Zend_Server_Method_Definition">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
          <tag line="150" name="throws" description="on duplicate entry" type="\Zend_Server_Exception">
            <type by_reference="false">\Zend_Server_Exception</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$reflection</name>
          <default/>
          <type>Zend_Server_Reflection_Function_Abstract</type>
        </argument>
        <argument line="158">
          <name>$class</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="205" package="Default">
        <name>_dispatch</name>
        <docblock>
          <description>Dispatch method</description>
          <long-description>
</long-description>
          <tag line="198" name="param" description="" type="\Zend_Server_Method_Definition" variable="$invocable">
            <type by_reference="false">\Zend_Server_Method_Definition</type>
          </tag>
          <tag line="198" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="198" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$invocable</name>
          <default/>
          <type>Zend_Server_Method_Definition</type>
        </argument>
        <argument line="205">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" line="241" package="Default">
        <name>_fixType</name>
        <docblock>
          <description>Map PHP type to protocol type</description>
          <long-description>
</long-description>
          <tag line="235" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Session.php" hash="c2189dc4f94f9aa2ede57f4affa36430" package="Zend\Session">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="3" name="category" description="Zend"/>
      <tag line="3" name="package" description="Zend_Session"/>
      <tag line="3" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="3" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="3" name="version" description="$Id: Session.php 24819 2012-05-28 19:25:03Z rob $"/>
      <tag line="3" name="since" description="Preview Release 0.2"/>
    </docblock>
    <parse_markers>
      <notice line="264">Name of argument $saveHandler does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="28">
      <name>Zend/Session/Abstract.php</name>
    </include>
    <include type="Require Once" line="33">
      <name>Zend/Session/Namespace.php</name>
    </include>
    <include type="Require Once" line="38">
      <name>Zend/Session/SaveHandler/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="49" namespace="default" package="Zend\Session">
      <name>Zend_Session</name>
      <extends>\Zend_Session_Abstract</extends>
      <full_name>\Zend_Session</full_name>
      <docblock>
        <description>Zend_Session</description>
        <long-description>
</long-description>
        <tag line="41" name="category" description="Zend"/>
        <tag line="41" name="package" description="Zend_Session"/>
        <tag line="41" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="41" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="57" package="Default">
        <name>$_unitTestEnabled</name>
        <default>false</default>
        <docblock>
          <description>Whether or not Zend_Session is being used with unit tests</description>
          <long-description>
</long-description>
          <tag line="51" name="internal" description=""/>
          <tag line="51" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="64" package="Default">
        <name>$_throwStartupExceptions</name>
        <default>true</default>
        <docblock>
          <description>$_throwStartupException</description>
          <long-description>
</long-description>
          <tag line="59" name="var" description="This could also be a combiniation of error codes to catch" type="bool|\bitset">
            <type by_reference="false">bool</type>
            <type by_reference="false">\bitset</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="71" package="Default">
        <name>$_sessionStarted</name>
        <default>false</default>
        <docblock>
          <description>Check whether or not the session was started</description>
          <long-description>
</long-description>
          <tag line="66" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="83" package="Default">
        <name>$_regenerateIdState</name>
        <default>0</default>
        <docblock>
          <description>Whether or not the session id has been regenerated this request.</description>
          <long-description>&lt;p&gt;Id regeneration state
&amp;lt;0 - regenerate requested when session is started
0  - do nothing&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0 - already called session_regenerate_id()&lt;/p&gt;
&lt;/blockquote&gt;
</long-description>
          <tag line="73" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="93" package="Default">
        <name>$_defaultOptions</name>
        <default>array(
        'save_path'                 =&gt; null</default>
        <docblock>
          <description>Private list of php's ini values for ext/session
null values will default to the php.ini value, otherwise
the value below will overwrite the default ini value, unless
the user has set an option explicity with setOptions()</description>
          <long-description>
</long-description>
          <tag line="85" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="128" package="Default">
        <name>$_localOptions</name>
        <default>array(
        'strict'                =&gt; '_strict'</default>
        <docblock>
          <description>List of options pertaining to Zend_Session that can be set by developers
using Zend_Session::setOptions(). This list intentionally duplicates
the individual declaration of static "class" variables by the same names.</description>
          <long-description>
</long-description>
          <tag line="121" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="139" package="Default">
        <name>$_writeClosed</name>
        <default>false</default>
        <docblock>
          <description>Whether or not write close has been performed.</description>
          <long-description>
</long-description>
          <tag line="134" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="146" package="Default">
        <name>$_sessionCookieDeleted</name>
        <default>false</default>
        <docblock>
          <description>Whether or not session id cookie has been deleted</description>
          <long-description>
</long-description>
          <tag line="141" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="153" package="Default">
        <name>$_destroyed</name>
        <default>false</default>
        <docblock>
          <description>Whether or not session has been destroyed via session_destroy()</description>
          <long-description>
</long-description>
          <tag line="148" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="160" package="Default">
        <name>$_strict</name>
        <default>false</default>
        <docblock>
          <description>Whether or not session must be initiated before usage</description>
          <long-description>
</long-description>
          <tag line="155" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="167" package="Default">
        <name>$_rememberMeSeconds</name>
        <default>1209600</default>
        <docblock>
          <description>Default number of seconds the session will be remembered for when asked to be remembered</description>
          <long-description>
</long-description>
          <tag line="162" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="174" package="Default">
        <name>$_defaultOptionsSet</name>
        <default>false</default>
        <docblock>
          <description>Whether the default options listed in Zend_Session::$_localOptions have been set</description>
          <long-description>
</long-description>
          <tag line="169" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="181" package="Default">
        <name>$_saveHandler</name>
        <default>null</default>
        <docblock>
          <description>A reference to the set session save handler</description>
          <long-description>
</long-description>
          <tag line="176" name="var" description="" type="\Zend_Session_SaveHandler_Interface">
            <type by_reference="false">\Zend_Session_SaveHandler_Interface</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" line="187" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor overriding - make sure that a developer cannot instantiate</description>
          <long-description>
</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="199" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>setOptions - set both the class specified</description>
          <long-description>
</long-description>
          <tag line="192" name="param" description="- pass-by-keyword style array of &lt;option name, option value&gt; pairs" type="array" variable="$userOptions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="192" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="192" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="199">
          <name>$userOptions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="238" package="Default">
        <name>getOptions</name>
        <docblock>
          <description>getOptions()</description>
          <long-description>
</long-description>
          <tag line="232" name="param" description="OPTIONAL" type="string" variable="$optionName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="232" name="return" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$optionName</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="264" package="Default">
        <name>setSaveHandler</name>
        <docblock>
          <description>setSaveHandler() - Session Save Handler assignment</description>
          <long-description>
</long-description>
          <tag line="258" name="param" description="" type="\Zend_Session_SaveHandler_Interface" variable="$interface">
            <type by_reference="false">\Zend_Session_SaveHandler_Interface</type>
          </tag>
          <tag line="258" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="264">
          <name>$saveHandler</name>
          <default/>
          <type>Zend_Session_SaveHandler_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="288" package="Default">
        <name>getSaveHandler</name>
        <docblock>
          <description>getSaveHandler() - Get the session Save Handler</description>
          <long-description>
</long-description>
          <tag line="283" name="return" description="" type="\Zend_Session_SaveHandler_Interface">
            <type by_reference="false">\Zend_Session_SaveHandler_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="302" package="Default">
        <name>regenerateId</name>
        <docblock>
          <description>regenerateId() - Regenerate the session id.  Best practice is to call this after
session is started.  If called prior to session starting, session id will be regenerated
at start time.</description>
          <long-description>
</long-description>
          <tag line="294" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="294" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="330" package="Default">
        <name>rememberMe</name>
        <docblock>
          <description>rememberMe() - Write a persistent cookie that expires after a number of seconds in the future. If no number of
seconds is specified, then this defaults to self::$_rememberMeSeconds.  Due to clock errors on end users' systems,
large values are recommended to avoid undesirable expiration of session cookies.</description>
          <long-description>
</long-description>
          <tag line="322" name="param" description="OPTIONAL specifies TTL for cookie in seconds from present time" type="int" variable="$seconds">
            <type by_reference="false">int</type>
          </tag>
          <tag line="322" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="330">
          <name>$seconds</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="345" package="Default">
        <name>forgetMe</name>
        <docblock>
          <description>forgetMe() - Write a volatile session cookie, removing any persistent cookie that may have existed. The session
would end upon, for example, termination of a web browser program.</description>
          <long-description>
</long-description>
          <tag line="339" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="358" package="Default">
        <name>rememberUntil</name>
        <docblock>
          <description>rememberUntil() - This method does the work of changing the state of the session cookie and making
sure that it gets resent to the browser via regenerateId()</description>
          <long-description>
</long-description>
          <tag line="351" name="param" description="" type="int" variable="$seconds">
            <type by_reference="false">int</type>
          </tag>
          <tag line="351" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="358">
          <name>$seconds</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="384" package="Default">
        <name>sessionExists</name>
        <docblock>
          <description>sessionExists() - whether or not a session exists for the current request</description>
          <long-description>
</long-description>
          <tag line="379" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="403" package="Default">
        <name>isDestroyed</name>
        <docblock>
          <description>Whether or not session has been destroyed via session_destroy()</description>
          <long-description>
</long-description>
          <tag line="398" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="416" package="Default">
        <name>start</name>
        <docblock>
          <description>start() - Start the session.</description>
          <long-description>
</long-description>
          <tag line="409" name="param" description="OPTIONAL Either user supplied options, or flag indicating if start initiated automatically" type="bool|array" variable="$options">
            <type by_reference="false">bool</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="409" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="409" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="416">
          <name>$options</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" line="516" package="Default">
        <name>_checkId</name>
        <docblock>
          <description>Perform a hash-bits check on the session ID</description>
          <long-description>
</long-description>
          <tag line="510" name="param" description="Session ID" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="510" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="516">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" line="537" package="Default">
        <name>_processStartupMetadataGlobal</name>
        <docblock>
          <description>_processGlobalMetadata() - this method initizes the sessions GLOBAL
metadata, mostly global data expiration calculations.</description>
          <long-description>
</long-description>
          <tag line="531" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="613" package="Default">
        <name>isStarted</name>
        <docblock>
          <description>isStarted() - convenience method to determine if the session is already started.</description>
          <long-description>
</long-description>
          <tag line="608" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="625" package="Default">
        <name>isRegenerated</name>
        <docblock>
          <description>isRegenerated() - convenience method to determine if session_regenerate_id()
has been called during this request by Zend_Session.</description>
          <long-description>
</long-description>
          <tag line="619" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="636" package="Default">
        <name>getId</name>
        <docblock>
          <description>getId() - get the current session id</description>
          <long-description>
</long-description>
          <tag line="631" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="649" package="Default">
        <name>setId</name>
        <docblock>
          <description>setId() - set an id to a user specified id</description>
          <long-description>
</long-description>
          <tag line="642" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="642" name="param" description="" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="642" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="649">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="681" package="Default">
        <name>registerValidator</name>
        <docblock>
          <description>registerValidator() - register a validator that will attempt to validate this session for
every future request</description>
          <long-description>
</long-description>
          <tag line="674" name="param" description="" type="\Zend_Session_Validator_Interface" variable="$validator">
            <type by_reference="false">\Zend_Session_Validator_Interface</type>
          </tag>
          <tag line="674" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="681">
          <name>$validator</name>
          <default/>
          <type>Zend_Session_Validator_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="692" package="Default">
        <name>stop</name>
        <docblock>
          <description>stop() - Disable write access.  Optionally disable read (not implemented).</description>
          <long-description>
</long-description>
          <tag line="687" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="705" package="Default">
        <name>writeClose</name>
        <docblock>
          <description>writeClose() - Shutdown the sesssion, close writing and detach $_SESSION from the back-end storage mechanism.</description>
          <long-description>&lt;p&gt;This will complete the internal data transformation on this request.&lt;/p&gt;
</long-description>
          <tag line="698" name="param" description="- OPTIONAL remove write access (i.e. throw error if Zend_Session's attempt writes)" type="bool" variable="$readonly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="698" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="705">
          <name>$readonly</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="731" package="Default">
        <name>destroy</name>
        <docblock>
          <description>destroy() - This is used to destroy session data, and optionally, the session cookie itself</description>
          <long-description>
</long-description>
          <tag line="724" name="param" description="- OPTIONAL remove session id cookie, defaults to true (remove cookie)" type="bool" variable="$remove_cookie">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="724" name="param" description="- OPTIONAL remove write access (i.e. throw error if Zend_Session's attempt writes)" type="bool" variable="$readonly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="724" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="731">
          <name>$remove_cookie</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="731">
          <name>$readonly</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="759" package="Default">
        <name>expireSessionCookie</name>
        <docblock>
          <description>expireSessionCookie() - Sends an expired session id cookie, causing the client to delete the session cookie</description>
          <long-description>
</long-description>
          <tag line="754" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" line="792" package="Default">
        <name>_processValidators</name>
        <docblock>
          <description>_processValidator() - internal function that is called in the existence of VALID metadata</description>
          <long-description>
</long-description>
          <tag line="786" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="786" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="815" package="Default">
        <name>namespaceIsset</name>
        <docblock>
          <description>namespaceIsset() - check to see if a namespace is set</description>
          <long-description>
</long-description>
          <tag line="809" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="809" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="815">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="828" package="Default">
        <name>namespaceUnset</name>
        <docblock>
          <description>namespaceUnset() - unset a namespace or a variable within a namespace</description>
          <long-description>
</long-description>
          <tag line="821" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="821" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="821" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="828">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="842" package="Default">
        <name>namespaceGet</name>
        <docblock>
          <description>namespaceGet() - get all variables in a namespace
Deprecated: Use getIterator() in Zend_Session_Namespace.</description>
          <long-description>
</long-description>
          <tag line="835" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="835" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="842">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="855" package="Default">
        <name>getIterator</name>
        <docblock>
          <description>getIterator() - return an iteratable object for use in foreach and the like,
this completes the IteratorAggregate interface</description>
          <long-description>
</long-description>
          <tag line="848" name="throws" description="" type="\Zend_Session_Exception">
            <type by_reference="false">\Zend_Session_Exception</type>
          </tag>
          <tag line="848" name="return" description="" type="\ArrayObject">
            <type by_reference="false">\ArrayObject</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="882" package="Default">
        <name>isWritable</name>
        <docblock>
          <description>isWritable() - returns a boolean indicating if namespaces can write (use setters)</description>
          <long-description>
</long-description>
          <tag line="877" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="893" package="Default">
        <name>isReadable</name>
        <docblock>
          <description>isReadable() - returns a boolean indicating if namespaces can write (use setters)</description>
          <long-description>
</long-description>
          <tag line="888" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Http/Resolver/Exception.php" hash="b40cf35987184f190636842171b38f6d" package="Zend\Auth\Zend\Auth\Adapter\Http">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter_Http"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Auth\Zend\Auth\Adapter\Http">
      <name>Zend_Auth_Adapter_Http_Resolver_Exception</name>
      <extends>\Zend_Auth_Exception</extends>
      <full_name>\Zend_Auth_Adapter_Http_Resolver_Exception</full_name>
      <docblock>
        <description>HTTP Auth Resolver Exception</description>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Zend_Auth_Adapter_Http"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Http/Resolver/File.php" hash="b2e4b69252bff1d8468a0ced002517b0" package="Zend\Auth\Zend\Auth\Adapter\Http">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter_Http"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: File.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Adapter/Http/Resolver/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="39" namespace="default" package="Zend\Auth\Zend\Auth\Adapter\Http">
      <name>Zend_Auth_Adapter_Http_Resolver_File</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Http_Resolver_File</full_name>
      <docblock>
        <description>HTTP Authentication File Resolver</description>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Zend_Auth_Adapter_Http"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Http_Resolver_Interface</implements>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$_file</name>
        <default/>
        <docblock>
          <description>Path to credentials file</description>
          <long-description>
</long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="54" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="48" name="param" description="Complete filename where the credentials are stored" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$path</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="68" package="Default">
        <name>setFile</name>
        <docblock>
          <description>Set the path to the credentials file</description>
          <long-description>
</long-description>
          <tag line="61" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="throws" description="" type="\Zend_Auth_Adapter_Http_Resolver_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Exception</type>
          </tag>
          <tag line="61" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Http_Resolver_File">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_File</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="87" package="Default">
        <name>getFile</name>
        <docblock>
          <description>Returns the path to the credentials file</description>
          <long-description>
</long-description>
          <tag line="82" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="113" package="Default">
        <name>resolve</name>
        <docblock>
          <description>Resolve credentials</description>
          <long-description>&lt;p&gt;Only the first matching username/realm combination in the file is
returned. If the file contains credentials for Digest authentication,
the returned string is the password hash, or h(a1) from RFC 2617. The
returned string is the plain-text password for Basic authentication.&lt;/p&gt;

&lt;p&gt;The expected format of the file is:
  username:realm:sharedSecret&lt;/p&gt;

&lt;p&gt;That is, each line consists of the user's username, the applicable
authentication realm, and the password or hash, each delimited by
colons.&lt;/p&gt;
</long-description>
          <tag line="92" name="param" description="Username" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="param" description="Authentication Realm" type="string" variable="$realm">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="throws" description="" type="\Zend_Auth_Adapter_Http_Resolver_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Exception</type>
          </tag>
          <tag line="92" name="return" description="User's shared secret, if the user is found in the realm, false otherwise." type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="113">
          <name>$realm</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Http/Resolver/Interface.php" hash="b85454fed4f520102d20e89d13731e60" package="Zend\Auth\Zend\Auth\Adapter\Http">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter_Http"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <interface namespace="default" line="36" package="Zend\Auth\Zend\Auth\Adapter\Http">
      <name>Zend_Auth_Adapter_Http_Resolver_Interface</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Http_Resolver_Interface</full_name>
      <docblock>
        <description>Auth HTTP Resolver Interface</description>
        <long-description>&lt;p&gt;Defines an interace to resolve a username/realm combination into a shared
secret usable by HTTP Authentication.&lt;/p&gt;
</long-description>
        <tag line="24" name="category" description="Zend"/>
        <tag line="24" name="package" description="Zend_Auth"/>
        <tag line="24" name="subpackage" description="Zend_Auth_Adapter_Http"/>
        <tag line="24" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="24" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="46" package="Default">
        <name>resolve</name>
        <docblock>
          <description>Resolve username/realm to password/hash/etc.</description>
          <long-description>
</long-description>
          <tag line="38" name="param" description="Username" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="Authentication Realm" type="string" variable="$realm">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="User's shared secret, if the user is found in the realm, false otherwise." type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$realm</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Zend/Auth/Adapter/Ldap.php" hash="41f5976e676fa6fc0422945814f15c59" package="Zend\Auth\Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Ldap.php 24618 2012-02-03 08:32:06Z sgehrig $"/>
    </docblock>
    <parse_markers>
      <critical line="28">No short description for class Zend_Auth_Adapter_Ldap</critical>
    </parse_markers>
    <include type="Require Once" line="26">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="35" namespace="default" package="Zend\Auth\Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_Ldap</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Ldap</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="28" name="category" description="Zend"/>
        <tag line="28" name="package" description="Zend_Auth"/>
        <tag line="28" name="subpackage" description="Zend_Auth_Adapter"/>
        <tag line="28" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="28" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_ldap</name>
        <default>null</default>
        <docblock>
          <description>The Zend_Ldap context.</description>
          <long-description>
</long-description>
          <tag line="38" name="var" description="" type="\Zend_Ldap">
            <type by_reference="false">\Zend_Ldap</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$_options</name>
        <default>null</default>
        <docblock>
          <description>The array of arrays of Zend_Ldap options passed to the constructor.</description>
          <long-description>
</long-description>
          <tag line="45" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$_username</name>
        <default>null</default>
        <docblock>
          <description>The username of the account being authenticated.</description>
          <long-description>
</long-description>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$_password</name>
        <default>null</default>
        <docblock>
          <description>The password of the account being authenticated.</description>
          <long-description>
</long-description>
          <tag line="59" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$_authenticatedDn</name>
        <default>null</default>
        <docblock>
          <description>The DN of the authenticated account. Used to retrieve the account entry on request.</description>
          <long-description>
</long-description>
          <tag line="66" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="81" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="73" name="param" description="An array of arrays of Zend_Ldap options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="param" description="The username of the account being authenticated" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="The password of the account being authenticated" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="81">
          <name>$username</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="81">
          <name>$password</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="97" package="Default">
        <name>getOptions</name>
        <docblock>
          <description>Returns the array of arrays of Zend_Ldap options of this adapter.</description>
          <long-description>
</long-description>
          <tag line="92" name="return" description="" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="109" package="Default">
        <name>setOptions</name>
        <docblock>
          <description>Sets the array of arrays of Zend_Ldap options to be used by
this adapter.</description>
          <long-description>
</long-description>
          <tag line="102" name="param" description="The array of arrays of Zend_Ldap options" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="102" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$options</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="121" package="Default">
        <name>getUsername</name>
        <docblock>
          <description>Returns the username of the account being authenticated, or
NULL if none is set.</description>
          <long-description>
</long-description>
          <tag line="115" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="132" package="Default">
        <name>setUsername</name>
        <docblock>
          <description>Sets the username for binding</description>
          <long-description>
</long-description>
          <tag line="126" name="param" description="The username for binding" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144" package="Default">
        <name>getPassword</name>
        <docblock>
          <description>Returns the password of the account being authenticated, or
NULL if none is set.</description>
          <long-description>
</long-description>
          <tag line="138" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="155" package="Default">
        <name>setPassword</name>
        <docblock>
          <description>Sets the passwort for the account</description>
          <long-description>
</long-description>
          <tag line="149" name="param" description="The password of the account being authenticated" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="149" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="171" package="Default">
        <name>setIdentity</name>
        <docblock>
          <description>setIdentity() - set the identity (username) to be used</description>
          <long-description>&lt;p&gt;Proxies to {@see setUsername()}&lt;/p&gt;

&lt;p&gt;Closes ZF-6813&lt;/p&gt;
</long-description>
          <tag line="161" name="param" description="" type="string" variable="$identity">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$identity</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="186" package="Default">
        <name>setCredential</name>
        <docblock>
          <description>setCredential() - set the credential (password) value to be used</description>
          <long-description>&lt;p&gt;Proxies to {@see setPassword()}&lt;/p&gt;

&lt;p&gt;Closes ZF-6813&lt;/p&gt;
</long-description>
          <tag line="176" name="param" description="" type="string" variable="$credential">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$credential</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="196" package="Default">
        <name>getLdap</name>
        <docblock>
          <description>Returns the LDAP Object</description>
          <long-description>
</long-description>
          <tag line="191" name="return" description="The Zend_Ldap object used to authenticate the credentials" type="\Zend_Ldap">
            <type by_reference="false">\Zend_Ldap</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215" package="Default">
        <name>setLdap</name>
        <docblock>
          <description>Set an Ldap connection</description>
          <long-description>
</long-description>
          <tag line="209" name="param" description="An existing Ldap object" type="\Zend_Ldap" variable="$ldap">
            <type by_reference="false">\Zend_Ldap</type>
          </tag>
          <tag line="209" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Ldap">
            <type by_reference="false">\Zend_Auth_Adapter_Ldap</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$ldap</name>
          <default/>
          <type>Zend_Ldap</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="230" package="Default">
        <name>_getAuthorityName</name>
        <docblock>
          <description>Returns a domain name for the current LDAP options. This is used
for skipping redundant operations (e.g. authentications).</description>
          <long-description>
</long-description>
          <tag line="224" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="245" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Authenticate the user</description>
          <long-description>
</long-description>
          <tag line="239" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="239" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="398" package="Default">
        <name>_prepareOptions</name>
        <docblock>
          <description>Sets the LDAP specific options on the Zend_Ldap instance</description>
          <long-description>
</long-description>
          <tag line="391" name="param" description="" type="\Zend_Ldap" variable="$ldap">
            <type by_reference="false">\Zend_Ldap</type>
          </tag>
          <tag line="391" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="391" name="return" description="of auth-adapter specific options" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="398">
          <name>$ldap</name>
          <default/>
          <type>Zend_Ldap</type>
        </argument>
        <argument line="398">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="444" package="Default">
        <name>_checkGroupMembership</name>
        <docblock>
          <description>Checks the group membership of the bound user</description>
          <long-description>
</long-description>
          <tag line="435" name="param" description="" type="\Zend_Ldap" variable="$ldap">
            <type by_reference="false">\Zend_Ldap</type>
          </tag>
          <tag line="435" name="param" description="" type="string" variable="$canonicalName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="435" name="param" description="" type="string" variable="$dn">
            <type by_reference="false">string</type>
          </tag>
          <tag line="435" name="param" description="" type="array" variable="$adapterOptions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="435" name="return" description="" type="string|true">
            <type by_reference="false">string</type>
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="444">
          <name>$ldap</name>
          <default/>
          <type>Zend_Ldap</type>
        </argument>
        <argument line="444">
          <name>$canonicalName</name>
          <default/>
          <type/>
        </argument>
        <argument line="444">
          <name>$dn</name>
          <default/>
          <type/>
        </argument>
        <argument line="444">
          <name>$adapterOptions</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="487" package="Default">
        <name>getAccountObject</name>
        <docblock>
          <description>getAccountObject() - Returns the result entry as a stdClass object</description>
          <long-description>&lt;p&gt;This resembles the feature {@see Zend_Auth_Adapter_DbTable::getResultRowObject()}.
Closes ZF-6813&lt;/p&gt;
</long-description>
          <tag line="477" name="param" description="" type="array" variable="$returnAttribs">
            <type by_reference="false">array</type>
          </tag>
          <tag line="477" name="param" description="" type="array" variable="$omitAttribs">
            <type by_reference="false">array</type>
          </tag>
          <tag line="477" name="return" description="" type="\stdClass|boolean">
            <type by_reference="false">\stdClass</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="487">
          <name>$returnAttribs</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="487">
          <name>$omitAttribs</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="520" package="Default">
        <name>_optionsToString</name>
        <docblock>
          <description>Converts options to string</description>
          <long-description>
</long-description>
          <tag line="514" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="514" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="520">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Http.php" hash="30b17114f28e9e93dc6fa15a6937bbdf" package="Zend\Auth\Zend\Auth\Adapter\Http">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter_Http"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Http.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="44" namespace="default" package="Zend\Auth\Zend\Auth\Adapter\Http">
      <name>Zend_Auth_Adapter_Http</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Http</full_name>
      <docblock>
        <description>HTTP Authentication Adapter</description>
        <long-description>&lt;p&gt;Implements a pretty good chunk of RFC 2617.&lt;/p&gt;
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Zend_Auth_Adapter_Http"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
        <tag line="30" name="todo" description="Support auth-int"/>
        <tag line="30" name="todo" description="Track nonces, nonce-count, opaque for replay protection and stale support"/>
        <tag line="30" name="todo" description="Support Authentication-Info header"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_request</name>
        <default/>
        <docblock>
          <description>Reference to the HTTP Request object</description>
          <long-description>
</long-description>
          <tag line="46" name="var" description="" type="\Zend_Controller_Request_Http">
            <type by_reference="false">\Zend_Controller_Request_Http</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_response</name>
        <default/>
        <docblock>
          <description>Reference to the HTTP Response object</description>
          <long-description>
</long-description>
          <tag line="53" name="var" description="" type="\Zend_Controller_Response_Http">
            <type by_reference="false">\Zend_Controller_Response_Http</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$_basicResolver</name>
        <default/>
        <docblock>
          <description>Object that looks up user credentials for the Basic scheme</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72" package="Default">
        <name>$_digestResolver</name>
        <default/>
        <docblock>
          <description>Object that looks up user credentials for the Digest scheme</description>
          <long-description>
</long-description>
          <tag line="67" name="var" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$_supportedSchemes</name>
        <default>array('basic'</default>
        <docblock>
          <description>List of authentication schemes supported by this class</description>
          <long-description>
</long-description>
          <tag line="74" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="86" package="Default">
        <name>$_acceptSchemes</name>
        <default/>
        <docblock>
          <description>List of schemes this class will accept from the client</description>
          <long-description>
</long-description>
          <tag line="81" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="93" package="Default">
        <name>$_domains</name>
        <default/>
        <docblock>
          <description>Space-delimited list of protected domains for Digest Auth</description>
          <long-description>
</long-description>
          <tag line="88" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="100" package="Default">
        <name>$_realm</name>
        <default/>
        <docblock>
          <description>The protection realm to use</description>
          <long-description>
</long-description>
          <tag line="95" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="107" package="Default">
        <name>$_nonceTimeout</name>
        <default/>
        <docblock>
          <description>Nonce timeout period</description>
          <long-description>
</long-description>
          <tag line="102" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="114" package="Default">
        <name>$_useOpaque</name>
        <default/>
        <docblock>
          <description>Whether to send the opaque value in the header. True by default</description>
          <long-description>
</long-description>
          <tag line="109" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="122" package="Default">
        <name>$_supportedAlgos</name>
        <default>array('MD5')</default>
        <docblock>
          <description>List of the supported digest algorithms. I want to support both MD5 and
MD5-sess, but MD5-sess won't make it into the first version.</description>
          <long-description>
</long-description>
          <tag line="116" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="129" package="Default">
        <name>$_algo</name>
        <default/>
        <docblock>
          <description>The actual algorithm to use. Defaults to MD5</description>
          <long-description>
</long-description>
          <tag line="124" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="137" package="Default">
        <name>$_supportedQops</name>
        <default>array('auth')</default>
        <docblock>
          <description>List of supported qop options. My intetion is to support both 'auth' and
'auth-int', but 'auth-int' won't make it into the first version.</description>
          <long-description>
</long-description>
          <tag line="131" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="145" package="Default">
        <name>$_imaProxy</name>
        <default/>
        <docblock>
          <description>Whether or not to do Proxy Authentication instead of origin server
authentication (send 407's instead of 401's). Off by default.</description>
          <long-description>
</long-description>
          <tag line="139" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="152" package="Default">
        <name>$_ieNoOpaque</name>
        <default/>
        <docblock>
          <description>Flag indicating the client is IE and didn't bother to return the opaque string</description>
          <long-description>
</long-description>
          <tag line="147" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="168" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="154" name="param" description="Configuration settings: 'accept_schemes' =&gt; 'basic'|'digest'|'basic digest' 'realm' =&gt; &lt;string&gt; 'digest_domains' =&gt; &lt;string&gt; Space-delimited list of URIs 'nonce_timeout' =&gt; &lt;int&gt; 'use_opaque' =&gt; &lt;bool&gt; Whether to send the opaque value in the header 'alogrithm' =&gt; &lt;string&gt; See $_supportedAlgos. Default: MD5 'proxy_auth' =&gt; &lt;bool&gt; Whether to do authentication as a Proxy" type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
          <tag line="154" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="154" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$config</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="272" package="Default">
        <name>setBasicResolver</name>
        <docblock>
          <description>Setter for the _basicResolver property</description>
          <long-description>
</long-description>
          <tag line="266" name="param" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface" variable="$resolver">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
          <tag line="266" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Http">
            <type by_reference="false">\Zend_Auth_Adapter_Http</type>
          </tag>
        </docblock>
        <argument line="272">
          <name>$resolver</name>
          <default/>
          <type>Zend_Auth_Adapter_Http_Resolver_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="284" package="Default">
        <name>getBasicResolver</name>
        <docblock>
          <description>Getter for the _basicResolver property</description>
          <long-description>
</long-description>
          <tag line="279" name="return" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="295" package="Default">
        <name>setDigestResolver</name>
        <docblock>
          <description>Setter for the _digestResolver property</description>
          <long-description>
</long-description>
          <tag line="289" name="param" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface" variable="$resolver">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
          <tag line="289" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Http">
            <type by_reference="false">\Zend_Auth_Adapter_Http</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$resolver</name>
          <default/>
          <type>Zend_Auth_Adapter_Http_Resolver_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="307" package="Default">
        <name>getDigestResolver</name>
        <docblock>
          <description>Getter for the _digestResolver property</description>
          <long-description>
</long-description>
          <tag line="302" name="return" description="" type="\Zend_Auth_Adapter_Http_Resolver_Interface">
            <type by_reference="false">\Zend_Auth_Adapter_Http_Resolver_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="318" package="Default">
        <name>setRequest</name>
        <docblock>
          <description>Setter for the Request object</description>
          <long-description>
</long-description>
          <tag line="312" name="param" description="" type="\Zend_Controller_Request_Http" variable="$request">
            <type by_reference="false">\Zend_Controller_Request_Http</type>
          </tag>
          <tag line="312" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Http">
            <type by_reference="false">\Zend_Auth_Adapter_Http</type>
          </tag>
        </docblock>
        <argument line="318">
          <name>$request</name>
          <default/>
          <type>Zend_Controller_Request_Http</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="330" package="Default">
        <name>getRequest</name>
        <docblock>
          <description>Getter for the Request object</description>
          <long-description>
</long-description>
          <tag line="325" name="return" description="" type="\Zend_Controller_Request_Http">
            <type by_reference="false">\Zend_Controller_Request_Http</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="341" package="Default">
        <name>setResponse</name>
        <docblock>
          <description>Setter for the Response object</description>
          <long-description>
</long-description>
          <tag line="335" name="param" description="" type="\Zend_Controller_Response_Http" variable="$response">
            <type by_reference="false">\Zend_Controller_Response_Http</type>
          </tag>
          <tag line="335" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Http">
            <type by_reference="false">\Zend_Auth_Adapter_Http</type>
          </tag>
        </docblock>
        <argument line="341">
          <name>$response</name>
          <default/>
          <type>Zend_Controller_Response_Http</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="353" package="Default">
        <name>getResponse</name>
        <docblock>
          <description>Getter for the Response object</description>
          <long-description>
</long-description>
          <tag line="348" name="return" description="" type="\Zend_Controller_Response_Http">
            <type by_reference="false">\Zend_Controller_Response_Http</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="364" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Authenticate</description>
          <long-description>
</long-description>
          <tag line="358" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="358" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="433" package="Default">
        <name>_challengeClient</name>
        <docblock>
          <description>Challenge Client</description>
          <long-description>&lt;p&gt;Sets a 401 or 407 Unauthorized response code, and creates the
appropriate Authenticate header(s) to prompt for credentials.&lt;/p&gt;
</long-description>
          <tag line="425" name="return" description="Always returns a non-identity Auth result" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="467" package="Default">
        <name>_basicHeader</name>
        <docblock>
          <description>Basic Header</description>
          <long-description>&lt;p&gt;Generates a Proxy- or WWW-Authenticate header value in the Basic
authentication scheme.&lt;/p&gt;
</long-description>
          <tag line="459" name="return" description="Authenticate header value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="480" package="Default">
        <name>_digestHeader</name>
        <docblock>
          <description>Digest Header</description>
          <long-description>&lt;p&gt;Generates a Proxy- or WWW-Authenticate header value in the Digest
authentication scheme.&lt;/p&gt;
</long-description>
          <tag line="472" name="return" description="Authenticate header value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="499" package="Default">
        <name>_basicAuth</name>
        <docblock>
          <description>Basic Authentication</description>
          <long-description>
</long-description>
          <tag line="492" name="param" description="Client's Authorization header" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
          <tag line="492" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="492" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
        <argument line="499">
          <name>$header</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="556" package="Default">
        <name>_digestAuth</name>
        <docblock>
          <description>Digest Authentication</description>
          <long-description>
</long-description>
          <tag line="549" name="param" description="Client's Authorization header" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
          <tag line="549" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="549" name="return" description="Valid auth result only on successful auth" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
        <argument line="556">
          <name>$header</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="656" package="Default">
        <name>_calcNonce</name>
        <docblock>
          <description>Calculate Nonce</description>
          <long-description>
</long-description>
          <tag line="651" name="return" description="The nonce value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="685" package="Default">
        <name>_calcOpaque</name>
        <docblock>
          <description>Calculate Opaque</description>
          <long-description>&lt;p&gt;The opaque string can be anything; the client must return it exactly as
it was sent. It may be useful to store data in this string in some
applications. Ideally, a new value for this would be generated each time
a WWW-Authenticate header is sent (in order to reduce predictability),
but we would have to be able to create the same exact value across at
least two separate requests from the same client.&lt;/p&gt;
</long-description>
          <tag line="673" name="return" description="The opaque value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="697" package="Default">
        <name>_parseDigestAuth</name>
        <docblock>
          <description>Parse Digest Authorization header</description>
          <long-description>
</long-description>
          <tag line="690" name="param" description="Client's Authorization: HTTP header" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
          <tag line="690" name="return" description="Data elements from header, or false if any part of the header is invalid" type="array|false">
            <type by_reference="false">array</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="697">
          <name>$header</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="858" package="Default">
        <name>_secureStringCompare</name>
        <docblock>
          <description>Securely compare two strings for equality while avoided C level memcmp()
optimisations capable of leaking timing information useful to an attacker
attempting to iteratively guess the unknown string (e.g. password) being
compared against.</description>
          <long-description>
</long-description>
          <tag line="848" name="param" description="" type="string" variable="$a">
            <type by_reference="false">string</type>
          </tag>
          <tag line="848" name="param" description="" type="string" variable="$b">
            <type by_reference="false">string</type>
          </tag>
          <tag line="848" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="858">
          <name>$a</name>
          <default/>
          <type/>
        </argument>
        <argument line="858">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/OpenId.php" hash="3468be188480cdcc6ce083670f00a733" package="Zend\Auth\Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: OpenId.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <notice line="198">Name of argument $response does not match with function Docblock</notice>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <include type="Require Once" line="33">
      <name>Zend/OpenId/Consumer.php</name>
    </include>
    <class final="false" abstract="false" line="46" namespace="default" package="Zend\Auth\Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_OpenId</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_OpenId</full_name>
      <docblock>
        <description>A Zend_Auth Authentication Adapter allowing the use of OpenID protocol as an
authentication mechanism</description>
        <long-description>
</long-description>
        <tag line="36" name="category" description="Zend"/>
        <tag line="36" name="package" description="Zend_Auth"/>
        <tag line="36" name="subpackage" description="Zend_Auth_Adapter"/>
        <tag line="36" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="36" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="private" line="53" package="Default">
        <name>$_id</name>
        <default>null</default>
        <docblock>
          <description>The identity value being authenticated</description>
          <long-description>
</long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="60" package="Default">
        <name>$_storage</name>
        <default>null</default>
        <docblock>
          <description>Reference to an implementation of a storage object</description>
          <long-description>
</long-description>
          <tag line="55" name="var" description="" type="\Zend_OpenId_Consumer_Storage">
            <type by_reference="false">\Zend_OpenId_Consumer_Storage</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="67" package="Default">
        <name>$_returnTo</name>
        <default>null</default>
        <docblock>
          <description>The URL to redirect response from server to</description>
          <long-description>
</long-description>
          <tag line="62" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="74" package="Default">
        <name>$_root</name>
        <default>null</default>
        <docblock>
          <description>The HTTP URL to identify consumer on server</description>
          <long-description>
</long-description>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="81" package="Default">
        <name>$_extensions</name>
        <default>null</default>
        <docblock>
          <description>Extension object or array of extensions objects</description>
          <long-description>
</long-description>
          <tag line="76" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="88" package="Default">
        <name>$_response</name>
        <default>null</default>
        <docblock>
          <description>The response object to perform HTTP or HTML form redirection</description>
          <long-description>
</long-description>
          <tag line="83" name="var" description="" type="\Zend_Controller_Response_Abstract">
            <type by_reference="false">\Zend_Controller_Response_Abstract</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="96" package="Default">
        <name>$_check_immediate</name>
        <default>false</default>
        <docblock>
          <description>Enables or disables interaction with user during authentication on
OpenID provider.</description>
          <long-description>
</long-description>
          <tag line="90" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="103" package="Default">
        <name>$_httpClient</name>
        <default>null</default>
        <docblock>
          <description>HTTP client to make HTTP requests</description>
          <long-description>
</long-description>
          <tag line="98" name="var" description="" type="\Zend_Http_Client">
            <type by_reference="false">\Zend_Http_Client</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="118" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="105" name="param" description="the identity value" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="param" description="an optional implementation of a storage object" type="\Zend_OpenId_Consumer_Storage" variable="$storage">
            <type by_reference="false">\Zend_OpenId_Consumer_Storage</type>
          </tag>
          <tag line="105" name="param" description="HTTP URL to redirect response from server to" type="string" variable="$returnTo">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="param" description="HTTP URL to identify consumer on server" type="string" variable="$root">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="param" description="extension object or array of extensions objects" type="mixed" variable="$extensions">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="param" description="an optional response object to perform HTTP or HTML form redirection" type="\Zend_Controller_Response_Abstract" variable="$response">
            <type by_reference="false">\Zend_Controller_Response_Abstract</type>
          </tag>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="119">
          <name>$storage</name>
          <default>null</default>
          <type>Zend_OpenId_Consumer_Storage</type>
        </argument>
        <argument line="120">
          <name>$returnTo</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="121">
          <name>$root</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="122">
          <name>$extensions</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="123">
          <name>$response</name>
          <default>null</default>
          <type>Zend_Controller_Response_Abstract</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="138" package="Default">
        <name>setIdentity</name>
        <docblock>
          <description>Sets the value to be used as the identity</description>
          <long-description>
</long-description>
          <tag line="132" name="param" description="the identity value" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="150" package="Default">
        <name>setStorage</name>
        <docblock>
          <description>Sets the storage implementation which will be use by OpenId</description>
          <long-description>
</long-description>
          <tag line="144" name="param" description="" type="\Zend_OpenId_Consumer_Storage" variable="$storage">
            <type by_reference="false">\Zend_OpenId_Consumer_Storage</type>
          </tag>
          <tag line="144" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$storage</name>
          <default/>
          <type>Zend_OpenId_Consumer_Storage</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="162" package="Default">
        <name>setReturnTo</name>
        <docblock>
          <description>Sets the HTTP URL to redirect response from server to</description>
          <long-description>
</long-description>
          <tag line="156" name="param" description="" type="string" variable="$returnTo">
            <type by_reference="false">string</type>
          </tag>
          <tag line="156" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$returnTo</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="174" package="Default">
        <name>setRoot</name>
        <docblock>
          <description>Sets HTTP URL to identify consumer on server</description>
          <long-description>
</long-description>
          <tag line="168" name="param" description="" type="string" variable="$root">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$root</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="186" package="Default">
        <name>setExtensions</name>
        <docblock>
          <description>Sets OpenID extension(s)</description>
          <long-description>
</long-description>
          <tag line="180" name="param" description="" type="mixed" variable="$extensions">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="180" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$extensions</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="198" package="Default">
        <name>setResponse</name>
        <docblock>
          <description>Sets an optional response object to perform HTTP or HTML form redirection</description>
          <long-description>
</long-description>
          <tag line="192" name="param" description="" type="string" variable="$root">
            <type by_reference="false">string</type>
          </tag>
          <tag line="192" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$response</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="211" package="Default">
        <name>setCheckImmediate</name>
        <docblock>
          <description>Enables or disables interaction with user during authentication on
OpenID provider.</description>
          <long-description>
</long-description>
          <tag line="204" name="param" description="" type="bool" variable="$check_immediate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="204" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_OpenId">
            <type by_reference="false">\Zend_Auth_Adapter_OpenId</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$check_immediate</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="222" package="Default">
        <name>setHttpClient</name>
        <docblock>
          <description>Sets HTTP client object to make HTTP requests</description>
          <long-description>
</long-description>
          <tag line="217" name="param" description="HTTP client object to be used" type="\Zend_Http_Client" variable="$client">
            <type by_reference="false">\Zend_Http_Client</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$client</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="233" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Authenticates the given OpenId identity.</description>
          <long-description>&lt;p&gt;Defined by Zend_Auth_Adapter_Interface.&lt;/p&gt;
</long-description>
          <tag line="226" name="throws" description="If answering the authentication query is impossible" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="226" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Exception.php" hash="190db1919357d49e859636222f3446de" package="Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="30">No short description for class Zend_Auth_Adapter_Exception</critical>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_Exception</name>
      <extends>\Zend_Auth_Exception</extends>
      <full_name>\Zend_Auth_Adapter_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Adapter"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/DbTable.php" hash="6893fc3c703446848a89bd369ef715de" package="Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: DbTable.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="40">No short description for class Zend_Auth_Adapter_DbTable</critical>
      <critical line="57">No short description for property $_dbSelect</critical>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <include type="Require Once" line="32">
      <name>Zend/Db/Adapter/Abstract.php</name>
    </include>
    <include type="Require Once" line="37">
      <name>Zend/Auth/Result.php</name>
    </include>
    <class final="false" abstract="false" line="47" namespace="default" package="Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_DbTable</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_DbTable</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="40" name="category" description="Zend"/>
        <tag line="40" name="package" description="Zend_Auth"/>
        <tag line="40" name="subpackage" description="Adapter"/>
        <tag line="40" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="40" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$_zendDb</name>
        <default>null</default>
        <docblock>
          <description>Database Connection</description>
          <long-description>
</long-description>
          <tag line="50" name="var" description="" type="\Zend_Db_Adapter_Abstract">
            <type by_reference="false">\Zend_Db_Adapter_Abstract</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$_dbSelect</name>
        <default>null</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag line="57" name="var" description="" type="\Zend_Db_Select">
            <type by_reference="false">\Zend_Db_Select</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$_tableName</name>
        <default>null</default>
        <docblock>
          <description>$_tableName - the table name to check</description>
          <long-description>
</long-description>
          <tag line="62" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" package="Default">
        <name>$_identityColumn</name>
        <default>null</default>
        <docblock>
          <description>$_identityColumn - the column to use as the identity</description>
          <long-description>
</long-description>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="81" package="Default">
        <name>$_credentialColumn</name>
        <default>null</default>
        <docblock>
          <description>$_credentialColumns - columns to be used as the credentials</description>
          <long-description>
</long-description>
          <tag line="76" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="88" package="Default">
        <name>$_identity</name>
        <default>null</default>
        <docblock>
          <description>$_identity - Identity value</description>
          <long-description>
</long-description>
          <tag line="83" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="95" package="Default">
        <name>$_credential</name>
        <default>null</default>
        <docblock>
          <description>$_credential - Credential values</description>
          <long-description>
</long-description>
          <tag line="90" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="102" package="Default">
        <name>$_credentialTreatment</name>
        <default>null</default>
        <docblock>
          <description>$_credentialTreatment - Treatment applied to the credential, such as MD5() or PASSWORD()</description>
          <long-description>
</long-description>
          <tag line="97" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="109" package="Default">
        <name>$_authenticateResultInfo</name>
        <default>null</default>
        <docblock>
          <description>$_authenticateResultInfo</description>
          <long-description>
</long-description>
          <tag line="104" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="116" package="Default">
        <name>$_resultRow</name>
        <default>null</default>
        <docblock>
          <description>$_resultRow - Results of database authentication query</description>
          <long-description>
</long-description>
          <tag line="111" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="125" package="Default">
        <name>$_ambiguityIdentity</name>
        <default>false</default>
        <docblock>
          <description>$_ambiguityIdentity - Flag to indicate same Identity can be used with
different credentials. Default is FALSE and need to be set to true to
allow ambiguity usage.</description>
          <long-description>
</long-description>
          <tag line="118" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="137" package="Default">
        <name>__construct</name>
        <docblock>
          <description>__construct() - Sets configuration options</description>
          <long-description>
</long-description>
          <tag line="127" name="param" description="If null, default database adapter assumed" type="\Zend_Db_Adapter_Abstract" variable="$zendDb">
            <type by_reference="false">\Zend_Db_Adapter_Abstract</type>
          </tag>
          <tag line="127" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="param" description="" type="string" variable="$identityColumn">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="param" description="" type="string" variable="$credentialColumn">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="param" description="" type="string" variable="$credentialTreatment">
            <type by_reference="false">string</type>
          </tag>
          <tag line="127" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$zendDb</name>
          <default>null</default>
          <type>Zend_Db_Adapter_Abstract</type>
        </argument>
        <argument line="137">
          <name>$tableName</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="137">
          <name>$identityColumn</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="138">
          <name>$credentialColumn</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="138">
          <name>$credentialTreatment</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="166" package="Default">
        <name>_setDbAdapter</name>
        <docblock>
          <description>_setDbAdapter() - set the database adapter to be used for quering</description>
          <long-description>
</long-description>
          <tag line="159" name="param" description="Zend_Db_Adapter_Abstract" type="" variable="$zendDb"/>
          <tag line="159" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="159" name="return" description="" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$zendDb</name>
          <default>null</default>
          <type>Zend_Db_Adapter_Abstract</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="191" package="Default">
        <name>setTableName</name>
        <docblock>
          <description>setTableName() - set the table name to be used in the select query</description>
          <long-description>
</long-description>
          <tag line="185" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="185" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$tableName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="203" package="Default">
        <name>setIdentityColumn</name>
        <docblock>
          <description>setIdentityColumn() - set the column name to be used as the identity column</description>
          <long-description>
</long-description>
          <tag line="197" name="param" description="" type="string" variable="$identityColumn">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$identityColumn</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="215" package="Default">
        <name>setCredentialColumn</name>
        <docblock>
          <description>setCredentialColumn() - set the column name to be used as the credential column</description>
          <long-description>
</long-description>
          <tag line="209" name="param" description="" type="string" variable="$credentialColumn">
            <type by_reference="false">string</type>
          </tag>
          <tag line="209" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$credentialColumn</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="238" package="Default">
        <name>setCredentialTreatment</name>
        <docblock>
          <description>setCredentialTreatment() - allows the developer to pass a parameterized string that is
used to transform or treat the input credential data.</description>
          <long-description>&lt;p&gt;In many cases, passwords and other sensitive data are encrypted, hashed, encoded,
obscured, or otherwise treated through some function or algorithm. By specifying a
parameterized treatment string with this method, a developer may apply arbitrary SQL
upon input credential data.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;'PASSWORD(?)'
 'MD5(?)'&lt;/p&gt;
</long-description>
          <tag line="221" name="param" description="" type="string" variable="$treatment">
            <type by_reference="false">string</type>
          </tag>
          <tag line="221" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$treatment</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="250" package="Default">
        <name>setIdentity</name>
        <docblock>
          <description>setIdentity() - set the value to be used as the identity</description>
          <long-description>
</long-description>
          <tag line="244" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="244" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263" package="Default">
        <name>setCredential</name>
        <docblock>
          <description>setCredential() - set the credential value to be used, optionally can specify a treatment
to be used, should be supplied in parameterized form, such as 'MD5(?)' or 'PASSWORD(?)'</description>
          <long-description>
</long-description>
          <tag line="256" name="param" description="" type="string" variable="$credential">
            <type by_reference="false">string</type>
          </tag>
          <tag line="256" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$credential</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="277" package="Default">
        <name>setAmbiguityIdentity</name>
        <docblock>
          <description>setAmbiguityIdentity() - sets a flag for usage of identical identities
with unique credentials. It accepts integers (0, 1) or boolean (true,
false) parameters. Default is false.</description>
          <long-description>
</long-description>
          <tag line="269" name="param" description="" type="int|bool" variable="$flag">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="269" name="return" description="" type="\Zend_Auth_Adapter_DbTable">
            <type by_reference="false">\Zend_Auth_Adapter_DbTable</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$flag</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="292" package="Default">
        <name>getAmbiguityIdentity</name>
        <docblock>
          <description>getAmbiguityIdentity() - returns TRUE for usage of multiple identical
identies with different credentials, FALSE if not used.</description>
          <long-description>
</long-description>
          <tag line="286" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="302" package="Default">
        <name>getDbSelect</name>
        <docblock>
          <description>getDbSelect() - Return the preauthentication Db Select object for userland select query modification</description>
          <long-description>
</long-description>
          <tag line="297" name="return" description="" type="\Zend_Db_Select">
            <type by_reference="false">\Zend_Db_Select</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="318" package="Default">
        <name>getResultRowObject</name>
        <docblock>
          <description>getResultRowObject() - Returns the result row as a stdClass object</description>
          <long-description>
</long-description>
          <tag line="311" name="param" description="" type="string|array" variable="$returnColumns">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="311" name="param" description="" type="string|array" variable="$omitColumns">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="311" name="return" description="" type="\stdClass|boolean">
            <type by_reference="false">\stdClass</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="318">
          <name>$returnColumns</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="318">
          <name>$omitColumns</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="365" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>authenticate() - defined by Zend_Auth_Adapter_Interface.  This method is called to
attempt an authentication.  Previous to this call, this adapter would have already
been configured with all necessary information to successfully connect to a database
table and attempt to find a record matching the provided identity.</description>
          <long-description>
</long-description>
          <tag line="356" name="throws" description="if answering the authentication query is impossible" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="356" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="398" package="Default">
        <name>_authenticateSetup</name>
        <docblock>
          <description>_authenticateSetup() - This method abstracts the steps involved with
making sure that this adapter was indeed setup properly with all
required pieces of information.</description>
          <long-description>
</long-description>
          <tag line="390" name="throws" description="- in the event that setup was not done properly" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="390" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="437" package="Default">
        <name>_authenticateCreateSelect</name>
        <docblock>
          <description>_authenticateCreateSelect() - This method creates a Zend_Db_Select object that
is completely configured to be queried against the database.</description>
          <long-description>
</long-description>
          <tag line="431" name="return" description="" type="\Zend_Db_Select">
            <type by_reference="false">\Zend_Db_Select</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="473" package="Default">
        <name>_authenticateQuerySelect</name>
        <docblock>
          <description>_authenticateQuerySelect() - This method accepts a Zend_Db_Select object and
performs a query against the database with that object.</description>
          <long-description>
</long-description>
          <tag line="464" name="param" description="" type="\Zend_Db_Select" variable="$dbSelect">
            <type by_reference="false">\Zend_Db_Select</type>
          </tag>
          <tag line="464" name="throws" description="- when an invalid select object is encountered" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="464" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="473">
          <name>$dbSelect</name>
          <default/>
          <type>Zend_Db_Select</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="504" package="Default">
        <name>_authenticateValidateResultSet</name>
        <docblock>
          <description>_authenticateValidateResultSet() - This method attempts to make
certain that only one record was returned in the resultset</description>
          <long-description>
</long-description>
          <tag line="497" name="param" description="" type="array" variable="$resultIdentities">
            <type by_reference="false">array</type>
          </tag>
          <tag line="497" name="return" description="" type="true|\Zend_Auth_Result">
            <type by_reference="false">true</type>
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
        <argument line="504">
          <name>$resultIdentities</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="528" package="Default">
        <name>_authenticateValidateResult</name>
        <docblock>
          <description>_authenticateValidateResult() - This method attempts to validate that
the record in the resultset is indeed a record that matched the
identity provided to this adapter.</description>
          <long-description>
</long-description>
          <tag line="520" name="param" description="" type="array" variable="$resultIdentity">
            <type by_reference="false">array</type>
          </tag>
          <tag line="520" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
        <argument line="528">
          <name>$resultIdentity</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="552" package="Default">
        <name>_authenticateCreateAuthResult</name>
        <docblock>
          <description>_authenticateCreateAuthResult() - Creates a Zend_Auth_Result object from
the information that has been collected during the authenticate() attempt.</description>
          <long-description>
</long-description>
          <tag line="546" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/InfoCard.php" hash="983fff0fceaa7a758e81e18c5534a7c6" package="Zend\Auth\Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: InfoCard.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="26">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <include type="Require Once" line="31">
      <name>Zend/Auth/Result.php</name>
    </include>
    <include type="Require Once" line="36">
      <name>Zend/InfoCard.php</name>
    </include>
    <class final="false" abstract="false" line="48" namespace="default" package="Zend\Auth\Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_InfoCard</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_InfoCard</full_name>
      <docblock>
        <description>A Zend_Auth Authentication Adapter allowing the use of Information Cards as an
authentication mechanism</description>
        <long-description>
</long-description>
        <tag line="38" name="category" description="Zend"/>
        <tag line="38" name="package" description="Zend_Auth"/>
        <tag line="38" name="subpackage" description="Zend_Auth_Adapter"/>
        <tag line="38" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="38" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$_xmlToken</name>
        <default/>
        <docblock>
          <description>The XML Token being authenticated</description>
          <long-description>
</long-description>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$_infoCard</name>
        <default/>
        <docblock>
          <description>The instance of Zend_InfoCard</description>
          <long-description>
</long-description>
          <tag line="57" name="var" description="" type="\Zend_InfoCard">
            <type by_reference="false">\Zend_InfoCard</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="70" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Constructor</description>
          <long-description>
</long-description>
          <tag line="64" name="param" description="The XML Token provided by the client" type="string" variable="$strXmlDocument">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$strXmlDocument</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="82" package="Default">
        <name>setAdapter</name>
        <docblock>
          <description>Sets the InfoCard component Adapter to use</description>
          <long-description>
</long-description>
          <tag line="76" name="param" description="" type="\Zend_InfoCard_Adapter_Interface" variable="$a">
            <type by_reference="false">\Zend_InfoCard_Adapter_Interface</type>
          </tag>
          <tag line="76" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_InfoCard">
            <type by_reference="false">\Zend_Auth_Adapter_InfoCard</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$a</name>
          <default/>
          <type>Zend_InfoCard_Adapter_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="93" package="Default">
        <name>getAdapter</name>
        <docblock>
          <description>Retrieves the InfoCard component adapter being used</description>
          <long-description>
</long-description>
          <tag line="88" name="return" description="" type="\Zend_InfoCard_Adapter_Interface">
            <type by_reference="false">\Zend_InfoCard_Adapter_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="103" package="Default">
        <name>getPKCipherObject</name>
        <docblock>
          <description>Retrieves the InfoCard public key cipher object being used</description>
          <long-description>
</long-description>
          <tag line="98" name="return" description="" type="\Zend_InfoCard_Cipher_PKI_Interface">
            <type by_reference="false">\Zend_InfoCard_Cipher_PKI_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="114" package="Default">
        <name>setPKICipherObject</name>
        <docblock>
          <description>Sets the InfoCard public key cipher object to use</description>
          <long-description>
</long-description>
          <tag line="108" name="param" description="" type="\Zend_InfoCard_Cipher_PKI_Interface" variable="$cipherObj">
            <type by_reference="false">\Zend_InfoCard_Cipher_PKI_Interface</type>
          </tag>
          <tag line="108" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_InfoCard">
            <type by_reference="false">\Zend_Auth_Adapter_InfoCard</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$cipherObj</name>
          <default/>
          <type>Zend_InfoCard_Cipher_PKI_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125" package="Default">
        <name>getSymCipherObject</name>
        <docblock>
          <description>Retrieves the Symmetric cipher object being used</description>
          <long-description>
</long-description>
          <tag line="120" name="return" description="" type="\Zend_InfoCard_Cipher_Symmetric_Interface">
            <type by_reference="false">\Zend_InfoCard_Cipher_Symmetric_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="136" package="Default">
        <name>setSymCipherObject</name>
        <docblock>
          <description>Sets the InfoCard symmetric cipher object to use</description>
          <long-description>
</long-description>
          <tag line="130" name="param" description="" type="\Zend_InfoCard_Cipher_Symmetric_Interface" variable="$cipherObj">
            <type by_reference="false">\Zend_InfoCard_Cipher_Symmetric_Interface</type>
          </tag>
          <tag line="130" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_InfoCard">
            <type by_reference="false">\Zend_Auth_Adapter_InfoCard</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$cipherObj</name>
          <default/>
          <type>Zend_InfoCard_Cipher_Symmetric_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="149" package="Default">
        <name>removeCertificatePair</name>
        <docblock>
          <description>Remove a Certificate Pair by Key ID from the search list</description>
          <long-description>
</long-description>
          <tag line="142" name="param" description="The Certificate Key ID returned from adding the certificate pair" type="string" variable="$key_id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="142" name="throws" description="" type="\Zend_InfoCard_Exception">
            <type by_reference="false">\Zend_InfoCard_Exception</type>
          </tag>
          <tag line="142" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_InfoCard">
            <type by_reference="false">\Zend_Auth_Adapter_InfoCard</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$key_id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="165" package="Default">
        <name>addCertificatePair</name>
        <docblock>
          <description>Add a Certificate Pair to the list of certificates searched by the component</description>
          <long-description>
</long-description>
          <tag line="155" name="param" description="The path to the private key file for the pair" type="string" variable="$private_key_file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="The path to the certificate / public key for the pair" type="string" variable="$public_key_file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="(optional) The URI for the type of key pair this is (default RSA with OAEP padding)" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="param" description="(optional) The password for the private key file if necessary" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="155" name="throws" description="" type="\Zend_InfoCard_Exception">
            <type by_reference="false">\Zend_InfoCard_Exception</type>
          </tag>
          <tag line="155" name="return" description="A key ID representing this key pair in the component" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$private_key_file</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$public_key_file</name>
          <default/>
          <type/>
        </argument>
        <argument line="165">
          <name>$type</name>
          <default>Zend_InfoCard_Cipher::ENC_RSA_OAEP_MGF1P</default>
          <type/>
        </argument>
        <argument line="165">
          <name>$password</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="178" package="Default">
        <name>getCertificatePair</name>
        <docblock>
          <description>Return a Certificate Pair from a key ID</description>
          <long-description>
</long-description>
          <tag line="170" name="param" description="The Key ID of the certificate pair in the component" type="string" variable="$key_id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="170" name="throws" description="" type="\Zend_InfoCard_Exception">
            <type by_reference="false">\Zend_InfoCard_Exception</type>
          </tag>
          <tag line="170" name="return" description="An array containing the path to the private/public key files, the type URI and the password if provided" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$key_id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="189" package="Default">
        <name>setXmlToken</name>
        <docblock>
          <description>Set the XML Token to be processed</description>
          <long-description>
</long-description>
          <tag line="183" name="param" description="The XML token to process" type="string" variable="$strXmlToken">
            <type by_reference="false">string</type>
          </tag>
          <tag line="183" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_InfoCard">
            <type by_reference="false">\Zend_Auth_Adapter_InfoCard</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$strXmlToken</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="200" package="Default">
        <name>getXmlToken</name>
        <docblock>
          <description>Get the XML Token being processed</description>
          <long-description>
</long-description>
          <tag line="195" name="return" description="The XML token to be processed" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="210" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Authenticates the XML token</description>
          <long-description>
</long-description>
          <tag line="205" name="return" description="The result of the authentication" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Adapter/Interface.php" hash="b7d0d04dfc23dbbfcd951faf1a3c4714" package="Zend\Auth\Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Zend_Auth_Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Result.php</name>
    </include>
    <interface namespace="default" line="37" package="Zend\Auth\Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_Interface</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Interface</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Zend_Auth_Adapter"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="45" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Performs an authentication attempt</description>
          <long-description>
</long-description>
          <tag line="39" name="throws" description="If authentication cannot be performed" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="39" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Zend/Auth/Adapter/Digest.php" hash="9e98ffb2a758ed32045813f92a69643a" package="Zend\Auth\Adapter">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Adapter"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Digest.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="30">No short description for class Zend_Auth_Adapter_Digest</critical>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Adapter/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Auth\Adapter">
      <name>Zend_Auth_Adapter_Digest</name>
      <extends/>
      <full_name>\Zend_Auth_Adapter_Digest</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Adapter"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Adapter_Interface</implements>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$_filename</name>
        <default/>
        <docblock>
          <description>Filename against which authentication queries are performed</description>
          <long-description>
</long-description>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$_realm</name>
        <default/>
        <docblock>
          <description>Digest authentication realm</description>
          <long-description>
</long-description>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$_username</name>
        <default/>
        <docblock>
          <description>Digest authentication user</description>
          <long-description>
</long-description>
          <tag line="53" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$_password</name>
        <default/>
        <docblock>
          <description>Password for the user of the realm</description>
          <long-description>
</long-description>
          <tag line="60" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="76" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Sets adapter options</description>
          <long-description>
</long-description>
          <tag line="67" name="param" description="" type="mixed" variable="$filename">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="mixed" variable="$realm">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="mixed" variable="$username">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="mixed" variable="$password">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$filename</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$realm</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$username</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$password</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="92" package="Default">
        <name>getFilename</name>
        <docblock>
          <description>Returns the filename option value or null if it has not yet been set</description>
          <long-description>
</long-description>
          <tag line="87" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="103" package="Default">
        <name>setFilename</name>
        <docblock>
          <description>Sets the filename option value</description>
          <long-description>
</long-description>
          <tag line="97" name="param" description="" type="mixed" variable="$filename">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="97" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Digest">
            <type by_reference="false">\Zend_Auth_Adapter_Digest</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="114" package="Default">
        <name>getRealm</name>
        <docblock>
          <description>Returns the realm option value or null if it has not yet been set</description>
          <long-description>
</long-description>
          <tag line="109" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125" package="Default">
        <name>setRealm</name>
        <docblock>
          <description>Sets the realm option value</description>
          <long-description>
</long-description>
          <tag line="119" name="param" description="" type="mixed" variable="$realm">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="119" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Digest">
            <type by_reference="false">\Zend_Auth_Adapter_Digest</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$realm</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="136" package="Default">
        <name>getUsername</name>
        <docblock>
          <description>Returns the username option value or null if it has not yet been set</description>
          <long-description>
</long-description>
          <tag line="131" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="147" package="Default">
        <name>setUsername</name>
        <docblock>
          <description>Sets the username option value</description>
          <long-description>
</long-description>
          <tag line="141" name="param" description="" type="mixed" variable="$username">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="141" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Digest">
            <type by_reference="false">\Zend_Auth_Adapter_Digest</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="158" package="Default">
        <name>getPassword</name>
        <docblock>
          <description>Returns the password option value or null if it has not yet been set</description>
          <long-description>
</long-description>
          <tag line="153" name="return" description="" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="169" package="Default">
        <name>setPassword</name>
        <docblock>
          <description>Sets the password option value</description>
          <long-description>
</long-description>
          <tag line="163" name="param" description="" type="mixed" variable="$password">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="163" name="return" description="Provides a fluent interface" type="\Zend_Auth_Adapter_Digest">
            <type by_reference="false">\Zend_Auth_Adapter_Digest</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="181" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Defined by Zend_Auth_Adapter_Interface</description>
          <long-description>
</long-description>
          <tag line="175" name="throws" description="" type="\Zend_Auth_Adapter_Exception">
            <type by_reference="false">\Zend_Auth_Adapter_Exception</type>
          </tag>
          <tag line="175" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="241" package="Default">
        <name>_secureStringCompare</name>
        <docblock>
          <description>Securely compare two strings for equality while avoided C level memcmp()
optimisations capable of leaking timing information useful to an attacker
attempting to iteratively guess the unknown string (e.g. password) being
compared against.</description>
          <long-description>
</long-description>
          <tag line="231" name="param" description="" type="string" variable="$a">
            <type by_reference="false">string</type>
          </tag>
          <tag line="231" name="param" description="" type="string" variable="$b">
            <type by_reference="false">string</type>
          </tag>
          <tag line="231" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$a</name>
          <default/>
          <type/>
        </argument>
        <argument line="241">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Exception.php" hash="3446788000111a67ae87b86fcff20bab" package="Zend\Auth">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="29">No short description for class Zend_Auth_Exception</critical>
    </parse_markers>
    <include type="Require Once" line="26">
      <name>Zend/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="35" namespace="default" package="Zend\Auth">
      <name>Zend_Auth_Exception</name>
      <extends>\Zend_Exception</extends>
      <full_name>\Zend_Auth_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="29" name="category" description="Zend"/>
        <tag line="29" name="package" description="Zend_Auth"/>
        <tag line="29" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="29" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Auth/Result.php" hash="2ef4f75cdafc13e8899a99117a059707" package="Zend\Auth">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Result.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="23">No short description for class Zend_Auth_Result</critical>
    </parse_markers>
    <class final="false" abstract="false" line="29" namespace="default" package="Zend\Auth">
      <name>Zend_Auth_Result</name>
      <extends/>
      <full_name>\Zend_Auth_Result</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Auth"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="34" package="Default">
        <name>FAILURE</name>
        <value>0</value>
        <docblock>
          <description>General Failure</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="39" package="Default">
        <name>FAILURE_IDENTITY_NOT_FOUND</name>
        <value>-1</value>
        <docblock>
          <description>Failure due to identity not being found.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="44" package="Default">
        <name>FAILURE_IDENTITY_AMBIGUOUS</name>
        <value>-2</value>
        <docblock>
          <description>Failure due to identity being ambiguous.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="49" package="Default">
        <name>FAILURE_CREDENTIAL_INVALID</name>
        <value>-3</value>
        <docblock>
          <description>Failure due to invalid credential being supplied.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="54" package="Default">
        <name>FAILURE_UNCATEGORIZED</name>
        <value>-4</value>
        <docblock>
          <description>Failure due to uncategorized reasons.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="59" package="Default">
        <name>SUCCESS</name>
        <value>1</value>
        <docblock>
          <description>Authentication success.</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="66" package="Default">
        <name>$_code</name>
        <default/>
        <docblock>
          <description>Authentication result code</description>
          <long-description>
</long-description>
          <tag line="61" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$_identity</name>
        <default/>
        <docblock>
          <description>The identity used in the authentication attempt</description>
          <long-description>
</long-description>
          <tag line="68" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$_messages</name>
        <default/>
        <docblock>
          <description>An array of string reasons why the authentication attempt was unsuccessful</description>
          <long-description>&lt;p&gt;If authentication was successful, this should be an empty array.&lt;/p&gt;
</long-description>
          <tag line="75" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="92" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Sets the result code, identity, and failure messages</description>
          <long-description>
</long-description>
          <tag line="84" name="param" description="" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="84" name="param" description="" type="mixed" variable="$identity">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="84" name="param" description="" type="array" variable="$messages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$identity</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$messages</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="112" package="Default">
        <name>isValid</name>
        <docblock>
          <description>Returns whether the result represents a successful authentication attempt</description>
          <long-description>
</long-description>
          <tag line="107" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="122" package="Default">
        <name>getCode</name>
        <docblock>
          <description>getCode() - Get the result code for this authentication attempt</description>
          <long-description>
</long-description>
          <tag line="117" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="132" package="Default">
        <name>getIdentity</name>
        <docblock>
          <description>Returns the identity used in the authentication attempt</description>
          <long-description>
</long-description>
          <tag line="127" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="144" package="Default">
        <name>getMessages</name>
        <docblock>
          <description>Returns an array of string reasons why the authentication attempt was unsuccessful</description>
          <long-description>&lt;p&gt;If authentication was successful, this method returns an empty array.&lt;/p&gt;
</long-description>
          <tag line="137" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Storage/Exception.php" hash="6e79f579372030748f603e6db919a6b3" package="Zend\Auth\Storage">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Storage"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Exception.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="30">No short description for class Zend_Auth_Storage_Exception</critical>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Exception.php</name>
    </include>
    <class final="false" abstract="false" line="37" namespace="default" package="Zend\Auth\Storage">
      <name>Zend_Auth_Storage_Exception</name>
      <extends>\Zend_Auth_Exception</extends>
      <full_name>\Zend_Auth_Storage_Exception</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Storage"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
    </class>
  </file>
  <file path="Zend/Auth/Storage/NonPersistent.php" hash="20ddfa2e072eb7a9c880d9e16cbd4493" package="Zend\Auth\Storage">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Storage"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: NonPersistent.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Storage/Interface.php</name>
    </include>
    <class final="false" abstract="false" line="43" namespace="default" package="Zend\Auth\Storage">
      <name>Zend_Auth_Storage_NonPersistent</name>
      <extends/>
      <full_name>\Zend_Auth_Storage_NonPersistent</full_name>
      <docblock>
        <description>Non-Persistent Auth Storage</description>
        <long-description>&lt;p&gt;Since HTTP Authentication happens again on each request, this will always be
re-populated. So there's no need to use sessions, this simple value class
will hold the data for rest of the current request.&lt;/p&gt;
</long-description>
        <tag line="30" name="category" description="Zend"/>
        <tag line="30" name="package" description="Zend_Auth"/>
        <tag line="30" name="subpackage" description="Storage"/>
        <tag line="30" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="30" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Storage_Interface</implements>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$_data</name>
        <default/>
        <docblock>
          <description>Holds the actual auth data</description>
          <long-description>
</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="56" package="Default">
        <name>isEmpty</name>
        <docblock>
          <description>Returns true if and only if storage is empty</description>
          <long-description>
</long-description>
          <tag line="50" name="throws" description="If it is impossible to determine whether storage is empty" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="50" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="68" package="Default">
        <name>read</name>
        <docblock>
          <description>Returns the contents of storage
Behavior is undefined when storage is empty.</description>
          <long-description>
</long-description>
          <tag line="61" name="throws" description="If reading contents from storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="61" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="80" package="Default">
        <name>write</name>
        <docblock>
          <description>Writes $contents to storage</description>
          <long-description>
</long-description>
          <tag line="73" name="param" description="" type="mixed" variable="$contents">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="73" name="throws" description="If writing $contents to storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="73" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="91" package="Default">
        <name>clear</name>
        <docblock>
          <description>Clears contents from storage</description>
          <long-description>
</long-description>
          <tag line="85" name="throws" description="If clearing contents from storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="85" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Storage/Session.php" hash="c510e066738ba22d6710901a68c29c4f" package="Zend\Auth\Storage">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Storage"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Session.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="36">No short description for class Zend_Auth_Storage_Session</critical>
    </parse_markers>
    <include type="Require Once" line="27">
      <name>Zend/Auth/Storage/Interface.php</name>
    </include>
    <include type="Require Once" line="33">
      <name>Zend/Session.php</name>
    </include>
    <class final="false" abstract="false" line="43" namespace="default" package="Zend\Auth\Storage">
      <name>Zend_Auth_Storage_Session</name>
      <extends/>
      <full_name>\Zend_Auth_Storage_Session</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="36" name="category" description="Zend"/>
        <tag line="36" name="package" description="Zend_Auth"/>
        <tag line="36" name="subpackage" description="Storage"/>
        <tag line="36" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="36" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <implements>\Zend_Auth_Storage_Interface</implements>
      <constant namespace="default" line="48" package="Default">
        <name>NAMESPACE_DEFAULT</name>
        <value>'Zend_Auth'</value>
        <docblock>
          <description>Default session namespace</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="53" package="Default">
        <name>MEMBER_DEFAULT</name>
        <value>'storage'</value>
        <docblock>
          <description>Default session object member name</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$_session</name>
        <default/>
        <docblock>
          <description>Object to proxy $_SESSION storage</description>
          <long-description>
</long-description>
          <tag line="55" name="var" description="" type="\Zend_Session_Namespace">
            <type by_reference="false">\Zend_Session_Namespace</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$_namespace</name>
        <default/>
        <docblock>
          <description>Session namespace</description>
          <long-description>
</long-description>
          <tag line="62" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" package="Default">
        <name>$_member</name>
        <default/>
        <docblock>
          <description>Session object member</description>
          <long-description>
</long-description>
          <tag line="69" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="83" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Sets session storage options and initializes session namespace object</description>
          <long-description>
</long-description>
          <tag line="76" name="param" description="" type="mixed" variable="$namespace">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="param" description="" type="mixed" variable="$member">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$namespace</name>
          <default>self::NAMESPACE_DEFAULT</default>
          <type/>
        </argument>
        <argument line="83">
          <name>$member</name>
          <default>self::MEMBER_DEFAULT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="95" package="Default">
        <name>getNamespace</name>
        <docblock>
          <description>Returns the session namespace</description>
          <long-description>
</long-description>
          <tag line="90" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="105" package="Default">
        <name>getMember</name>
        <docblock>
          <description>Returns the name of the session object member</description>
          <long-description>
</long-description>
          <tag line="100" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="115" package="Default">
        <name>isEmpty</name>
        <docblock>
          <description>Defined by Zend_Auth_Storage_Interface</description>
          <long-description>
</long-description>
          <tag line="110" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125" package="Default">
        <name>read</name>
        <docblock>
          <description>Defined by Zend_Auth_Storage_Interface</description>
          <long-description>
</long-description>
          <tag line="120" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="136" package="Default">
        <name>write</name>
        <docblock>
          <description>Defined by Zend_Auth_Storage_Interface</description>
          <long-description>
</long-description>
          <tag line="130" name="param" description="" type="mixed" variable="$contents">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="130" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="146" package="Default">
        <name>clear</name>
        <docblock>
          <description>Defined by Zend_Auth_Storage_Interface</description>
          <long-description>
</long-description>
          <tag line="141" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Auth/Storage/Interface.php" hash="c22296e5b10f106683c9abcd4d143bc5" package="Zend\Auth\Storage">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="subpackage" description="Storage"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Interface.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <interface namespace="default" line="30" package="Zend\Auth\Storage">
      <name>Zend_Auth_Storage_Interface</name>
      <extends/>
      <full_name>\Zend_Auth_Storage_Interface</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Auth"/>
        <tag line="23" name="subpackage" description="Storage"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" line="38" package="Default">
        <name>isEmpty</name>
        <docblock>
          <description>Returns true if and only if storage is empty</description>
          <long-description>
</long-description>
          <tag line="32" name="throws" description="If it is impossible to determine whether storage is empty" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="32" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="48" package="Default">
        <name>read</name>
        <docblock>
          <description>Returns the contents of storage</description>
          <long-description>&lt;p&gt;Behavior is undefined when storage is empty.&lt;/p&gt;
</long-description>
          <tag line="40" name="throws" description="If reading contents from storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="40" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="57" package="Default">
        <name>write</name>
        <docblock>
          <description>Writes $contents to storage</description>
          <long-description>
</long-description>
          <tag line="50" name="param" description="" type="mixed" variable="$contents">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="50" name="throws" description="If writing $contents to storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="50" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$contents</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="65" package="Default">
        <name>clear</name>
        <docblock>
          <description>Clears contents from storage</description>
          <long-description>
</long-description>
          <tag line="59" name="throws" description="If clearing contents from storage is impossible" type="\Zend_Auth_Storage_Exception">
            <type by_reference="false">\Zend_Auth_Storage_Exception</type>
          </tag>
          <tag line="59" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Zend/Auth.php" hash="231661d883d0d7c6ff8f0447fe225af9" package="Zend\Auth">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Auth"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Auth.php 24593 2012-01-05 20:35:02Z matthew $"/>
    </docblock>
    <parse_markers>
      <critical line="23">No short description for class Zend_Auth</critical>
    </parse_markers>
    <class final="false" abstract="false" line="29" namespace="default" package="Zend\Auth">
      <name>Zend_Auth</name>
      <extends/>
      <full_name>\Zend_Auth</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag line="23" name="category" description="Zend"/>
        <tag line="23" name="package" description="Zend_Auth"/>
        <tag line="23" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="23" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="36" package="Default">
        <name>$_instance</name>
        <default>null</default>
        <docblock>
          <description>Singleton instance</description>
          <long-description>
</long-description>
          <tag line="31" name="var" description="" type="\Zend_Auth">
            <type by_reference="false">\Zend_Auth</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$_storage</name>
        <default>null</default>
        <docblock>
          <description>Persistent storage handler</description>
          <long-description>
</long-description>
          <tag line="38" name="var" description="" type="\Zend_Auth_Storage_Interface">
            <type by_reference="false">\Zend_Auth_Storage_Interface</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" line="50" package="Default">
        <name>__construct</name>
        <docblock>
          <description>Singleton pattern implementation makes "new" unavailable</description>
          <long-description>
</long-description>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="58" package="Default">
        <name>__clone</name>
        <docblock>
          <description>Singleton pattern implementation makes "clone" unavailable</description>
          <long-description>
</long-description>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="68" package="Default">
        <name>getInstance</name>
        <docblock>
          <description>Returns an instance of Zend_Auth</description>
          <long-description>&lt;p&gt;Singleton pattern implementation&lt;/p&gt;
</long-description>
          <tag line="61" name="return" description="Provides a fluent interface" type="\Zend_Auth">
            <type by_reference="false">\Zend_Auth</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="84" package="Default">
        <name>getStorage</name>
        <docblock>
          <description>Returns the persistent storage handler</description>
          <long-description>&lt;p&gt;Session storage is used by default unless a different storage adapter has been set.&lt;/p&gt;
</long-description>
          <tag line="77" name="return" description="" type="\Zend_Auth_Storage_Interface">
            <type by_reference="false">\Zend_Auth_Storage_Interface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="103" package="Default">
        <name>setStorage</name>
        <docblock>
          <description>Sets the persistent storage handler</description>
          <long-description>
</long-description>
          <tag line="97" name="param" description="" type="\Zend_Auth_Storage_Interface" variable="$storage">
            <type by_reference="false">\Zend_Auth_Storage_Interface</type>
          </tag>
          <tag line="97" name="return" description="Provides a fluent interface" type="\Zend_Auth">
            <type by_reference="false">\Zend_Auth</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$storage</name>
          <default/>
          <type>Zend_Auth_Storage_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="115" package="Default">
        <name>authenticate</name>
        <docblock>
          <description>Authenticates against the supplied adapter</description>
          <long-description>
</long-description>
          <tag line="109" name="param" description="" type="\Zend_Auth_Adapter_Interface" variable="$adapter">
            <type by_reference="false">\Zend_Auth_Adapter_Interface</type>
          </tag>
          <tag line="109" name="return" description="" type="\Zend_Auth_Result">
            <type by_reference="false">\Zend_Auth_Result</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$adapter</name>
          <default/>
          <type>Zend_Auth_Adapter_Interface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="139" package="Default">
        <name>hasIdentity</name>
        <docblock>
          <description>Returns true if and only if an identity is available from storage</description>
          <long-description>
</long-description>
          <tag line="134" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="149" package="Default">
        <name>getIdentity</name>
        <docblock>
          <description>Returns the identity from storage or null if no identity is available</description>
          <long-description>
</long-description>
          <tag line="144" name="return" description="" type="mixed|null">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="165" package="Default">
        <name>clearIdentity</name>
        <docblock>
          <description>Clears the identity from persistent storage</description>
          <long-description>
</long-description>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Zend/Version.php" hash="abe85b3984157b537e19772e2fa92a2d" package="Zend\Version">
    <docblock>
      <description>Zend Framework</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the new BSD license that is bundled
with this package in the file LICENSE.txt.
It is also available through the world-wide-web at this URL:
http://framework.zend.com/license/new-bsd
If you did not receive a copy of the license and are unable to
obtain it through the world-wide-web, please send an email
to license@zend.com so we can send you a copy immediately.&lt;/p&gt;
</long-description>
      <tag line="2" name="category" description="Zend"/>
      <tag line="2" name="package" description="Zend_Version"/>
      <tag line="2" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
      <tag line="2" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      <tag line="2" name="version" description="$Id: Version.php 25049 2012-08-27 15:33:58Z matthew $"/>
    </docblock>
    <class final="true" abstract="false" line="30" namespace="default" package="Zend\Version">
      <name>Zend_Version</name>
      <extends/>
      <full_name>\Zend_Version</full_name>
      <docblock>
        <description>Class to store and retrieve the version of Zend Framework.</description>
        <long-description>
</long-description>
        <tag line="22" name="category" description="Zend"/>
        <tag line="22" name="package" description="Zend_Version"/>
        <tag line="22" name="copyright" description="Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)"/>
        <tag line="22" name="license" description="http://framework.zend.com/license/new-bsd     New BSD License"/>
      </docblock>
      <constant namespace="default" line="35" package="Default">
        <name>VERSION</name>
        <value>'1.12.0'</value>
        <docblock>
          <description>Zend Framework version identification - see compareVersion()</description>
          <long-description>
</long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="42" package="Default">
        <name>$_latestVersion</name>
        <default/>
        <docblock>
          <description>The latest stable version Zend Framework available</description>
          <long-description>
</long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" line="54" package="Default">
        <name>compareVersion</name>
        <docblock>
          <description>Compare the specified Zend Framework version string $version
with the current Zend_Version::VERSION of Zend Framework.</description>
          <long-description>
</long-description>
          <tag line="44" name="param" description="A version string (e.g. &quot;0.7.1&quot;)." type="string" variable="$version">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="-1 if the $version is older, 0 if they are the same, and +1 if $version is newer." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$version</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" line="67" package="Default">
        <name>getLatest</name>
        <docblock>
          <description>Fetches the version of the latest stable release</description>
          <long-description>
</long-description>
          <tag line="61" name="link" description="http://framework.zend.com/download/latest" link="http://framework.zend.com/download/latest"/>
          <tag line="61" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <package name="Default"/>
  <package name="Zend">
    <package name="Amf">
      <package name="Adobe"/>
      <package name="Auth"/>
      <package name="Parse">
        <package name="Amf0"/>
        <package name="Amf3"/>
      </package>
      <package name="Request"/>
      <package name="Response"/>
      <package name="Server"/>
      <package name="Util"/>
      <package name="Value"/>
    </package>
    <package name="Auth">
      <package name="Adapter"/>
      <package name="Storage"/>
      <package name="Zend">
        <package name="Auth">
          <package name="Adapter">
            <package name="Http"/>
          </package>
        </package>
      </package>
    </package>
    <package name="Date">
      <package name="Zend">
        <package name="Date">
          <package name="Cities"/>
          <package name="DateObject"/>
        </package>
      </package>
    </package>
    <package name="Loader">
      <package name="Autoloader"/>
      <package name="PluginLoader"/>
    </package>
    <package name="Server">
      <package name="Method"/>
      <package name="Reflection"/>
    </package>
    <package name="Session">
      <package name="SaveHandler"/>
      <package name="Validator"/>
    </package>
    <package name="Version"/>
  </package>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
